/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi;

import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import java.util.concurrent.TimeUnit;

import java.lang.String;
import java.lang.System;
import java.util.Optional;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.function.Consumer;
import org.openapis.openapi.utils.BackoffStrategy;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.RetryConfig;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;


/**
 * Spring Boot Auto Configuration for openapi SDK
 * This configuration class automatically configures the openapi SDK
 * when Spring Boot detects it on the classpath.
 */
@AutoConfiguration
@ConditionalOnClass(Stirling.class)
@EnableConfigurationProperties(OpenapiAutoConfigProperties.class)
public class OpenapiAutoConfig {

    /**
     * Constructor.
     */
    public OpenapiAutoConfig() {
    }

    /**
     * Creates a RetryConfig bean from properties if retry is enabled.
     * 
     * @param properties the configuration properties
     * @return A configured RetryConfig instance
     */
    @Bean
    @ConditionalOnMissingBean
    @ConditionalOnProperty(prefix = "openapi.retry-config", name = "strategy")
    public RetryConfig retryConfig(OpenapiAutoConfigProperties properties) {
        OpenapiAutoConfigProperties.RetryConfig retryProps = properties.getRetryConfig();
        
        if (RetryConfig.Strategy.BACKOFF.equals(retryProps.getStrategy())) {
            OpenapiAutoConfigProperties.RetryConfig.Backoff backoff = retryProps.getBackoff();
            return RetryConfig.builder()
                .backoff(
                    BackoffStrategy.builder()
                        .initialInterval(backoff.getInitialInterval().toMillis(), TimeUnit.MILLISECONDS)
                        .maxInterval(backoff.getMaxInterval().toMillis(), TimeUnit.MILLISECONDS)
                        .maxElapsedTime(backoff.getMaxElapsedTime().toMillis(), TimeUnit.MILLISECONDS)
                        .baseFactor(backoff.getBaseFactor())
                        .jitterFactor(backoff.getJitterFactor())
                        .retryConnectError(backoff.isRetryConnectError())
                        .retryReadTimeoutError(backoff.isRetryReadTimeoutError())
                        .build()
                )
                .build();
        }
        
        // Default retry config for other strategies
        return RetryConfig.builder().build();
    }

    /**
     * Creates a {@code Consumer<String>} bean for HTTP debug logging if none exists.
     * This logger is used by the SpeakeasyHTTPClient for debug output when debug logging is enabled.
     * By default, it logs to {@code System.out}, but can be customized by providing your own {@code Consumer<String>} bean.
     *
     * @return A {@code Consumer<String>} that logs messages to {@code System.out}
     */
    @Bean
    @ConditionalOnMissingBean
    public Consumer<String> httpLogger() {
        return System.out::println;
    }

    /**
     * Creates an HTTPClient bean if none exists.
     *
     * @param properties the configuration properties
     * @param httpLogger the logger for HTTP debug output
     * @return A configured HTTPClient instance
     */
    @Bean
    @ConditionalOnMissingBean
    public HTTPClient httpClient(OpenapiAutoConfigProperties properties, Consumer<String> httpLogger) {
        OpenapiAutoConfigProperties.HttpClient httpClientProps = properties.getHttpClient();

        // Configure the static logger
        SpeakeasyHTTPClient.setLogger(httpLogger);

        if (httpClientProps != null) {
            // Configure debug logging
            SpeakeasyHTTPClient.setDebugLogging(httpClientProps.isEnableDebugLogging());

            // Configure redacted headers
            if (httpClientProps.getRedactedHeaders() != null && !httpClientProps.getRedactedHeaders().isEmpty()) {
                SpeakeasyHTTPClient.setRedactedHeaders(httpClientProps.getRedactedHeaders());
            }
        }

        return new SpeakeasyHTTPClient();
    }

    /**
     * Creates the SDKConfiguration bean as the single source of truth for all SDK configuration.
     *
     * @param properties the configuration properties
     * @param httpClient the HTTP client bean
     * @param hooks the hooks bean
     * @param asyncHooks the async hooks bean
     * @param retryConfig the retry config bean (optional)
     * @return A configured SDKConfiguration instance
     */
    @Bean
    @ConditionalOnMissingBean
    public SDKConfiguration sdkConfiguration(
            OpenapiAutoConfigProperties properties,
            HTTPClient httpClient,
            org.openapis.openapi.utils.Hooks hooks,
            org.openapis.openapi.utils.AsyncHooks asyncHooks,
            Optional<RetryConfig> retryConfig) {
        
        SDKConfiguration sdkConfiguration = new SDKConfiguration();
        
        sdkConfiguration.setClient(httpClient);
        
        sdkConfiguration.setHooks(hooks);
        sdkConfiguration.setAsyncHooks(asyncHooks);
        
        if (properties.getServerUrl() != null) {
            sdkConfiguration.setServerUrl(properties.getServerUrl());
        }
        sdkConfiguration.setServerIdx(properties.getServerIdx());
        
        sdkConfiguration.setRetryConfig(retryConfig);
        
        return sdkConfiguration;
    }

    /**
     * Creates the main SDK bean using the configured SDKConfiguration.
     *
     * @param sdkConfiguration the configured SDKConfiguration bean
     * @return A configured Stirling instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Stirling stirling(SDKConfiguration sdkConfiguration) {
        return new Stirling(sdkConfiguration);
    }

    /**
     * Creates an AsyncHooks bean if none exists.
     * 
     * @return A configured AsyncHooks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public org.openapis.openapi.utils.AsyncHooks asyncHooks() {
        return new org.openapis.openapi.utils.AsyncHooks();
    }

    /**
     * Creates a ScheduledExecutorService for async retry operations if none exists.
     * 
     * @return A configured ScheduledExecutorService instance
     */
    @Bean
    @ConditionalOnMissingBean
    public ScheduledExecutorService retryScheduler() {
        return Executors.newSingleThreadScheduledExecutor();
    }

    /**
     * Creates a Hooks configuration bean if none exists.
     *
     * @return A configured Hooks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public org.openapis.openapi.utils.Hooks hooks() {
        return new org.openapis.openapi.utils.Hooks();
    }
    /**
     * Creates a Security sub-SDK bean if none exists.
     *
     * @param stirling the main SDK instance
     * @return A configured Security instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Security security(Stirling stirling) {
        return stirling.security();
    }
    /**
     * Creates a Pipeline sub-SDK bean if none exists.
     *
     * @param stirling the main SDK instance
     * @return A configured Pipeline instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Pipeline pipeline(Stirling stirling) {
        return stirling.pipeline();
    }
    /**
     * Creates a Misc sub-SDK bean if none exists.
     *
     * @param stirling the main SDK instance
     * @return A configured Misc instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Misc misc(Stirling stirling) {
        return stirling.misc();
    }
    /**
     * Creates a General sub-SDK bean if none exists.
     *
     * @param stirling the main SDK instance
     * @return A configured General instance
     */
    @Bean
    @ConditionalOnMissingBean
    public General general(Stirling stirling) {
        return stirling.general();
    }
    /**
     * Creates a Filter sub-SDK bean if none exists.
     *
     * @param stirling the main SDK instance
     * @return A configured Filter instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Filter filter(Stirling stirling) {
        return stirling.filter();
    }
    /**
     * Creates a Convert sub-SDK bean if none exists.
     *
     * @param stirling the main SDK instance
     * @return A configured Convert instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Convert convert(Stirling stirling) {
        return stirling.convert();
    }
    /**
     * Creates a Analysis sub-SDK bean if none exists.
     *
     * @param stirling the main SDK instance
     * @return A configured Analysis instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Analysis analysis(Stirling stirling) {
        return stirling.analysis();
    }

    /**
     * Creates the async SDK bean if none exists.
     *
     * @param stirling the main SDK instance
     * @param sdkConfiguration the configured SDKConfiguration bean
     * @return A configured AsyncStirling instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncStirling asyncStirling(Stirling stirling, SDKConfiguration sdkConfiguration) {
        return new AsyncStirling(stirling, sdkConfiguration);
    }
    /**
     * Creates an AsyncSecurity sub-SDK bean if none exists.
     *
     * @param asyncStirling the async SDK instance
     * @return A configured AsyncSecurity instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncSecurity asyncSecurity(AsyncStirling asyncStirling) {
        return asyncStirling.security();
    }
    /**
     * Creates an AsyncPipeline sub-SDK bean if none exists.
     *
     * @param asyncStirling the async SDK instance
     * @return A configured AsyncPipeline instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncPipeline asyncPipeline(AsyncStirling asyncStirling) {
        return asyncStirling.pipeline();
    }
    /**
     * Creates an AsyncMisc sub-SDK bean if none exists.
     *
     * @param asyncStirling the async SDK instance
     * @return A configured AsyncMisc instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncMisc asyncMisc(AsyncStirling asyncStirling) {
        return asyncStirling.misc();
    }
    /**
     * Creates an AsyncGeneral sub-SDK bean if none exists.
     *
     * @param asyncStirling the async SDK instance
     * @return A configured AsyncGeneral instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncGeneral asyncGeneral(AsyncStirling asyncStirling) {
        return asyncStirling.general();
    }
    /**
     * Creates an AsyncFilter sub-SDK bean if none exists.
     *
     * @param asyncStirling the async SDK instance
     * @return A configured AsyncFilter instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncFilter asyncFilter(AsyncStirling asyncStirling) {
        return asyncStirling.filter();
    }
    /**
     * Creates an AsyncConvert sub-SDK bean if none exists.
     *
     * @param asyncStirling the async SDK instance
     * @return A configured AsyncConvert instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncConvert asyncConvert(AsyncStirling asyncStirling) {
        return asyncStirling.convert();
    }
    /**
     * Creates an AsyncAnalysis sub-SDK bean if none exists.
     *
     * @param asyncStirling the async SDK instance
     * @return A configured AsyncAnalysis instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncAnalysis asyncAnalysis(AsyncStirling asyncStirling) {
        return asyncStirling.analysis();
    }
}