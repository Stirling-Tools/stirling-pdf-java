/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi;

import static org.openapis.openapi.operations.Operations.AsyncRequestOperation;

import jakarta.annotation.Nullable;
import java.util.concurrent.CompletableFuture;
import org.openapis.openapi.models.components.AddAttachmentRequest;
import org.openapis.openapi.models.components.AddPageNumbersRequest;
import org.openapis.openapi.models.components.AddStampRequest;
import org.openapis.openapi.models.components.AutoSplitPdfRequest;
import org.openapis.openapi.models.components.ExtractHeaderRequest;
import org.openapis.openapi.models.components.ExtractImageScansRequest;
import org.openapis.openapi.models.components.FlattenRequest;
import org.openapis.openapi.models.components.MetadataRequest;
import org.openapis.openapi.models.components.OptimizePdfRequest;
import org.openapis.openapi.models.components.OverlayImageRequest;
import org.openapis.openapi.models.components.PDFExtractImagesRequest;
import org.openapis.openapi.models.components.PDFFile;
import org.openapis.openapi.models.components.ProcessPdfWithOcrRequest;
import org.openapis.openapi.models.components.RemoveBlankPagesRequest;
import org.openapis.openapi.models.components.ReplaceAndInvertColorRequest;
import org.openapis.openapi.models.components.ScannerEffectRequest;
import org.openapis.openapi.models.operations.async.AddAttachmentsRequestBuilder;
import org.openapis.openapi.models.operations.async.AddAttachmentsResponse;
import org.openapis.openapi.models.operations.async.AddPageNumbersRequestBuilder;
import org.openapis.openapi.models.operations.async.AddPageNumbersResponse;
import org.openapis.openapi.models.operations.async.AddStampRequestBuilder;
import org.openapis.openapi.models.operations.async.AddStampResponse;
import org.openapis.openapi.models.operations.async.AutoSplitPdfRequestBuilder;
import org.openapis.openapi.models.operations.async.AutoSplitPdfResponse;
import org.openapis.openapi.models.operations.async.DecompressPdfRequestBuilder;
import org.openapis.openapi.models.operations.async.DecompressPdfResponse;
import org.openapis.openapi.models.operations.async.ExtractHeader1RequestBuilder;
import org.openapis.openapi.models.operations.async.ExtractHeader1Response;
import org.openapis.openapi.models.operations.async.ExtractHeaderRequestBuilder;
import org.openapis.openapi.models.operations.async.ExtractHeaderResponse;
import org.openapis.openapi.models.operations.async.ExtractImageScansRequestBuilder;
import org.openapis.openapi.models.operations.async.ExtractImageScansResponse;
import org.openapis.openapi.models.operations.async.ExtractImagesRequestBuilder;
import org.openapis.openapi.models.operations.async.ExtractImagesResponse;
import org.openapis.openapi.models.operations.async.FlattenRequestBuilder;
import org.openapis.openapi.models.operations.async.FlattenResponse;
import org.openapis.openapi.models.operations.async.MetadataRequestBuilder;
import org.openapis.openapi.models.operations.async.MetadataResponse;
import org.openapis.openapi.models.operations.async.OptimizePdfRequestBuilder;
import org.openapis.openapi.models.operations.async.OptimizePdfResponse;
import org.openapis.openapi.models.operations.async.OverlayImageRequestBuilder;
import org.openapis.openapi.models.operations.async.OverlayImageResponse;
import org.openapis.openapi.models.operations.async.ProcessPdfWithOCRRequestBuilder;
import org.openapis.openapi.models.operations.async.ProcessPdfWithOCRResponse;
import org.openapis.openapi.models.operations.async.RemoveBlankPagesRequestBuilder;
import org.openapis.openapi.models.operations.async.RemoveBlankPagesResponse;
import org.openapis.openapi.models.operations.async.RepairPdfRequestBuilder;
import org.openapis.openapi.models.operations.async.RepairPdfResponse;
import org.openapis.openapi.models.operations.async.ReplaceAndInvertColorRequestBuilder;
import org.openapis.openapi.models.operations.async.ReplaceAndInvertColorResponse;
import org.openapis.openapi.models.operations.async.ScannerEffectRequestBuilder;
import org.openapis.openapi.models.operations.async.ScannerEffectResponse;
import org.openapis.openapi.models.operations.async.UnlockPDFFormsRequestBuilder;
import org.openapis.openapi.models.operations.async.UnlockPDFFormsResponse;
import org.openapis.openapi.operations.AddAttachments;
import org.openapis.openapi.operations.AddPageNumbers;
import org.openapis.openapi.operations.AddStamp;
import org.openapis.openapi.operations.AutoSplitPdf;
import org.openapis.openapi.operations.DecompressPdf;
import org.openapis.openapi.operations.ExtractHeader1;
import org.openapis.openapi.operations.ExtractHeader;
import org.openapis.openapi.operations.ExtractImageScans;
import org.openapis.openapi.operations.ExtractImages;
import org.openapis.openapi.operations.Flatten;
import org.openapis.openapi.operations.Metadata;
import org.openapis.openapi.operations.OptimizePdf;
import org.openapis.openapi.operations.OverlayImage;
import org.openapis.openapi.operations.ProcessPdfWithOCR;
import org.openapis.openapi.operations.RemoveBlankPages;
import org.openapis.openapi.operations.RepairPdf;
import org.openapis.openapi.operations.ReplaceAndInvertColor;
import org.openapis.openapi.operations.ScannerEffect;
import org.openapis.openapi.operations.UnlockPDFForms;
import org.openapis.openapi.utils.Headers;

/**
 * Specialized utilities and supplementary tools for enhanced document processing workflows.
 * 
 * <p>This endpoint group provides utility operations that support core document processing
 * tasks and address specific workflow needs in real-world scenarios.
 * 
 * <p>Common use cases:
 * • Document optimization for bandwidth-limited environments and storage cost management
 * • Document repair, content extraction, and validation for quality assurance
 * • Accessibility improvement and custom processing for specialized needs
 * 
 * <p>Business applications:
 * • Web publishing optimization, email attachment management, and archive efficiency
 * • Mobile compatibility, print production, and legacy document recovery
 * 
 * <p>Operational scenarios:
 * • Batch processing, quality control, and performance optimization
 * • Troubleshooting and recovery of problematic documents
 * 
 * <p>Target users: System administrators, document specialists, and organizations requiring
 * specialized document processing and optimization tools.
 */
public class AsyncMisc {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Misc syncSDK;

    AsyncMisc(Misc syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Misc sync() {
        return syncSDK;
    }


    /**
     * Update metadata of a PDF file
     * 
     * <p>This endpoint allows you to update the metadata of a given PDF file. You can add, modify, or delete standard and custom metadata fields. Input:PDF Output:PDF Type:SISO
     * 
     * @return The async call builder
     */
    public MetadataRequestBuilder metadata() {
        return new MetadataRequestBuilder(sdkConfiguration);
    }

    /**
     * Update metadata of a PDF file
     * 
     * <p>This endpoint allows you to update the metadata of a given PDF file. You can add, modify, or delete standard and custom metadata fields. Input:PDF Output:PDF Type:SISO
     * 
     * @return CompletableFuture&lt;MetadataResponse&gt; - The async response
     */
    public CompletableFuture<MetadataResponse> metadataDirect() {
        return metadata(null);
    }

    /**
     * Update metadata of a PDF file
     * 
     * <p>This endpoint allows you to update the metadata of a given PDF file. You can add, modify, or delete standard and custom metadata fields. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;MetadataResponse&gt; - The async response
     */
    public CompletableFuture<MetadataResponse> metadata(@Nullable MetadataRequest request) {
        AsyncRequestOperation<MetadataRequest, MetadataResponse> operation
              = new Metadata.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove read-only property from form fields
     * 
     * <p>Removing read-only property from form fields making them fillableInput:PDF, Output:PDF. Type:SISO
     * 
     * @return The async call builder
     */
    public UnlockPDFFormsRequestBuilder unlockPDFForms() {
        return new UnlockPDFFormsRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove read-only property from form fields
     * 
     * <p>Removing read-only property from form fields making them fillableInput:PDF, Output:PDF. Type:SISO
     * 
     * @return CompletableFuture&lt;UnlockPDFFormsResponse&gt; - The async response
     */
    public CompletableFuture<UnlockPDFFormsResponse> unlockPDFFormsDirect() {
        return unlockPDFForms(null);
    }

    /**
     * Remove read-only property from form fields
     * 
     * <p>Removing read-only property from form fields making them fillableInput:PDF, Output:PDF. Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UnlockPDFFormsResponse&gt; - The async response
     */
    public CompletableFuture<UnlockPDFFormsResponse> unlockPDFForms(@Nullable PDFFile request) {
        AsyncRequestOperation<PDFFile, UnlockPDFFormsResponse> operation
              = new UnlockPDFForms.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Grabs all JS from a PDF and returns a single JS file with all code
     * 
     * <p>desc. Input:PDF Output:JS Type:SISO
     * 
     * @return The async call builder
     */
    public ExtractHeaderRequestBuilder extractHeader() {
        return new ExtractHeaderRequestBuilder(sdkConfiguration);
    }

    /**
     * Grabs all JS from a PDF and returns a single JS file with all code
     * 
     * <p>desc. Input:PDF Output:JS Type:SISO
     * 
     * @return CompletableFuture&lt;ExtractHeaderResponse&gt; - The async response
     */
    public CompletableFuture<ExtractHeaderResponse> extractHeaderDirect() {
        return extractHeader(null);
    }

    /**
     * Grabs all JS from a PDF and returns a single JS file with all code
     * 
     * <p>desc. Input:PDF Output:JS Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ExtractHeaderResponse&gt; - The async response
     */
    public CompletableFuture<ExtractHeaderResponse> extractHeader(@Nullable PDFFile request) {
        AsyncRequestOperation<PDFFile, ExtractHeaderResponse> operation
              = new ExtractHeader.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Apply scanner effect to PDF
     * 
     * <p>Applies various effects to simulate a scanned document, including rotation, noise, and edge softening. Input:PDF Output:PDF Type:SISO
     * 
     * @return The async call builder
     */
    public ScannerEffectRequestBuilder scannerEffect() {
        return new ScannerEffectRequestBuilder(sdkConfiguration);
    }

    /**
     * Apply scanner effect to PDF
     * 
     * <p>Applies various effects to simulate a scanned document, including rotation, noise, and edge softening. Input:PDF Output:PDF Type:SISO
     * 
     * @return CompletableFuture&lt;ScannerEffectResponse&gt; - The async response
     */
    public CompletableFuture<ScannerEffectResponse> scannerEffectDirect() {
        return scannerEffect(null);
    }

    /**
     * Apply scanner effect to PDF
     * 
     * <p>Applies various effects to simulate a scanned document, including rotation, noise, and edge softening. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ScannerEffectResponse&gt; - The async response
     */
    public CompletableFuture<ScannerEffectResponse> scannerEffect(@Nullable ScannerEffectRequest request) {
        AsyncRequestOperation<ScannerEffectRequest, ScannerEffectResponse> operation
              = new ScannerEffect.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Replace-Invert Color PDF
     * 
     * <p>This endpoint accepts a PDF file and option of invert all colors or replace text and background colors. Input:PDF Output:PDF Type:SISO
     * 
     * @return The async call builder
     */
    public ReplaceAndInvertColorRequestBuilder replaceAndInvertColor() {
        return new ReplaceAndInvertColorRequestBuilder(sdkConfiguration);
    }

    /**
     * Replace-Invert Color PDF
     * 
     * <p>This endpoint accepts a PDF file and option of invert all colors or replace text and background colors. Input:PDF Output:PDF Type:SISO
     * 
     * @return CompletableFuture&lt;ReplaceAndInvertColorResponse&gt; - The async response
     */
    public CompletableFuture<ReplaceAndInvertColorResponse> replaceAndInvertColorDirect() {
        return replaceAndInvertColor(null);
    }

    /**
     * Replace-Invert Color PDF
     * 
     * <p>This endpoint accepts a PDF file and option of invert all colors or replace text and background colors. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ReplaceAndInvertColorResponse&gt; - The async response
     */
    public CompletableFuture<ReplaceAndInvertColorResponse> replaceAndInvertColor(@Nullable ReplaceAndInvertColorRequest request) {
        AsyncRequestOperation<ReplaceAndInvertColorRequest, ReplaceAndInvertColorResponse> operation
              = new ReplaceAndInvertColor.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Repair a PDF file
     * 
     * <p>This endpoint repairs a given PDF file by running Ghostscript (primary), qpdf (fallback), or PDFBox (if no external tools available). The PDF is first saved to a temporary location, repaired, read back, and then returned as a response. Input:PDF Output:PDF Type:SISO
     * 
     * @return The async call builder
     */
    public RepairPdfRequestBuilder repairPdf() {
        return new RepairPdfRequestBuilder(sdkConfiguration);
    }

    /**
     * Repair a PDF file
     * 
     * <p>This endpoint repairs a given PDF file by running Ghostscript (primary), qpdf (fallback), or PDFBox (if no external tools available). The PDF is first saved to a temporary location, repaired, read back, and then returned as a response. Input:PDF Output:PDF Type:SISO
     * 
     * @return CompletableFuture&lt;RepairPdfResponse&gt; - The async response
     */
    public CompletableFuture<RepairPdfResponse> repairPdfDirect() {
        return repairPdf(null);
    }

    /**
     * Repair a PDF file
     * 
     * <p>This endpoint repairs a given PDF file by running Ghostscript (primary), qpdf (fallback), or PDFBox (if no external tools available). The PDF is first saved to a temporary location, repaired, read back, and then returned as a response. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RepairPdfResponse&gt; - The async response
     */
    public CompletableFuture<RepairPdfResponse> repairPdf(@Nullable PDFFile request) {
        AsyncRequestOperation<PDFFile, RepairPdfResponse> operation
              = new RepairPdf.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove blank pages from a PDF file
     * 
     * <p>This endpoint removes blank pages from a given PDF file. Users can specify the threshold and white percentage to tune the detection of blank pages. Input:PDF Output:PDF Type:SISO
     * 
     * @return The async call builder
     */
    public RemoveBlankPagesRequestBuilder removeBlankPages() {
        return new RemoveBlankPagesRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove blank pages from a PDF file
     * 
     * <p>This endpoint removes blank pages from a given PDF file. Users can specify the threshold and white percentage to tune the detection of blank pages. Input:PDF Output:PDF Type:SISO
     * 
     * @return CompletableFuture&lt;RemoveBlankPagesResponse&gt; - The async response
     */
    public CompletableFuture<RemoveBlankPagesResponse> removeBlankPagesDirect() {
        return removeBlankPages(null);
    }

    /**
     * Remove blank pages from a PDF file
     * 
     * <p>This endpoint removes blank pages from a given PDF file. Users can specify the threshold and white percentage to tune the detection of blank pages. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveBlankPagesResponse&gt; - The async response
     */
    public CompletableFuture<RemoveBlankPagesResponse> removeBlankPages(@Nullable RemoveBlankPagesRequest request) {
        AsyncRequestOperation<RemoveBlankPagesRequest, RemoveBlankPagesResponse> operation
              = new RemoveBlankPages.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Process a PDF file with OCR
     * 
     * <p>This endpoint processes a PDF file using OCR (Optical Character Recognition). Users can specify languages, sidecar, deskew, clean, cleanFinal, ocrType, ocrRenderType, and removeImagesAfter options. Uses OCRmyPDF if available, falls back to Tesseract. Input:PDF Output:PDF Type:SI-Conditional
     * 
     * @return The async call builder
     */
    public ProcessPdfWithOCRRequestBuilder processPdfWithOCR() {
        return new ProcessPdfWithOCRRequestBuilder(sdkConfiguration);
    }

    /**
     * Process a PDF file with OCR
     * 
     * <p>This endpoint processes a PDF file using OCR (Optical Character Recognition). Users can specify languages, sidecar, deskew, clean, cleanFinal, ocrType, ocrRenderType, and removeImagesAfter options. Uses OCRmyPDF if available, falls back to Tesseract. Input:PDF Output:PDF Type:SI-Conditional
     * 
     * @return CompletableFuture&lt;ProcessPdfWithOCRResponse&gt; - The async response
     */
    public CompletableFuture<ProcessPdfWithOCRResponse> processPdfWithOCRDirect() {
        return processPdfWithOCR(null);
    }

    /**
     * Process a PDF file with OCR
     * 
     * <p>This endpoint processes a PDF file using OCR (Optical Character Recognition). Users can specify languages, sidecar, deskew, clean, cleanFinal, ocrType, ocrRenderType, and removeImagesAfter options. Uses OCRmyPDF if available, falls back to Tesseract. Input:PDF Output:PDF Type:SI-Conditional
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ProcessPdfWithOCRResponse&gt; - The async response
     */
    public CompletableFuture<ProcessPdfWithOCRResponse> processPdfWithOCR(@Nullable ProcessPdfWithOcrRequest request) {
        AsyncRequestOperation<ProcessPdfWithOcrRequest, ProcessPdfWithOCRResponse> operation
              = new ProcessPdfWithOCR.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Flatten PDF form fields or full page
     * 
     * <p>Flattening just PDF form fields or converting each page to images to make text unselectable. Input:PDF, Output:PDF. Type:SISO
     * 
     * @return The async call builder
     */
    public FlattenRequestBuilder flatten() {
        return new FlattenRequestBuilder(sdkConfiguration);
    }

    /**
     * Flatten PDF form fields or full page
     * 
     * <p>Flattening just PDF form fields or converting each page to images to make text unselectable. Input:PDF, Output:PDF. Type:SISO
     * 
     * @return CompletableFuture&lt;FlattenResponse&gt; - The async response
     */
    public CompletableFuture<FlattenResponse> flattenDirect() {
        return flatten(null);
    }

    /**
     * Flatten PDF form fields or full page
     * 
     * <p>Flattening just PDF form fields or converting each page to images to make text unselectable. Input:PDF, Output:PDF. Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FlattenResponse&gt; - The async response
     */
    public CompletableFuture<FlattenResponse> flatten(@Nullable FlattenRequest request) {
        AsyncRequestOperation<FlattenRequest, FlattenResponse> operation
              = new Flatten.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Extract images from a PDF file
     * 
     * <p>This endpoint extracts images from a given PDF file and returns them in a zip file. Users can specify the output image format. Input:PDF Output:IMAGE/ZIP Type:SIMO
     * 
     * @return The async call builder
     */
    public ExtractImagesRequestBuilder extractImages() {
        return new ExtractImagesRequestBuilder(sdkConfiguration);
    }

    /**
     * Extract images from a PDF file
     * 
     * <p>This endpoint extracts images from a given PDF file and returns them in a zip file. Users can specify the output image format. Input:PDF Output:IMAGE/ZIP Type:SIMO
     * 
     * @return CompletableFuture&lt;ExtractImagesResponse&gt; - The async response
     */
    public CompletableFuture<ExtractImagesResponse> extractImagesDirect() {
        return extractImages(null);
    }

    /**
     * Extract images from a PDF file
     * 
     * <p>This endpoint extracts images from a given PDF file and returns them in a zip file. Users can specify the output image format. Input:PDF Output:IMAGE/ZIP Type:SIMO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ExtractImagesResponse&gt; - The async response
     */
    public CompletableFuture<ExtractImagesResponse> extractImages(@Nullable PDFExtractImagesRequest request) {
        AsyncRequestOperation<PDFExtractImagesRequest, ExtractImagesResponse> operation
              = new ExtractImages.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Extract image scans from an input file
     * 
     * <p>This endpoint extracts image scans from a given file based on certain parameters. Users can specify angle threshold, tolerance, minimum area, minimum contour area, and border size. Input:PDF Output:IMAGE/ZIP Type:SIMO
     * 
     * @return The async call builder
     */
    public ExtractImageScansRequestBuilder extractImageScans() {
        return new ExtractImageScansRequestBuilder(sdkConfiguration);
    }

    /**
     * Extract image scans from an input file
     * 
     * <p>This endpoint extracts image scans from a given file based on certain parameters. Users can specify angle threshold, tolerance, minimum area, minimum contour area, and border size. Input:PDF Output:IMAGE/ZIP Type:SIMO
     * 
     * @return CompletableFuture&lt;ExtractImageScansResponse&gt; - The async response
     */
    public CompletableFuture<ExtractImageScansResponse> extractImageScansDirect() {
        return extractImageScans(null);
    }

    /**
     * Extract image scans from an input file
     * 
     * <p>This endpoint extracts image scans from a given file based on certain parameters. Users can specify angle threshold, tolerance, minimum area, minimum contour area, and border size. Input:PDF Output:IMAGE/ZIP Type:SIMO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ExtractImageScansResponse&gt; - The async response
     */
    public CompletableFuture<ExtractImageScansResponse> extractImageScans(@Nullable ExtractImageScansRequest request) {
        AsyncRequestOperation<ExtractImageScansRequest, ExtractImageScansResponse> operation
              = new ExtractImageScans.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Decompress PDF streams
     * 
     * <p>Fully decompresses all PDF streams including text content
     * 
     * @return The async call builder
     */
    public DecompressPdfRequestBuilder decompressPdf() {
        return new DecompressPdfRequestBuilder(sdkConfiguration);
    }

    /**
     * Decompress PDF streams
     * 
     * <p>Fully decompresses all PDF streams including text content
     * 
     * @return CompletableFuture&lt;DecompressPdfResponse&gt; - The async response
     */
    public CompletableFuture<DecompressPdfResponse> decompressPdfDirect() {
        return decompressPdf(null);
    }

    /**
     * Decompress PDF streams
     * 
     * <p>Fully decompresses all PDF streams including text content
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;DecompressPdfResponse&gt; - The async response
     */
    public CompletableFuture<DecompressPdfResponse> decompressPdf(@Nullable PDFFile request) {
        AsyncRequestOperation<PDFFile, DecompressPdfResponse> operation
              = new DecompressPdf.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Optimize PDF file
     * 
     * <p>This endpoint accepts a PDF file and optimizes it based on the provided parameters. Input:PDF Output:PDF Type:SISO
     * 
     * @return The async call builder
     */
    public OptimizePdfRequestBuilder optimizePdf() {
        return new OptimizePdfRequestBuilder(sdkConfiguration);
    }

    /**
     * Optimize PDF file
     * 
     * <p>This endpoint accepts a PDF file and optimizes it based on the provided parameters. Input:PDF Output:PDF Type:SISO
     * 
     * @return CompletableFuture&lt;OptimizePdfResponse&gt; - The async response
     */
    public CompletableFuture<OptimizePdfResponse> optimizePdfDirect() {
        return optimizePdf(null);
    }

    /**
     * Optimize PDF file
     * 
     * <p>This endpoint accepts a PDF file and optimizes it based on the provided parameters. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;OptimizePdfResponse&gt; - The async response
     */
    public CompletableFuture<OptimizePdfResponse> optimizePdf(@Nullable OptimizePdfRequest request) {
        AsyncRequestOperation<OptimizePdfRequest, OptimizePdfResponse> operation
              = new OptimizePdf.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Auto split PDF pages into separate documents
     * 
     * <p>This endpoint accepts a PDF file, scans each page for a specific QR code, and splits the document at the QR code boundaries. The output is a zip file containing each separate PDF document. Input:PDF Output:ZIP-PDF Type:SISO
     * 
     * @return The async call builder
     */
    public AutoSplitPdfRequestBuilder autoSplitPdf() {
        return new AutoSplitPdfRequestBuilder(sdkConfiguration);
    }

    /**
     * Auto split PDF pages into separate documents
     * 
     * <p>This endpoint accepts a PDF file, scans each page for a specific QR code, and splits the document at the QR code boundaries. The output is a zip file containing each separate PDF document. Input:PDF Output:ZIP-PDF Type:SISO
     * 
     * @return CompletableFuture&lt;AutoSplitPdfResponse&gt; - The async response
     */
    public CompletableFuture<AutoSplitPdfResponse> autoSplitPdfDirect() {
        return autoSplitPdf(null);
    }

    /**
     * Auto split PDF pages into separate documents
     * 
     * <p>This endpoint accepts a PDF file, scans each page for a specific QR code, and splits the document at the QR code boundaries. The output is a zip file containing each separate PDF document. Input:PDF Output:ZIP-PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AutoSplitPdfResponse&gt; - The async response
     */
    public CompletableFuture<AutoSplitPdfResponse> autoSplitPdf(@Nullable AutoSplitPdfRequest request) {
        AsyncRequestOperation<AutoSplitPdfRequest, AutoSplitPdfResponse> operation
              = new AutoSplitPdf.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Extract header from PDF file
     * 
     * <p>This endpoint accepts a PDF file and attempts to extract its title or header based on heuristics. Input:PDF Output:PDF Type:SISO
     * 
     * @return The async call builder
     */
    public ExtractHeader1RequestBuilder extractHeader1() {
        return new ExtractHeader1RequestBuilder(sdkConfiguration);
    }

    /**
     * Extract header from PDF file
     * 
     * <p>This endpoint accepts a PDF file and attempts to extract its title or header based on heuristics. Input:PDF Output:PDF Type:SISO
     * 
     * @return CompletableFuture&lt;ExtractHeader1Response&gt; - The async response
     */
    public CompletableFuture<ExtractHeader1Response> extractHeader1Direct() {
        return extractHeader1(null);
    }

    /**
     * Extract header from PDF file
     * 
     * <p>This endpoint accepts a PDF file and attempts to extract its title or header based on heuristics. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ExtractHeader1Response&gt; - The async response
     */
    public CompletableFuture<ExtractHeader1Response> extractHeader1(@Nullable ExtractHeaderRequest request) {
        AsyncRequestOperation<ExtractHeaderRequest, ExtractHeader1Response> operation
              = new ExtractHeader1.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Add stamp to a PDF file
     * 
     * <p>This endpoint adds a stamp to a given PDF file. Users can specify the stamp type (text or image), rotation, opacity, width spacer, and height spacer. Input:PDF Output:PDF Type:SISO
     * 
     * @return The async call builder
     */
    public AddStampRequestBuilder addStamp() {
        return new AddStampRequestBuilder(sdkConfiguration);
    }

    /**
     * Add stamp to a PDF file
     * 
     * <p>This endpoint adds a stamp to a given PDF file. Users can specify the stamp type (text or image), rotation, opacity, width spacer, and height spacer. Input:PDF Output:PDF Type:SISO
     * 
     * @return CompletableFuture&lt;AddStampResponse&gt; - The async response
     */
    public CompletableFuture<AddStampResponse> addStampDirect() {
        return addStamp(null);
    }

    /**
     * Add stamp to a PDF file
     * 
     * <p>This endpoint adds a stamp to a given PDF file. Users can specify the stamp type (text or image), rotation, opacity, width spacer, and height spacer. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AddStampResponse&gt; - The async response
     */
    public CompletableFuture<AddStampResponse> addStamp(@Nullable AddStampRequest request) {
        AsyncRequestOperation<AddStampRequest, AddStampResponse> operation
              = new AddStamp.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Add page numbers to a PDF document
     * 
     * <p>This operation takes an input PDF file and adds page numbers to it. Input:PDF Output:PDF Type:SISO
     * 
     * @return The async call builder
     */
    public AddPageNumbersRequestBuilder addPageNumbers() {
        return new AddPageNumbersRequestBuilder(sdkConfiguration);
    }

    /**
     * Add page numbers to a PDF document
     * 
     * <p>This operation takes an input PDF file and adds page numbers to it. Input:PDF Output:PDF Type:SISO
     * 
     * @return CompletableFuture&lt;AddPageNumbersResponse&gt; - The async response
     */
    public CompletableFuture<AddPageNumbersResponse> addPageNumbersDirect() {
        return addPageNumbers(null);
    }

    /**
     * Add page numbers to a PDF document
     * 
     * <p>This operation takes an input PDF file and adds page numbers to it. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AddPageNumbersResponse&gt; - The async response
     */
    public CompletableFuture<AddPageNumbersResponse> addPageNumbers(@Nullable AddPageNumbersRequest request) {
        AsyncRequestOperation<AddPageNumbersRequest, AddPageNumbersResponse> operation
              = new AddPageNumbers.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Overlay image onto a PDF file
     * 
     * <p>This endpoint overlays an image onto a PDF file at the specified coordinates. The image can be overlaid on every page of the PDF if specified.  Input:PDF/IMAGE Output:PDF Type:SISO
     * 
     * @return The async call builder
     */
    public OverlayImageRequestBuilder overlayImage() {
        return new OverlayImageRequestBuilder(sdkConfiguration);
    }

    /**
     * Overlay image onto a PDF file
     * 
     * <p>This endpoint overlays an image onto a PDF file at the specified coordinates. The image can be overlaid on every page of the PDF if specified.  Input:PDF/IMAGE Output:PDF Type:SISO
     * 
     * @return CompletableFuture&lt;OverlayImageResponse&gt; - The async response
     */
    public CompletableFuture<OverlayImageResponse> overlayImageDirect() {
        return overlayImage(null);
    }

    /**
     * Overlay image onto a PDF file
     * 
     * <p>This endpoint overlays an image onto a PDF file at the specified coordinates. The image can be overlaid on every page of the PDF if specified.  Input:PDF/IMAGE Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;OverlayImageResponse&gt; - The async response
     */
    public CompletableFuture<OverlayImageResponse> overlayImage(@Nullable OverlayImageRequest request) {
        AsyncRequestOperation<OverlayImageRequest, OverlayImageResponse> operation
              = new OverlayImage.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Add attachments to PDF
     * 
     * <p>This endpoint adds attachments to a PDF. Input:PDF, Output:PDF Type:MISO
     * 
     * @return The async call builder
     */
    public AddAttachmentsRequestBuilder addAttachments() {
        return new AddAttachmentsRequestBuilder(sdkConfiguration);
    }

    /**
     * Add attachments to PDF
     * 
     * <p>This endpoint adds attachments to a PDF. Input:PDF, Output:PDF Type:MISO
     * 
     * @return CompletableFuture&lt;AddAttachmentsResponse&gt; - The async response
     */
    public CompletableFuture<AddAttachmentsResponse> addAttachmentsDirect() {
        return addAttachments(null);
    }

    /**
     * Add attachments to PDF
     * 
     * <p>This endpoint adds attachments to a PDF. Input:PDF, Output:PDF Type:MISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AddAttachmentsResponse&gt; - The async response
     */
    public CompletableFuture<AddAttachmentsResponse> addAttachments(@Nullable AddAttachmentRequest request) {
        AsyncRequestOperation<AddAttachmentRequest, AddAttachmentsResponse> operation
              = new AddAttachments.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
