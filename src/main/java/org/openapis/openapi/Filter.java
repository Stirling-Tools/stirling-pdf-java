/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi;

import static org.openapis.openapi.operations.Operations.RequestOperation;

import jakarta.annotation.Nullable;
import java.lang.Exception;
import org.openapis.openapi.models.components.ContainsTextRequest;
import org.openapis.openapi.models.components.FileSizeRequest;
import org.openapis.openapi.models.components.PDFComparisonAndCount;
import org.openapis.openapi.models.components.PDFWithPageNums;
import org.openapis.openapi.models.components.PageRotationRequest;
import org.openapis.openapi.models.components.PageSizeRequest;
import org.openapis.openapi.models.operations.ContainsImageRequestBuilder;
import org.openapis.openapi.models.operations.ContainsImageResponse;
import org.openapis.openapi.models.operations.ContainsTextRequestBuilder;
import org.openapis.openapi.models.operations.ContainsTextResponse;
import org.openapis.openapi.models.operations.FileSizeRequestBuilder;
import org.openapis.openapi.models.operations.FileSizeResponse;
import org.openapis.openapi.models.operations.PageCountRequestBuilder;
import org.openapis.openapi.models.operations.PageCountResponse;
import org.openapis.openapi.models.operations.PageRotationRequestBuilder;
import org.openapis.openapi.models.operations.PageRotationResponse;
import org.openapis.openapi.models.operations.PageSizeRequestBuilder;
import org.openapis.openapi.models.operations.PageSizeResponse;
import org.openapis.openapi.operations.ContainsImage;
import org.openapis.openapi.operations.ContainsText;
import org.openapis.openapi.operations.FileSize;
import org.openapis.openapi.operations.PageCount;
import org.openapis.openapi.operations.PageRotation;
import org.openapis.openapi.operations.PageSize;
import org.openapis.openapi.utils.Headers;

/**
 * Document content filtering and search operations for information discovery and organization.
 * 
 * <p>This endpoint group enables intelligent content discovery and organization within
 * document collections for content-based processing and information extraction.
 * 
 * <p>Common use cases:
 * • Legal discovery, research organization, and compliance auditing
 * • Content moderation, academic research, and business intelligence
 * • Quality assurance and content validation workflows
 * 
 * <p>Business applications:
 * • Contract analysis, financial review, and healthcare records organization
 * • Government processing, educational curation, and IP protection
 * 
 * <p>Workflow scenarios:
 * • Large-scale processing, automated classification, and information extraction
 * • Document preparation for further processing or analysis
 * 
 * <p>Target users: Legal professionals, researchers, compliance officers, and
 * organizations requiring intelligent document content discovery and organization.
 */
public class Filter {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncFilter asyncSDK;

    Filter(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncFilter(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncFilter async() {
        return asyncSDK;
    }

    /**
     * Checks if a PDF is of a certain size
     * 
     * <p>Input:PDF Output:Boolean Type:SISO
     * 
     * @return The call builder
     */
    public PageSizeRequestBuilder pageSize() {
        return new PageSizeRequestBuilder(sdkConfiguration);
    }

    /**
     * Checks if a PDF is of a certain size
     * 
     * <p>Input:PDF Output:Boolean Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PageSizeResponse pageSizeDirect() throws Exception {
        return pageSize(null);
    }

    /**
     * Checks if a PDF is of a certain size
     * 
     * <p>Input:PDF Output:Boolean Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PageSizeResponse pageSize(@Nullable PageSizeRequest request) throws Exception {
        RequestOperation<PageSizeRequest, PageSizeResponse> operation
              = new PageSize.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Checks if a PDF is of a certain rotation
     * 
     * <p>Input:PDF Output:Boolean Type:SISO
     * 
     * @return The call builder
     */
    public PageRotationRequestBuilder pageRotation() {
        return new PageRotationRequestBuilder(sdkConfiguration);
    }

    /**
     * Checks if a PDF is of a certain rotation
     * 
     * <p>Input:PDF Output:Boolean Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PageRotationResponse pageRotationDirect() throws Exception {
        return pageRotation(null);
    }

    /**
     * Checks if a PDF is of a certain rotation
     * 
     * <p>Input:PDF Output:Boolean Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PageRotationResponse pageRotation(@Nullable PageRotationRequest request) throws Exception {
        RequestOperation<PageRotationRequest, PageRotationResponse> operation
              = new PageRotation.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Checks if a PDF is greater, less or equal to a setPageCount
     * 
     * <p>Input:PDF Output:Boolean Type:SISO
     * 
     * @return The call builder
     */
    public PageCountRequestBuilder pageCount() {
        return new PageCountRequestBuilder(sdkConfiguration);
    }

    /**
     * Checks if a PDF is greater, less or equal to a setPageCount
     * 
     * <p>Input:PDF Output:Boolean Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PageCountResponse pageCountDirect() throws Exception {
        return pageCount(null);
    }

    /**
     * Checks if a PDF is greater, less or equal to a setPageCount
     * 
     * <p>Input:PDF Output:Boolean Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PageCountResponse pageCount(@Nullable PDFComparisonAndCount request) throws Exception {
        RequestOperation<PDFComparisonAndCount, PageCountResponse> operation
              = new PageCount.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Checks if a PDF is a set file size
     * 
     * <p>Input:PDF Output:Boolean Type:SISO
     * 
     * @return The call builder
     */
    public FileSizeRequestBuilder fileSize() {
        return new FileSizeRequestBuilder(sdkConfiguration);
    }

    /**
     * Checks if a PDF is a set file size
     * 
     * <p>Input:PDF Output:Boolean Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileSizeResponse fileSizeDirect() throws Exception {
        return fileSize(null);
    }

    /**
     * Checks if a PDF is a set file size
     * 
     * <p>Input:PDF Output:Boolean Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileSizeResponse fileSize(@Nullable FileSizeRequest request) throws Exception {
        RequestOperation<FileSizeRequest, FileSizeResponse> operation
              = new FileSize.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Checks if a PDF contains set text, returns true if does
     * 
     * <p>Input:PDF Output:Boolean Type:SISO
     * 
     * @return The call builder
     */
    public ContainsTextRequestBuilder containsText() {
        return new ContainsTextRequestBuilder(sdkConfiguration);
    }

    /**
     * Checks if a PDF contains set text, returns true if does
     * 
     * <p>Input:PDF Output:Boolean Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ContainsTextResponse containsTextDirect() throws Exception {
        return containsText(null);
    }

    /**
     * Checks if a PDF contains set text, returns true if does
     * 
     * <p>Input:PDF Output:Boolean Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ContainsTextResponse containsText(@Nullable ContainsTextRequest request) throws Exception {
        RequestOperation<ContainsTextRequest, ContainsTextResponse> operation
              = new ContainsText.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Checks if a PDF contains an image
     * 
     * <p>Input:PDF Output:Boolean Type:SISO
     * 
     * @return The call builder
     */
    public ContainsImageRequestBuilder containsImage() {
        return new ContainsImageRequestBuilder(sdkConfiguration);
    }

    /**
     * Checks if a PDF contains an image
     * 
     * <p>Input:PDF Output:Boolean Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ContainsImageResponse containsImageDirect() throws Exception {
        return containsImage(null);
    }

    /**
     * Checks if a PDF contains an image
     * 
     * <p>Input:PDF Output:Boolean Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ContainsImageResponse containsImage(@Nullable PDFWithPageNums request) throws Exception {
        RequestOperation<PDFWithPageNums, ContainsImageResponse> operation
              = new ContainsImage.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
