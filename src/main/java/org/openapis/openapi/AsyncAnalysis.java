/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi;

import static org.openapis.openapi.operations.Operations.AsyncRequestOperation;

import jakarta.annotation.Nullable;
import java.util.concurrent.CompletableFuture;
import org.openapis.openapi.models.components.PDFFile;
import org.openapis.openapi.models.operations.async.GetAnnotationInfoRequestBuilder;
import org.openapis.openapi.models.operations.async.GetAnnotationInfoResponse;
import org.openapis.openapi.models.operations.async.GetBasicInfoRequestBuilder;
import org.openapis.openapi.models.operations.async.GetBasicInfoResponse;
import org.openapis.openapi.models.operations.async.GetDocumentPropertiesRequestBuilder;
import org.openapis.openapi.models.operations.async.GetDocumentPropertiesResponse;
import org.openapis.openapi.models.operations.async.GetFontInfoRequestBuilder;
import org.openapis.openapi.models.operations.async.GetFontInfoResponse;
import org.openapis.openapi.models.operations.async.GetFormFieldsRequestBuilder;
import org.openapis.openapi.models.operations.async.GetFormFieldsResponse;
import org.openapis.openapi.models.operations.async.GetPageCountRequestBuilder;
import org.openapis.openapi.models.operations.async.GetPageCountResponse;
import org.openapis.openapi.models.operations.async.GetPageDimensionsRequestBuilder;
import org.openapis.openapi.models.operations.async.GetPageDimensionsResponse;
import org.openapis.openapi.models.operations.async.GetSecurityInfoRequestBuilder;
import org.openapis.openapi.models.operations.async.GetSecurityInfoResponse;
import org.openapis.openapi.operations.GetAnnotationInfo;
import org.openapis.openapi.operations.GetBasicInfo;
import org.openapis.openapi.operations.GetDocumentProperties;
import org.openapis.openapi.operations.GetFontInfo;
import org.openapis.openapi.operations.GetFormFields;
import org.openapis.openapi.operations.GetPageCount;
import org.openapis.openapi.operations.GetPageDimensions;
import org.openapis.openapi.operations.GetSecurityInfo;
import org.openapis.openapi.utils.Headers;

/**
 * Document analysis and information extraction services for content intelligence and insights.
 * 
 * <p>This endpoint group provides analytical capabilities to understand document structure,
 * extract information, and generate insights from PDF content for automated processing.
 * 
 * <p>Common use cases:
 * • Document inventory management and content audit for compliance verification
 * • Quality assurance workflows and business intelligence analytics
 * • Migration planning, accessibility evaluation, and document forensics
 * 
 * <p>Business applications:
 * • Legal discovery, financial document review, and healthcare records analysis
 * • Academic research, government processing, and publishing optimization
 * 
 * <p>Operational scenarios:
 * • Large-scale profiling, migration assessment, and performance optimization
 * • Automated quality control and content strategy development
 * 
 * <p>Target users: Data analysts, QA teams, administrators, and business intelligence
 * professionals requiring detailed document insights.
 */
public class AsyncAnalysis {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Analysis syncSDK;

    AsyncAnalysis(Analysis syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Analysis sync() {
        return syncSDK;
    }


    /**
     * Get security information
     * 
     * <p>Returns encryption and permission details. Input:PDF Output:JSON Type:SISO
     * 
     * @return The async call builder
     */
    public GetSecurityInfoRequestBuilder getSecurityInfo() {
        return new GetSecurityInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * Get security information
     * 
     * <p>Returns encryption and permission details. Input:PDF Output:JSON Type:SISO
     * 
     * @return CompletableFuture&lt;GetSecurityInfoResponse&gt; - The async response
     */
    public CompletableFuture<GetSecurityInfoResponse> getSecurityInfoDirect() {
        return getSecurityInfo(null);
    }

    /**
     * Get security information
     * 
     * <p>Returns encryption and permission details. Input:PDF Output:JSON Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetSecurityInfoResponse&gt; - The async response
     */
    public CompletableFuture<GetSecurityInfoResponse> getSecurityInfo(@Nullable PDFFile request) {
        AsyncRequestOperation<PDFFile, GetSecurityInfoResponse> operation
              = new GetSecurityInfo.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get page dimensions for all pages
     * 
     * <p>Returns width and height of each page. Input:PDF Output:JSON Type:SISO
     * 
     * @return The async call builder
     */
    public GetPageDimensionsRequestBuilder getPageDimensions() {
        return new GetPageDimensionsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get page dimensions for all pages
     * 
     * <p>Returns width and height of each page. Input:PDF Output:JSON Type:SISO
     * 
     * @return CompletableFuture&lt;GetPageDimensionsResponse&gt; - The async response
     */
    public CompletableFuture<GetPageDimensionsResponse> getPageDimensionsDirect() {
        return getPageDimensions(null);
    }

    /**
     * Get page dimensions for all pages
     * 
     * <p>Returns width and height of each page. Input:PDF Output:JSON Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetPageDimensionsResponse&gt; - The async response
     */
    public CompletableFuture<GetPageDimensionsResponse> getPageDimensions(@Nullable PDFFile request) {
        AsyncRequestOperation<PDFFile, GetPageDimensionsResponse> operation
              = new GetPageDimensions.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get PDF page count
     * 
     * <p>Returns total number of pages in PDF. Input:PDF Output:JSON Type:SISO
     * 
     * @return The async call builder
     */
    public GetPageCountRequestBuilder getPageCount() {
        return new GetPageCountRequestBuilder(sdkConfiguration);
    }

    /**
     * Get PDF page count
     * 
     * <p>Returns total number of pages in PDF. Input:PDF Output:JSON Type:SISO
     * 
     * @return CompletableFuture&lt;GetPageCountResponse&gt; - The async response
     */
    public CompletableFuture<GetPageCountResponse> getPageCountDirect() {
        return getPageCount(null);
    }

    /**
     * Get PDF page count
     * 
     * <p>Returns total number of pages in PDF. Input:PDF Output:JSON Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetPageCountResponse&gt; - The async response
     */
    public CompletableFuture<GetPageCountResponse> getPageCount(@Nullable PDFFile request) {
        AsyncRequestOperation<PDFFile, GetPageCountResponse> operation
              = new GetPageCount.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get form field information
     * 
     * <p>Returns count and details of form fields. Input:PDF Output:JSON Type:SISO
     * 
     * @return The async call builder
     */
    public GetFormFieldsRequestBuilder getFormFields() {
        return new GetFormFieldsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get form field information
     * 
     * <p>Returns count and details of form fields. Input:PDF Output:JSON Type:SISO
     * 
     * @return CompletableFuture&lt;GetFormFieldsResponse&gt; - The async response
     */
    public CompletableFuture<GetFormFieldsResponse> getFormFieldsDirect() {
        return getFormFields(null);
    }

    /**
     * Get form field information
     * 
     * <p>Returns count and details of form fields. Input:PDF Output:JSON Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetFormFieldsResponse&gt; - The async response
     */
    public CompletableFuture<GetFormFieldsResponse> getFormFields(@Nullable PDFFile request) {
        AsyncRequestOperation<PDFFile, GetFormFieldsResponse> operation
              = new GetFormFields.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get font information
     * 
     * <p>Returns list of fonts used in the document. Input:PDF Output:JSON Type:SISO
     * 
     * @return The async call builder
     */
    public GetFontInfoRequestBuilder getFontInfo() {
        return new GetFontInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * Get font information
     * 
     * <p>Returns list of fonts used in the document. Input:PDF Output:JSON Type:SISO
     * 
     * @return CompletableFuture&lt;GetFontInfoResponse&gt; - The async response
     */
    public CompletableFuture<GetFontInfoResponse> getFontInfoDirect() {
        return getFontInfo(null);
    }

    /**
     * Get font information
     * 
     * <p>Returns list of fonts used in the document. Input:PDF Output:JSON Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetFontInfoResponse&gt; - The async response
     */
    public CompletableFuture<GetFontInfoResponse> getFontInfo(@Nullable PDFFile request) {
        AsyncRequestOperation<PDFFile, GetFontInfoResponse> operation
              = new GetFontInfo.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get PDF document properties
     * 
     * <p>Returns title, author, subject, etc. Input:PDF Output:JSON Type:SISO
     * 
     * @return The async call builder
     */
    public GetDocumentPropertiesRequestBuilder getDocumentProperties() {
        return new GetDocumentPropertiesRequestBuilder(sdkConfiguration);
    }

    /**
     * Get PDF document properties
     * 
     * <p>Returns title, author, subject, etc. Input:PDF Output:JSON Type:SISO
     * 
     * @return CompletableFuture&lt;GetDocumentPropertiesResponse&gt; - The async response
     */
    public CompletableFuture<GetDocumentPropertiesResponse> getDocumentPropertiesDirect() {
        return getDocumentProperties(null);
    }

    /**
     * Get PDF document properties
     * 
     * <p>Returns title, author, subject, etc. Input:PDF Output:JSON Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetDocumentPropertiesResponse&gt; - The async response
     */
    public CompletableFuture<GetDocumentPropertiesResponse> getDocumentProperties(@Nullable PDFFile request) {
        AsyncRequestOperation<PDFFile, GetDocumentPropertiesResponse> operation
              = new GetDocumentProperties.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get basic PDF information
     * 
     * <p>Returns page count, version, file size. Input:PDF Output:JSON Type:SISO
     * 
     * @return The async call builder
     */
    public GetBasicInfoRequestBuilder getBasicInfo() {
        return new GetBasicInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * Get basic PDF information
     * 
     * <p>Returns page count, version, file size. Input:PDF Output:JSON Type:SISO
     * 
     * @return CompletableFuture&lt;GetBasicInfoResponse&gt; - The async response
     */
    public CompletableFuture<GetBasicInfoResponse> getBasicInfoDirect() {
        return getBasicInfo(null);
    }

    /**
     * Get basic PDF information
     * 
     * <p>Returns page count, version, file size. Input:PDF Output:JSON Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetBasicInfoResponse&gt; - The async response
     */
    public CompletableFuture<GetBasicInfoResponse> getBasicInfo(@Nullable PDFFile request) {
        AsyncRequestOperation<PDFFile, GetBasicInfoResponse> operation
              = new GetBasicInfo.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get annotation information
     * 
     * <p>Returns count and types of annotations. Input:PDF Output:JSON Type:SISO
     * 
     * @return The async call builder
     */
    public GetAnnotationInfoRequestBuilder getAnnotationInfo() {
        return new GetAnnotationInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * Get annotation information
     * 
     * <p>Returns count and types of annotations. Input:PDF Output:JSON Type:SISO
     * 
     * @return CompletableFuture&lt;GetAnnotationInfoResponse&gt; - The async response
     */
    public CompletableFuture<GetAnnotationInfoResponse> getAnnotationInfoDirect() {
        return getAnnotationInfo(null);
    }

    /**
     * Get annotation information
     * 
     * <p>Returns count and types of annotations. Input:PDF Output:JSON Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAnnotationInfoResponse&gt; - The async response
     */
    public CompletableFuture<GetAnnotationInfoResponse> getAnnotationInfo(@Nullable PDFFile request) {
        AsyncRequestOperation<PDFFile, GetAnnotationInfoResponse> operation
              = new GetAnnotationInfo.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
