/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi;

import static org.openapis.openapi.operations.Operations.AsyncRequestOperation;

import jakarta.annotation.Nullable;
import java.util.concurrent.CompletableFuture;
import org.openapis.openapi.models.components.AddPasswordRequest;
import org.openapis.openapi.models.components.AddWatermarkRequest;
import org.openapis.openapi.models.components.ManualRedactPdfRequest;
import org.openapis.openapi.models.components.PDFFile;
import org.openapis.openapi.models.components.PDFPasswordRequest;
import org.openapis.openapi.models.components.RedactPdfRequest;
import org.openapis.openapi.models.components.SanitizePdfRequest;
import org.openapis.openapi.models.components.SignPDFWithCertRequest;
import org.openapis.openapi.models.components.SignatureValidationRequest;
import org.openapis.openapi.models.operations.async.AddPasswordRequestBuilder;
import org.openapis.openapi.models.operations.async.AddPasswordResponse;
import org.openapis.openapi.models.operations.async.AddWatermarkRequestBuilder;
import org.openapis.openapi.models.operations.async.AddWatermarkResponse;
import org.openapis.openapi.models.operations.async.GetPdfInfoRequestBuilder;
import org.openapis.openapi.models.operations.async.GetPdfInfoResponse;
import org.openapis.openapi.models.operations.async.RedactPdfAutoRequestBuilder;
import org.openapis.openapi.models.operations.async.RedactPdfAutoResponse;
import org.openapis.openapi.models.operations.async.RedactPdfManualRequestBuilder;
import org.openapis.openapi.models.operations.async.RedactPdfManualResponse;
import org.openapis.openapi.models.operations.async.RemoveCertSignPDFRequestBuilder;
import org.openapis.openapi.models.operations.async.RemoveCertSignPDFResponse;
import org.openapis.openapi.models.operations.async.RemovePasswordRequestBuilder;
import org.openapis.openapi.models.operations.async.RemovePasswordResponse;
import org.openapis.openapi.models.operations.async.SanitizePDFRequestBuilder;
import org.openapis.openapi.models.operations.async.SanitizePDFResponse;
import org.openapis.openapi.models.operations.async.SignPDFWithCertRequestBuilder;
import org.openapis.openapi.models.operations.async.SignPDFWithCertResponse;
import org.openapis.openapi.models.operations.async.ValidateSignatureRequestBuilder;
import org.openapis.openapi.models.operations.async.ValidateSignatureResponse;
import org.openapis.openapi.operations.AddPassword;
import org.openapis.openapi.operations.AddWatermark;
import org.openapis.openapi.operations.GetPdfInfo;
import org.openapis.openapi.operations.RedactPdfAuto;
import org.openapis.openapi.operations.RedactPdfManual;
import org.openapis.openapi.operations.RemoveCertSignPDF;
import org.openapis.openapi.operations.RemovePassword;
import org.openapis.openapi.operations.SanitizePDF;
import org.openapis.openapi.operations.SignPDFWithCert;
import org.openapis.openapi.operations.ValidateSignature;
import org.openapis.openapi.utils.Headers;

/**
 * Document security and protection services for confidential and sensitive content.
 * 
 * <p>This endpoint group provides essential security operations for organizations handling
 * sensitive documents and materials requiring controlled access.
 * 
 * <p>Common use cases:
 * • Legal confidentiality, healthcare privacy (HIPAA), and financial regulatory compliance
 * • Government classified handling, corporate IP protection, and educational privacy (FERPA)
 * • Contract security for business transactions
 * 
 * <p>Business applications:
 * • Document authentication, confidential sharing, and secure archiving
 * • Content watermarking, access control, and privacy protection through redaction
 * 
 * <p>Industry scenarios:
 * • Legal discovery, medical records exchange, financial audit documentation
 * • Enterprise policy enforcement and data governance
 * 
 * <p>Target users: Legal professionals, healthcare administrators, compliance officers,
 * government agencies, and enterprises handling sensitive content.
 */
public class AsyncSecurity {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Security syncSDK;

    AsyncSecurity(Security syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Security sync() {
        return syncSDK;
    }


    /**
     * Validate PDF Digital Signature
     * 
     * <p>Validates the digital signatures in a PDF file against default or custom certificates. Input:PDF Output:JSON Type:SISO
     * 
     * @return The async call builder
     */
    public ValidateSignatureRequestBuilder validateSignature() {
        return new ValidateSignatureRequestBuilder(sdkConfiguration);
    }

    /**
     * Validate PDF Digital Signature
     * 
     * <p>Validates the digital signatures in a PDF file against default or custom certificates. Input:PDF Output:JSON Type:SISO
     * 
     * @return CompletableFuture&lt;ValidateSignatureResponse&gt; - The async response
     */
    public CompletableFuture<ValidateSignatureResponse> validateSignatureDirect() {
        return validateSignature(null);
    }

    /**
     * Validate PDF Digital Signature
     * 
     * <p>Validates the digital signatures in a PDF file against default or custom certificates. Input:PDF Output:JSON Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ValidateSignatureResponse&gt; - The async response
     */
    public CompletableFuture<ValidateSignatureResponse> validateSignature(@Nullable SignatureValidationRequest request) {
        AsyncRequestOperation<SignatureValidationRequest, ValidateSignatureResponse> operation
              = new ValidateSignature.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Sanitize a PDF file
     * 
     * <p>This endpoint processes a PDF file and removes specific elements based on the provided options. Input:PDF Output:PDF Type:SISO
     * 
     * @return The async call builder
     */
    public SanitizePDFRequestBuilder sanitizePDF() {
        return new SanitizePDFRequestBuilder(sdkConfiguration);
    }

    /**
     * Sanitize a PDF file
     * 
     * <p>This endpoint processes a PDF file and removes specific elements based on the provided options. Input:PDF Output:PDF Type:SISO
     * 
     * @return CompletableFuture&lt;SanitizePDFResponse&gt; - The async response
     */
    public CompletableFuture<SanitizePDFResponse> sanitizePDFDirect() {
        return sanitizePDF(null);
    }

    /**
     * Sanitize a PDF file
     * 
     * <p>This endpoint processes a PDF file and removes specific elements based on the provided options. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;SanitizePDFResponse&gt; - The async response
     */
    public CompletableFuture<SanitizePDFResponse> sanitizePDF(@Nullable SanitizePdfRequest request) {
        AsyncRequestOperation<SanitizePdfRequest, SanitizePDFResponse> operation
              = new SanitizePDF.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove password from a PDF file
     * 
     * <p>This endpoint removes the password from a protected PDF file. Users need to provide the existing password. Input:PDF Output:PDF Type:SISO
     * 
     * @return The async call builder
     */
    public RemovePasswordRequestBuilder removePassword() {
        return new RemovePasswordRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove password from a PDF file
     * 
     * <p>This endpoint removes the password from a protected PDF file. Users need to provide the existing password. Input:PDF Output:PDF Type:SISO
     * 
     * @return CompletableFuture&lt;RemovePasswordResponse&gt; - The async response
     */
    public CompletableFuture<RemovePasswordResponse> removePasswordDirect() {
        return removePassword(null);
    }

    /**
     * Remove password from a PDF file
     * 
     * <p>This endpoint removes the password from a protected PDF file. Users need to provide the existing password. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemovePasswordResponse&gt; - The async response
     */
    public CompletableFuture<RemovePasswordResponse> removePassword(@Nullable PDFPasswordRequest request) {
        AsyncRequestOperation<PDFPasswordRequest, RemovePasswordResponse> operation
              = new RemovePassword.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove digital signature from PDF
     * 
     * <p>This endpoint accepts a PDF file and returns the PDF file without the digital signature. Input:PDF, Output:PDF Type:SISO
     * 
     * @return The async call builder
     */
    public RemoveCertSignPDFRequestBuilder removeCertSignPDF() {
        return new RemoveCertSignPDFRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove digital signature from PDF
     * 
     * <p>This endpoint accepts a PDF file and returns the PDF file without the digital signature. Input:PDF, Output:PDF Type:SISO
     * 
     * @return CompletableFuture&lt;RemoveCertSignPDFResponse&gt; - The async response
     */
    public CompletableFuture<RemoveCertSignPDFResponse> removeCertSignPDFDirect() {
        return removeCertSignPDF(null);
    }

    /**
     * Remove digital signature from PDF
     * 
     * <p>This endpoint accepts a PDF file and returns the PDF file without the digital signature. Input:PDF, Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveCertSignPDFResponse&gt; - The async response
     */
    public CompletableFuture<RemoveCertSignPDFResponse> removeCertSignPDF(@Nullable PDFFile request) {
        AsyncRequestOperation<PDFFile, RemoveCertSignPDFResponse> operation
              = new RemoveCertSignPDF.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Redacts areas and pages in a PDF document
     * 
     * <p>This operation takes an input PDF file with a list of areas, page number(s)/range(s)/function(s) to redact. Input:PDF, Output:PDF, Type:SISO
     * 
     * @return The async call builder
     */
    public RedactPdfManualRequestBuilder redactPdfManual() {
        return new RedactPdfManualRequestBuilder(sdkConfiguration);
    }

    /**
     * Redacts areas and pages in a PDF document
     * 
     * <p>This operation takes an input PDF file with a list of areas, page number(s)/range(s)/function(s) to redact. Input:PDF, Output:PDF, Type:SISO
     * 
     * @return CompletableFuture&lt;RedactPdfManualResponse&gt; - The async response
     */
    public CompletableFuture<RedactPdfManualResponse> redactPdfManualDirect() {
        return redactPdfManual(null);
    }

    /**
     * Redacts areas and pages in a PDF document
     * 
     * <p>This operation takes an input PDF file with a list of areas, page number(s)/range(s)/function(s) to redact. Input:PDF, Output:PDF, Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RedactPdfManualResponse&gt; - The async response
     */
    public CompletableFuture<RedactPdfManualResponse> redactPdfManual(@Nullable ManualRedactPdfRequest request) {
        AsyncRequestOperation<ManualRedactPdfRequest, RedactPdfManualResponse> operation
              = new RedactPdfManual.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Summary here
     * 
     * <p>desc. Input:PDF Output:JSON Type:SISO
     * 
     * @return The async call builder
     */
    public GetPdfInfoRequestBuilder getPdfInfo() {
        return new GetPdfInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * Summary here
     * 
     * <p>desc. Input:PDF Output:JSON Type:SISO
     * 
     * @return CompletableFuture&lt;GetPdfInfoResponse&gt; - The async response
     */
    public CompletableFuture<GetPdfInfoResponse> getPdfInfoDirect() {
        return getPdfInfo(null);
    }

    /**
     * Summary here
     * 
     * <p>desc. Input:PDF Output:JSON Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetPdfInfoResponse&gt; - The async response
     */
    public CompletableFuture<GetPdfInfoResponse> getPdfInfo(@Nullable PDFFile request) {
        AsyncRequestOperation<PDFFile, GetPdfInfoResponse> operation
              = new GetPdfInfo.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Sign PDF with a Digital Certificate
     * 
     * <p>This endpoint accepts a PDF file, a digital certificate and related information to sign the PDF. It then returns the digitally signed PDF file. Input:PDF Output:PDF Type:SISO
     * 
     * @return The async call builder
     */
    public SignPDFWithCertRequestBuilder signPDFWithCert() {
        return new SignPDFWithCertRequestBuilder(sdkConfiguration);
    }

    /**
     * Sign PDF with a Digital Certificate
     * 
     * <p>This endpoint accepts a PDF file, a digital certificate and related information to sign the PDF. It then returns the digitally signed PDF file. Input:PDF Output:PDF Type:SISO
     * 
     * @return CompletableFuture&lt;SignPDFWithCertResponse&gt; - The async response
     */
    public CompletableFuture<SignPDFWithCertResponse> signPDFWithCertDirect() {
        return signPDFWithCert(null);
    }

    /**
     * Sign PDF with a Digital Certificate
     * 
     * <p>This endpoint accepts a PDF file, a digital certificate and related information to sign the PDF. It then returns the digitally signed PDF file. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;SignPDFWithCertResponse&gt; - The async response
     */
    public CompletableFuture<SignPDFWithCertResponse> signPDFWithCert(@Nullable SignPDFWithCertRequest request) {
        AsyncRequestOperation<SignPDFWithCertRequest, SignPDFWithCertResponse> operation
              = new SignPDFWithCert.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Redacts listOfText in a PDF document
     * 
     * <p>This operation takes an input PDF file and redacts the provided listOfText. Input:PDF, Output:PDF, Type:SISO
     * 
     * @return The async call builder
     */
    public RedactPdfAutoRequestBuilder redactPdfAuto() {
        return new RedactPdfAutoRequestBuilder(sdkConfiguration);
    }

    /**
     * Redacts listOfText in a PDF document
     * 
     * <p>This operation takes an input PDF file and redacts the provided listOfText. Input:PDF, Output:PDF, Type:SISO
     * 
     * @return CompletableFuture&lt;RedactPdfAutoResponse&gt; - The async response
     */
    public CompletableFuture<RedactPdfAutoResponse> redactPdfAutoDirect() {
        return redactPdfAuto(null);
    }

    /**
     * Redacts listOfText in a PDF document
     * 
     * <p>This operation takes an input PDF file and redacts the provided listOfText. Input:PDF, Output:PDF, Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RedactPdfAutoResponse&gt; - The async response
     */
    public CompletableFuture<RedactPdfAutoResponse> redactPdfAuto(@Nullable RedactPdfRequest request) {
        AsyncRequestOperation<RedactPdfRequest, RedactPdfAutoResponse> operation
              = new RedactPdfAuto.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Add watermark to a PDF file
     * 
     * <p>This endpoint adds a watermark to a given PDF file. Users can specify the watermark type (text or image), rotation, opacity, width spacer, and height spacer. Input:PDF Output:PDF Type:SISO
     * 
     * @return The async call builder
     */
    public AddWatermarkRequestBuilder addWatermark() {
        return new AddWatermarkRequestBuilder(sdkConfiguration);
    }

    /**
     * Add watermark to a PDF file
     * 
     * <p>This endpoint adds a watermark to a given PDF file. Users can specify the watermark type (text or image), rotation, opacity, width spacer, and height spacer. Input:PDF Output:PDF Type:SISO
     * 
     * @return CompletableFuture&lt;AddWatermarkResponse&gt; - The async response
     */
    public CompletableFuture<AddWatermarkResponse> addWatermarkDirect() {
        return addWatermark(null);
    }

    /**
     * Add watermark to a PDF file
     * 
     * <p>This endpoint adds a watermark to a given PDF file. Users can specify the watermark type (text or image), rotation, opacity, width spacer, and height spacer. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AddWatermarkResponse&gt; - The async response
     */
    public CompletableFuture<AddWatermarkResponse> addWatermark(@Nullable AddWatermarkRequest request) {
        AsyncRequestOperation<AddWatermarkRequest, AddWatermarkResponse> operation
              = new AddWatermark.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Add password to a PDF file
     * 
     * <p>This endpoint adds password protection to a PDF file. Users can specify a set of permissions that should be applied to the file. Input:PDF Output:PDF
     * 
     * @return The async call builder
     */
    public AddPasswordRequestBuilder addPassword() {
        return new AddPasswordRequestBuilder(sdkConfiguration);
    }

    /**
     * Add password to a PDF file
     * 
     * <p>This endpoint adds password protection to a PDF file. Users can specify a set of permissions that should be applied to the file. Input:PDF Output:PDF
     * 
     * @return CompletableFuture&lt;AddPasswordResponse&gt; - The async response
     */
    public CompletableFuture<AddPasswordResponse> addPasswordDirect() {
        return addPassword(null);
    }

    /**
     * Add password to a PDF file
     * 
     * <p>This endpoint adds password protection to a PDF file. Users can specify a set of permissions that should be applied to the file. Input:PDF Output:PDF
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AddPasswordResponse&gt; - The async response
     */
    public CompletableFuture<AddPasswordResponse> addPassword(@Nullable AddPasswordRequest request) {
        AsyncRequestOperation<AddPasswordRequest, AddPasswordResponse> operation
              = new AddPassword.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
