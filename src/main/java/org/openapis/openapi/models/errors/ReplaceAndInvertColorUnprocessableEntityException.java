/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.io.InputStream;
import java.lang.Long;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.net.http.HttpResponse;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * ReplaceAndInvertColorUnprocessableEntityException
 * 
 * <p>Unprocessable entity - File is valid but cannot be processed
 */
@SuppressWarnings("serial")
public class ReplaceAndInvertColorUnprocessableEntityException extends RuntimeException {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Long status;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private String error;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private String message;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestamp")
    private OffsetDateTime timestamp;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    private String path;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RawResponse")
    private HttpResponse<InputStream> rawResponse;

    @JsonCreator
    public ReplaceAndInvertColorUnprocessableEntityException(
            @JsonProperty("status") @Nullable Long status,
            @JsonProperty("error") @Nullable String error,
            @JsonProperty("message") @Nullable String message,
            @JsonProperty("timestamp") @Nullable OffsetDateTime timestamp,
            @JsonProperty("path") @Nullable String path,
            @JsonProperty("RawResponse") @Nullable HttpResponse<InputStream> rawResponse) {
        super("API error occurred");
        this.status = status;
        this.error = error;
        this.message = message;
        this.timestamp = timestamp;
        this.path = path;
        this.rawResponse = rawResponse;
    }
    
    public ReplaceAndInvertColorUnprocessableEntityException() {
        this(null, null, null,
            null, null, null);
    }

    public Optional<Long> status() {
        return Optional.ofNullable(this.status);
    }

    public Optional<String> error() {
        return Optional.ofNullable(this.error);
    }

    public Optional<String> message() {
        return Optional.ofNullable(this.message);
    }

    @JsonIgnore
    @Override
    public String getMessage() {
        return Utils.valueOrNull(message);
    }

    public Optional<OffsetDateTime> timestamp() {
        return Optional.ofNullable(this.timestamp);
    }

    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public Optional<HttpResponse<InputStream>> rawResponse() {
        return Optional.ofNullable(this.rawResponse);
    }

    public static Builder builder() {
        return new Builder();
    }


    public ReplaceAndInvertColorUnprocessableEntityException withStatus(@Nullable Long status) {
        this.status = status;
        return this;
    }


    public ReplaceAndInvertColorUnprocessableEntityException withError(@Nullable String error) {
        this.error = error;
        return this;
    }


    public ReplaceAndInvertColorUnprocessableEntityException withMessage(@Nullable String message) {
        this.message = message;
        return this;
    }


    public ReplaceAndInvertColorUnprocessableEntityException withTimestamp(@Nullable OffsetDateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }


    public ReplaceAndInvertColorUnprocessableEntityException withPath(@Nullable String path) {
        this.path = path;
        return this;
    }


    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public ReplaceAndInvertColorUnprocessableEntityException withRawResponse(@Nullable HttpResponse<InputStream> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReplaceAndInvertColorUnprocessableEntityException other = (ReplaceAndInvertColorUnprocessableEntityException) o;
        return 
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.error, other.error) &&
            Utils.enhancedDeepEquals(this.message, other.message) &&
            Utils.enhancedDeepEquals(this.timestamp, other.timestamp) &&
            Utils.enhancedDeepEquals(this.path, other.path) &&
            Utils.enhancedDeepEquals(this.rawResponse, other.rawResponse);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            status, error, message,
            timestamp, path, rawResponse);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReplaceAndInvertColorUnprocessableEntityException.class,
                "status", status,
                "error", error,
                "message", message,
                "timestamp", timestamp,
                "path", path,
                "rawResponse", rawResponse);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long status;

        private String error;

        private String message;

        private OffsetDateTime timestamp;

        private String path;

        private HttpResponse<InputStream> rawResponse;

        private Builder() {
          // force use of static builder() method
        }

        public Builder status(@Nullable Long status) {
            this.status = status;
            return this;
        }

        public Builder error(@Nullable String error) {
            this.error = error;
            return this;
        }

        public Builder message(@Nullable String message) {
            this.message = message;
            return this;
        }

        public Builder timestamp(@Nullable OffsetDateTime timestamp) {
            this.timestamp = timestamp;
            return this;
        }

        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }

        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(@Nullable HttpResponse<InputStream> rawResponse) {
            this.rawResponse = rawResponse;
            return this;
        }

        public ReplaceAndInvertColorUnprocessableEntityException build() {
            return new ReplaceAndInvertColorUnprocessableEntityException(
                status, error, message,
                timestamp, path, rawResponse);
        }

    }
}

