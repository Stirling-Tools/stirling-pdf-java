/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.io.InputStream;
import java.lang.Integer;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.net.http.HttpResponse;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * ErrorResponse
 * 
 * <p>Standard error response
 */
@SuppressWarnings("serial")
public class ErrorResponse extends RuntimeException {
    /**
     * HTTP status code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Integer status;

    /**
     * Error message describing what went wrong
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private String message;

    /**
     * Timestamp when the error occurred
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestamp")
    private String timestamp;

    /**
     * Request path where the error occurred
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    private String path;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RawResponse")
    private HttpResponse<InputStream> rawResponse;

    @JsonCreator
    public ErrorResponse(
            @JsonProperty("status") @Nullable Integer status,
            @JsonProperty("message") @Nullable String message,
            @JsonProperty("timestamp") @Nullable String timestamp,
            @JsonProperty("path") @Nullable String path,
            @JsonProperty("RawResponse") @Nullable HttpResponse<InputStream> rawResponse) {
        super("API error occurred");
        this.status = status;
        this.message = message;
        this.timestamp = timestamp;
        this.path = path;
        this.rawResponse = rawResponse;
    }
    
    public ErrorResponse() {
        this(null, null, null,
            null, null);
    }

    /**
     * HTTP status code
     */
    public Optional<Integer> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Error message describing what went wrong
     */
    public Optional<String> message() {
        return Optional.ofNullable(this.message);
    }

    @JsonIgnore
    @Override
    public String getMessage() {
        return Utils.valueOrNull(message);
    }

    /**
     * Timestamp when the error occurred
     */
    public Optional<String> timestamp() {
        return Optional.ofNullable(this.timestamp);
    }

    /**
     * Request path where the error occurred
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public Optional<HttpResponse<InputStream>> rawResponse() {
        return Optional.ofNullable(this.rawResponse);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * HTTP status code
     */
    public ErrorResponse withStatus(@Nullable Integer status) {
        this.status = status;
        return this;
    }


    /**
     * Error message describing what went wrong
     */
    public ErrorResponse withMessage(@Nullable String message) {
        this.message = message;
        return this;
    }


    /**
     * Timestamp when the error occurred
     */
    public ErrorResponse withTimestamp(@Nullable String timestamp) {
        this.timestamp = timestamp;
        return this;
    }


    /**
     * Request path where the error occurred
     */
    public ErrorResponse withPath(@Nullable String path) {
        this.path = path;
        return this;
    }


    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public ErrorResponse withRawResponse(@Nullable HttpResponse<InputStream> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ErrorResponse other = (ErrorResponse) o;
        return 
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.message, other.message) &&
            Utils.enhancedDeepEquals(this.timestamp, other.timestamp) &&
            Utils.enhancedDeepEquals(this.path, other.path) &&
            Utils.enhancedDeepEquals(this.rawResponse, other.rawResponse);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            status, message, timestamp,
            path, rawResponse);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ErrorResponse.class,
                "status", status,
                "message", message,
                "timestamp", timestamp,
                "path", path,
                "rawResponse", rawResponse);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Integer status;

        private String message;

        private String timestamp;

        private String path;

        private HttpResponse<InputStream> rawResponse;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * HTTP status code
         */
        public Builder status(@Nullable Integer status) {
            this.status = status;
            return this;
        }

        /**
         * Error message describing what went wrong
         */
        public Builder message(@Nullable String message) {
            this.message = message;
            return this;
        }

        /**
         * Timestamp when the error occurred
         */
        public Builder timestamp(@Nullable String timestamp) {
            this.timestamp = timestamp;
            return this;
        }

        /**
         * Request path where the error occurred
         */
        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }

        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(@Nullable HttpResponse<InputStream> rawResponse) {
            this.rawResponse = rawResponse;
            return this;
        }

        public ErrorResponse build() {
            return new ErrorResponse(
                status, message, timestamp,
                path, rawResponse);
        }

    }
}

