/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class RemoveBlankPagesRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private RemoveBlankPagesRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * The threshold value to determine blank pages
     */
    @SpeakeasyMetadata("multipartForm:name=threshold")
    private Integer threshold;

    /**
     * The percentage of white color on a page to consider it as blank
     */
    @SpeakeasyMetadata("multipartForm:name=whitePercent")
    private Float whitePercent;

    @JsonCreator
    public RemoveBlankPagesRequest(
            @Nullable RemoveBlankPagesRequestFileInput fileInput,
            @Nullable String fileId,
            @Nullable Integer threshold,
            @Nullable Float whitePercent) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.threshold = Optional.ofNullable(threshold)
            .orElse(Builder._SINGLETON_VALUE_Threshold.value());
        this.whitePercent = Optional.ofNullable(whitePercent)
            .orElse(Builder._SINGLETON_VALUE_WhitePercent.value());
    }
    
    public RemoveBlankPagesRequest() {
        this(null, null, null,
            null);
    }

    public Optional<RemoveBlankPagesRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * The threshold value to determine blank pages
     */
    public Optional<Integer> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    /**
     * The percentage of white color on a page to consider it as blank
     */
    public Optional<Float> whitePercent() {
        return Optional.ofNullable(this.whitePercent);
    }

    public static Builder builder() {
        return new Builder();
    }


    public RemoveBlankPagesRequest withFileInput(@Nullable RemoveBlankPagesRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public RemoveBlankPagesRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * The threshold value to determine blank pages
     */
    public RemoveBlankPagesRequest withThreshold(@Nullable Integer threshold) {
        this.threshold = threshold;
        return this;
    }


    /**
     * The percentage of white color on a page to consider it as blank
     */
    public RemoveBlankPagesRequest withWhitePercent(@Nullable Float whitePercent) {
        this.whitePercent = whitePercent;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RemoveBlankPagesRequest other = (RemoveBlankPagesRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.threshold, other.threshold) &&
            Utils.enhancedDeepEquals(this.whitePercent, other.whitePercent);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, threshold,
            whitePercent);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RemoveBlankPagesRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "threshold", threshold,
                "whitePercent", whitePercent);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private RemoveBlankPagesRequestFileInput fileInput;

        private String fileId;

        private Integer threshold;

        private Float whitePercent;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable RemoveBlankPagesRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * The threshold value to determine blank pages
         */
        public Builder threshold(@Nullable Integer threshold) {
            this.threshold = threshold;
            return this;
        }

        /**
         * The percentage of white color on a page to consider it as blank
         */
        public Builder whitePercent(@Nullable Float whitePercent) {
            this.whitePercent = whitePercent;
            return this;
        }

        public RemoveBlankPagesRequest build() {
            return new RemoveBlankPagesRequest(
                fileInput, fileId, threshold,
                whitePercent);
        }


        private static final LazySingletonValue<Integer> _SINGLETON_VALUE_Threshold =
                new LazySingletonValue<>(
                        "threshold",
                        "10",
                        new TypeReference<Integer>() {});

        private static final LazySingletonValue<Float> _SINGLETON_VALUE_WhitePercent =
                new LazySingletonValue<>(
                        "whitePercent",
                        "99.9",
                        new TypeReference<Float>() {});
    }
}
