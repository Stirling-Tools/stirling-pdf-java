/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class SignPDFWithCertRequestFileInput {

    @SpeakeasyMetadata("multipartForm:name=fileName")
    private String fileName;


    @SpeakeasyMetadata("multipartForm:content")
    private byte[] content;

    @JsonCreator
    public SignPDFWithCertRequestFileInput(
            @Nonnull String fileName,
            @Nonnull byte[] content) {
        this.fileName = Optional.ofNullable(fileName)
            .orElseThrow(() -> new IllegalArgumentException("fileName cannot be null"));
        this.content = Optional.ofNullable(content)
            .orElseThrow(() -> new IllegalArgumentException("content cannot be null"));
    }

    public String fileName() {
        return this.fileName;
    }

    public byte[] content() {
        return this.content;
    }

    public static Builder builder() {
        return new Builder();
    }


    public SignPDFWithCertRequestFileInput withFileName(@Nonnull String fileName) {
        this.fileName = Utils.checkNotNull(fileName, "fileName");
        return this;
    }


    public SignPDFWithCertRequestFileInput withContent(@Nonnull byte[] content) {
        this.content = Utils.checkNotNull(content, "content");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SignPDFWithCertRequestFileInput other = (SignPDFWithCertRequestFileInput) o;
        return 
            Utils.enhancedDeepEquals(this.fileName, other.fileName) &&
            Utils.enhancedDeepEquals(this.content, other.content);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileName, content);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SignPDFWithCertRequestFileInput.class,
                "fileName", fileName,
                "content", content);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String fileName;

        private byte[] content;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileName(@Nonnull String fileName) {
            this.fileName = Utils.checkNotNull(fileName, "fileName");
            return this;
        }

        public Builder content(@Nonnull byte[] content) {
            this.content = Utils.checkNotNull(content, "content");
            return this;
        }

        public SignPDFWithCertRequestFileInput build() {
            return new SignPDFWithCertRequestFileInput(
                fileName, content);
        }

    }
}
