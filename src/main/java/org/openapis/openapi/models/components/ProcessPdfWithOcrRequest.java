/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class ProcessPdfWithOcrRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private ProcessPdfWithOcrRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * List of languages to use in OCR processing, e.g., 'eng', 'deu'
     */
    @SpeakeasyMetadata("multipartForm:name=languages")
    private List<String> languages;

    /**
     * Include OCR text in a sidecar text file if set to true
     */
    @SpeakeasyMetadata("multipartForm:name=sidecar")
    private Boolean sidecar;

    /**
     * Deskew the input file if set to true
     */
    @SpeakeasyMetadata("multipartForm:name=deskew")
    private Boolean deskew;

    /**
     * Clean the input file if set to true
     */
    @SpeakeasyMetadata("multipartForm:name=clean")
    private Boolean clean;

    /**
     * Clean the final output if set to true
     */
    @SpeakeasyMetadata("multipartForm:name=cleanFinal")
    private Boolean cleanFinal;

    /**
     * Specify the OCR type, e.g., 'skip-text', 'force-ocr', or 'Normal'
     */
    @SpeakeasyMetadata("multipartForm:name=ocrType")
    private OcrType ocrType;

    /**
     * Specify the OCR render type, either 'hocr' or 'sandwich'
     */
    @SpeakeasyMetadata("multipartForm:name=ocrRenderType")
    private OcrRenderType ocrRenderType;

    /**
     * Remove images from the output PDF if set to true
     */
    @SpeakeasyMetadata("multipartForm:name=removeImagesAfter")
    private Boolean removeImagesAfter;

    @JsonCreator
    public ProcessPdfWithOcrRequest(
            @Nullable ProcessPdfWithOcrRequestFileInput fileInput,
            @Nullable String fileId,
            @Nonnull List<String> languages,
            @Nullable Boolean sidecar,
            @Nullable Boolean deskew,
            @Nullable Boolean clean,
            @Nullable Boolean cleanFinal,
            @Nonnull OcrType ocrType,
            @Nullable OcrRenderType ocrRenderType,
            @Nullable Boolean removeImagesAfter) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.languages = Optional.ofNullable(languages)
            .orElseThrow(() -> new IllegalArgumentException("languages cannot be null"));
        this.sidecar = sidecar;
        this.deskew = deskew;
        this.clean = clean;
        this.cleanFinal = cleanFinal;
        this.ocrType = Optional.ofNullable(ocrType)
            .orElseThrow(() -> new IllegalArgumentException("ocrType cannot be null"));
        this.ocrRenderType = Optional.ofNullable(ocrRenderType)
            .orElse(Builder._SINGLETON_VALUE_OcrRenderType.value());
        this.removeImagesAfter = removeImagesAfter;
    }
    
    public ProcessPdfWithOcrRequest(
            @Nonnull List<String> languages,
            @Nonnull OcrType ocrType) {
        this(null, null, languages,
            null, null, null,
            null, ocrType, null,
            null);
    }

    public Optional<ProcessPdfWithOcrRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * List of languages to use in OCR processing, e.g., 'eng', 'deu'
     */
    public List<String> languages() {
        return this.languages;
    }

    /**
     * Include OCR text in a sidecar text file if set to true
     */
    public Optional<Boolean> sidecar() {
        return Optional.ofNullable(this.sidecar);
    }

    /**
     * Deskew the input file if set to true
     */
    public Optional<Boolean> deskew() {
        return Optional.ofNullable(this.deskew);
    }

    /**
     * Clean the input file if set to true
     */
    public Optional<Boolean> clean() {
        return Optional.ofNullable(this.clean);
    }

    /**
     * Clean the final output if set to true
     */
    public Optional<Boolean> cleanFinal() {
        return Optional.ofNullable(this.cleanFinal);
    }

    /**
     * Specify the OCR type, e.g., 'skip-text', 'force-ocr', or 'Normal'
     */
    public OcrType ocrType() {
        return this.ocrType;
    }

    /**
     * Specify the OCR render type, either 'hocr' or 'sandwich'
     */
    public Optional<OcrRenderType> ocrRenderType() {
        return Optional.ofNullable(this.ocrRenderType);
    }

    /**
     * Remove images from the output PDF if set to true
     */
    public Optional<Boolean> removeImagesAfter() {
        return Optional.ofNullable(this.removeImagesAfter);
    }

    public static Builder builder() {
        return new Builder();
    }


    public ProcessPdfWithOcrRequest withFileInput(@Nullable ProcessPdfWithOcrRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public ProcessPdfWithOcrRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * List of languages to use in OCR processing, e.g., 'eng', 'deu'
     */
    public ProcessPdfWithOcrRequest withLanguages(@Nonnull List<String> languages) {
        this.languages = Utils.checkNotNull(languages, "languages");
        return this;
    }


    /**
     * Include OCR text in a sidecar text file if set to true
     */
    public ProcessPdfWithOcrRequest withSidecar(@Nullable Boolean sidecar) {
        this.sidecar = sidecar;
        return this;
    }


    /**
     * Deskew the input file if set to true
     */
    public ProcessPdfWithOcrRequest withDeskew(@Nullable Boolean deskew) {
        this.deskew = deskew;
        return this;
    }


    /**
     * Clean the input file if set to true
     */
    public ProcessPdfWithOcrRequest withClean(@Nullable Boolean clean) {
        this.clean = clean;
        return this;
    }


    /**
     * Clean the final output if set to true
     */
    public ProcessPdfWithOcrRequest withCleanFinal(@Nullable Boolean cleanFinal) {
        this.cleanFinal = cleanFinal;
        return this;
    }


    /**
     * Specify the OCR type, e.g., 'skip-text', 'force-ocr', or 'Normal'
     */
    public ProcessPdfWithOcrRequest withOcrType(@Nonnull OcrType ocrType) {
        this.ocrType = Utils.checkNotNull(ocrType, "ocrType");
        return this;
    }


    /**
     * Specify the OCR render type, either 'hocr' or 'sandwich'
     */
    public ProcessPdfWithOcrRequest withOcrRenderType(@Nullable OcrRenderType ocrRenderType) {
        this.ocrRenderType = ocrRenderType;
        return this;
    }


    /**
     * Remove images from the output PDF if set to true
     */
    public ProcessPdfWithOcrRequest withRemoveImagesAfter(@Nullable Boolean removeImagesAfter) {
        this.removeImagesAfter = removeImagesAfter;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProcessPdfWithOcrRequest other = (ProcessPdfWithOcrRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.languages, other.languages) &&
            Utils.enhancedDeepEquals(this.sidecar, other.sidecar) &&
            Utils.enhancedDeepEquals(this.deskew, other.deskew) &&
            Utils.enhancedDeepEquals(this.clean, other.clean) &&
            Utils.enhancedDeepEquals(this.cleanFinal, other.cleanFinal) &&
            Utils.enhancedDeepEquals(this.ocrType, other.ocrType) &&
            Utils.enhancedDeepEquals(this.ocrRenderType, other.ocrRenderType) &&
            Utils.enhancedDeepEquals(this.removeImagesAfter, other.removeImagesAfter);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, languages,
            sidecar, deskew, clean,
            cleanFinal, ocrType, ocrRenderType,
            removeImagesAfter);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProcessPdfWithOcrRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "languages", languages,
                "sidecar", sidecar,
                "deskew", deskew,
                "clean", clean,
                "cleanFinal", cleanFinal,
                "ocrType", ocrType,
                "ocrRenderType", ocrRenderType,
                "removeImagesAfter", removeImagesAfter);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private ProcessPdfWithOcrRequestFileInput fileInput;

        private String fileId;

        private List<String> languages;

        private Boolean sidecar;

        private Boolean deskew;

        private Boolean clean;

        private Boolean cleanFinal;

        private OcrType ocrType;

        private OcrRenderType ocrRenderType;

        private Boolean removeImagesAfter;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable ProcessPdfWithOcrRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * List of languages to use in OCR processing, e.g., 'eng', 'deu'
         */
        public Builder languages(@Nonnull List<String> languages) {
            this.languages = Utils.checkNotNull(languages, "languages");
            return this;
        }

        /**
         * Include OCR text in a sidecar text file if set to true
         */
        public Builder sidecar(@Nullable Boolean sidecar) {
            this.sidecar = sidecar;
            return this;
        }

        /**
         * Deskew the input file if set to true
         */
        public Builder deskew(@Nullable Boolean deskew) {
            this.deskew = deskew;
            return this;
        }

        /**
         * Clean the input file if set to true
         */
        public Builder clean(@Nullable Boolean clean) {
            this.clean = clean;
            return this;
        }

        /**
         * Clean the final output if set to true
         */
        public Builder cleanFinal(@Nullable Boolean cleanFinal) {
            this.cleanFinal = cleanFinal;
            return this;
        }

        /**
         * Specify the OCR type, e.g., 'skip-text', 'force-ocr', or 'Normal'
         */
        public Builder ocrType(@Nonnull OcrType ocrType) {
            this.ocrType = Utils.checkNotNull(ocrType, "ocrType");
            return this;
        }

        /**
         * Specify the OCR render type, either 'hocr' or 'sandwich'
         */
        public Builder ocrRenderType(@Nullable OcrRenderType ocrRenderType) {
            this.ocrRenderType = ocrRenderType;
            return this;
        }

        /**
         * Remove images from the output PDF if set to true
         */
        public Builder removeImagesAfter(@Nullable Boolean removeImagesAfter) {
            this.removeImagesAfter = removeImagesAfter;
            return this;
        }

        public ProcessPdfWithOcrRequest build() {
            return new ProcessPdfWithOcrRequest(
                fileInput, fileId, languages,
                sidecar, deskew, clean,
                cleanFinal, ocrType, ocrRenderType,
                removeImagesAfter);
        }


        private static final LazySingletonValue<OcrRenderType> _SINGLETON_VALUE_OcrRenderType =
                new LazySingletonValue<>(
                        "ocrRenderType",
                        "\"hocr\"",
                        new TypeReference<OcrRenderType>() {});
    }
}
