/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class RedactPdfRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private RedactPdfRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * List of text to redact from the PDF
     */
    @SpeakeasyMetadata("multipartForm:name=listOfText")
    private String listOfText;

    /**
     * Whether to use regex for the listOfText
     */
    @SpeakeasyMetadata("multipartForm:name=useRegex")
    private Boolean useRegex;

    /**
     * Whether to use whole word search
     */
    @SpeakeasyMetadata("multipartForm:name=wholeWordSearch")
    private Boolean wholeWordSearch;

    /**
     * The color for redaction
     */
    @SpeakeasyMetadata("multipartForm:name=redactColor")
    private String redactColor;

    /**
     * Custom padding for redaction
     */
    @SpeakeasyMetadata("multipartForm:name=customPadding")
    private double customPadding;

    /**
     * Convert the redacted PDF to an image
     */
    @SpeakeasyMetadata("multipartForm:name=convertPDFToImage")
    private Boolean convertPDFToImage;

    @JsonCreator
    public RedactPdfRequest(
            @Nullable RedactPdfRequestFileInput fileInput,
            @Nullable String fileId,
            @Nullable String listOfText,
            @Nullable Boolean useRegex,
            @Nullable Boolean wholeWordSearch,
            @Nullable String redactColor,
            double customPadding,
            @Nullable Boolean convertPDFToImage) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.listOfText = Optional.ofNullable(listOfText)
            .orElse(Builder._SINGLETON_VALUE_ListOfText.value());
        this.useRegex = Optional.ofNullable(useRegex)
            .orElse(Builder._SINGLETON_VALUE_UseRegex.value());
        this.wholeWordSearch = Optional.ofNullable(wholeWordSearch)
            .orElse(Builder._SINGLETON_VALUE_WholeWordSearch.value());
        this.redactColor = Optional.ofNullable(redactColor)
            .orElse(Builder._SINGLETON_VALUE_RedactColor.value());
        this.customPadding = customPadding;
        this.convertPDFToImage = Optional.ofNullable(convertPDFToImage)
            .orElse(Builder._SINGLETON_VALUE_ConvertPDFToImage.value());
    }
    
    public RedactPdfRequest(
            double customPadding) {
        this(null, null, null,
            null, null, null,
            customPadding, null);
    }

    public Optional<RedactPdfRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * List of text to redact from the PDF
     */
    public Optional<String> listOfText() {
        return Optional.ofNullable(this.listOfText);
    }

    /**
     * Whether to use regex for the listOfText
     */
    public Optional<Boolean> useRegex() {
        return Optional.ofNullable(this.useRegex);
    }

    /**
     * Whether to use whole word search
     */
    public Optional<Boolean> wholeWordSearch() {
        return Optional.ofNullable(this.wholeWordSearch);
    }

    /**
     * The color for redaction
     */
    public Optional<String> redactColor() {
        return Optional.ofNullable(this.redactColor);
    }

    /**
     * Custom padding for redaction
     */
    public double customPadding() {
        return this.customPadding;
    }

    /**
     * Convert the redacted PDF to an image
     */
    public Optional<Boolean> convertPDFToImage() {
        return Optional.ofNullable(this.convertPDFToImage);
    }

    public static Builder builder() {
        return new Builder();
    }


    public RedactPdfRequest withFileInput(@Nullable RedactPdfRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public RedactPdfRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * List of text to redact from the PDF
     */
    public RedactPdfRequest withListOfText(@Nullable String listOfText) {
        this.listOfText = listOfText;
        return this;
    }


    /**
     * Whether to use regex for the listOfText
     */
    public RedactPdfRequest withUseRegex(@Nullable Boolean useRegex) {
        this.useRegex = useRegex;
        return this;
    }


    /**
     * Whether to use whole word search
     */
    public RedactPdfRequest withWholeWordSearch(@Nullable Boolean wholeWordSearch) {
        this.wholeWordSearch = wholeWordSearch;
        return this;
    }


    /**
     * The color for redaction
     */
    public RedactPdfRequest withRedactColor(@Nullable String redactColor) {
        this.redactColor = redactColor;
        return this;
    }


    /**
     * Custom padding for redaction
     */
    public RedactPdfRequest withCustomPadding(double customPadding) {
        this.customPadding = customPadding;
        return this;
    }


    /**
     * Convert the redacted PDF to an image
     */
    public RedactPdfRequest withConvertPDFToImage(@Nullable Boolean convertPDFToImage) {
        this.convertPDFToImage = convertPDFToImage;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RedactPdfRequest other = (RedactPdfRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.listOfText, other.listOfText) &&
            Utils.enhancedDeepEquals(this.useRegex, other.useRegex) &&
            Utils.enhancedDeepEquals(this.wholeWordSearch, other.wholeWordSearch) &&
            Utils.enhancedDeepEquals(this.redactColor, other.redactColor) &&
            Utils.enhancedDeepEquals(this.customPadding, other.customPadding) &&
            Utils.enhancedDeepEquals(this.convertPDFToImage, other.convertPDFToImage);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, listOfText,
            useRegex, wholeWordSearch, redactColor,
            customPadding, convertPDFToImage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RedactPdfRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "listOfText", listOfText,
                "useRegex", useRegex,
                "wholeWordSearch", wholeWordSearch,
                "redactColor", redactColor,
                "customPadding", customPadding,
                "convertPDFToImage", convertPDFToImage);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private RedactPdfRequestFileInput fileInput;

        private String fileId;

        private String listOfText;

        private Boolean useRegex;

        private Boolean wholeWordSearch;

        private String redactColor;

        private double customPadding;

        private Boolean convertPDFToImage;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable RedactPdfRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * List of text to redact from the PDF
         */
        public Builder listOfText(@Nullable String listOfText) {
            this.listOfText = listOfText;
            return this;
        }

        /**
         * Whether to use regex for the listOfText
         */
        public Builder useRegex(@Nullable Boolean useRegex) {
            this.useRegex = useRegex;
            return this;
        }

        /**
         * Whether to use whole word search
         */
        public Builder wholeWordSearch(@Nullable Boolean wholeWordSearch) {
            this.wholeWordSearch = wholeWordSearch;
            return this;
        }

        /**
         * The color for redaction
         */
        public Builder redactColor(@Nullable String redactColor) {
            this.redactColor = redactColor;
            return this;
        }

        /**
         * Custom padding for redaction
         */
        public Builder customPadding(double customPadding) {
            this.customPadding = customPadding;
            return this;
        }

        /**
         * Convert the redacted PDF to an image
         */
        public Builder convertPDFToImage(@Nullable Boolean convertPDFToImage) {
            this.convertPDFToImage = convertPDFToImage;
            return this;
        }

        public RedactPdfRequest build() {
            return new RedactPdfRequest(
                fileInput, fileId, listOfText,
                useRegex, wholeWordSearch, redactColor,
                customPadding, convertPDFToImage);
        }


        private static final LazySingletonValue<String> _SINGLETON_VALUE_ListOfText =
                new LazySingletonValue<>(
                        "listOfText",
                        "\"text,text2\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_UseRegex =
                new LazySingletonValue<>(
                        "useRegex",
                        "false",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_WholeWordSearch =
                new LazySingletonValue<>(
                        "wholeWordSearch",
                        "false",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_RedactColor =
                new LazySingletonValue<>(
                        "redactColor",
                        "\"#000000\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_ConvertPDFToImage =
                new LazySingletonValue<>(
                        "convertPDFToImage",
                        "false",
                        new TypeReference<Boolean>() {});
    }
}
