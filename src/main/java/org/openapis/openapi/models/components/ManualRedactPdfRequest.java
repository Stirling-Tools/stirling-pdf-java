/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class ManualRedactPdfRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private ManualRedactPdfRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
     */
    @SpeakeasyMetadata("multipartForm:name=pageNumbers")
    private String pageNumbers;

    /**
     * A list of areas that should be redacted
     */
    @SpeakeasyMetadata("multipartForm:name=redactions,json")
    private List<RedactionArea> redactions;

    /**
     * Convert the redacted PDF to an image
     */
    @SpeakeasyMetadata("multipartForm:name=convertPDFToImage")
    private Boolean convertPDFToImage;

    /**
     * The color used to fully redact certain pages
     */
    @SpeakeasyMetadata("multipartForm:name=pageRedactionColor")
    private String pageRedactionColor;

    @JsonCreator
    public ManualRedactPdfRequest(
            @Nullable ManualRedactPdfRequestFileInput fileInput,
            @Nullable String fileId,
            @Nullable String pageNumbers,
            @Nonnull List<RedactionArea> redactions,
            @Nullable Boolean convertPDFToImage,
            @Nullable String pageRedactionColor) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.pageNumbers = Optional.ofNullable(pageNumbers)
            .orElse(Builder._SINGLETON_VALUE_PageNumbers.value());
        this.redactions = Optional.ofNullable(redactions)
            .orElseThrow(() -> new IllegalArgumentException("redactions cannot be null"));
        this.convertPDFToImage = Optional.ofNullable(convertPDFToImage)
            .orElse(Builder._SINGLETON_VALUE_ConvertPDFToImage.value());
        this.pageRedactionColor = Optional.ofNullable(pageRedactionColor)
            .orElse(Builder._SINGLETON_VALUE_PageRedactionColor.value());
    }
    
    public ManualRedactPdfRequest(
            @Nonnull List<RedactionArea> redactions) {
        this(null, null, null,
            redactions, null, null);
    }

    public Optional<ManualRedactPdfRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
     */
    public Optional<String> pageNumbers() {
        return Optional.ofNullable(this.pageNumbers);
    }

    /**
     * A list of areas that should be redacted
     */
    public List<RedactionArea> redactions() {
        return this.redactions;
    }

    /**
     * Convert the redacted PDF to an image
     */
    public Optional<Boolean> convertPDFToImage() {
        return Optional.ofNullable(this.convertPDFToImage);
    }

    /**
     * The color used to fully redact certain pages
     */
    public Optional<String> pageRedactionColor() {
        return Optional.ofNullable(this.pageRedactionColor);
    }

    public static Builder builder() {
        return new Builder();
    }


    public ManualRedactPdfRequest withFileInput(@Nullable ManualRedactPdfRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public ManualRedactPdfRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
     */
    public ManualRedactPdfRequest withPageNumbers(@Nullable String pageNumbers) {
        this.pageNumbers = pageNumbers;
        return this;
    }


    /**
     * A list of areas that should be redacted
     */
    public ManualRedactPdfRequest withRedactions(@Nonnull List<RedactionArea> redactions) {
        this.redactions = Utils.checkNotNull(redactions, "redactions");
        return this;
    }


    /**
     * Convert the redacted PDF to an image
     */
    public ManualRedactPdfRequest withConvertPDFToImage(@Nullable Boolean convertPDFToImage) {
        this.convertPDFToImage = convertPDFToImage;
        return this;
    }


    /**
     * The color used to fully redact certain pages
     */
    public ManualRedactPdfRequest withPageRedactionColor(@Nullable String pageRedactionColor) {
        this.pageRedactionColor = pageRedactionColor;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ManualRedactPdfRequest other = (ManualRedactPdfRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.pageNumbers, other.pageNumbers) &&
            Utils.enhancedDeepEquals(this.redactions, other.redactions) &&
            Utils.enhancedDeepEquals(this.convertPDFToImage, other.convertPDFToImage) &&
            Utils.enhancedDeepEquals(this.pageRedactionColor, other.pageRedactionColor);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, pageNumbers,
            redactions, convertPDFToImage, pageRedactionColor);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ManualRedactPdfRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "pageNumbers", pageNumbers,
                "redactions", redactions,
                "convertPDFToImage", convertPDFToImage,
                "pageRedactionColor", pageRedactionColor);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private ManualRedactPdfRequestFileInput fileInput;

        private String fileId;

        private String pageNumbers;

        private List<RedactionArea> redactions;

        private Boolean convertPDFToImage;

        private String pageRedactionColor;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable ManualRedactPdfRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
         */
        public Builder pageNumbers(@Nullable String pageNumbers) {
            this.pageNumbers = pageNumbers;
            return this;
        }

        /**
         * A list of areas that should be redacted
         */
        public Builder redactions(@Nonnull List<RedactionArea> redactions) {
            this.redactions = Utils.checkNotNull(redactions, "redactions");
            return this;
        }

        /**
         * Convert the redacted PDF to an image
         */
        public Builder convertPDFToImage(@Nullable Boolean convertPDFToImage) {
            this.convertPDFToImage = convertPDFToImage;
            return this;
        }

        /**
         * The color used to fully redact certain pages
         */
        public Builder pageRedactionColor(@Nullable String pageRedactionColor) {
            this.pageRedactionColor = pageRedactionColor;
            return this;
        }

        public ManualRedactPdfRequest build() {
            return new ManualRedactPdfRequest(
                fileInput, fileId, pageNumbers,
                redactions, convertPDFToImage, pageRedactionColor);
        }


        private static final LazySingletonValue<String> _SINGLETON_VALUE_PageNumbers =
                new LazySingletonValue<>(
                        "pageNumbers",
                        "\"all\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_ConvertPDFToImage =
                new LazySingletonValue<>(
                        "convertPDFToImage",
                        "false",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_PageRedactionColor =
                new LazySingletonValue<>(
                        "pageRedactionColor",
                        "\"#000000\"",
                        new TypeReference<String>() {});
    }
}
