/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class MetadataRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private MetadataRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * Delete all metadata if set to true
     */
    @SpeakeasyMetadata("multipartForm:name=deleteAll")
    private Boolean deleteAll;

    /**
     * The author of the document
     */
    @SpeakeasyMetadata("multipartForm:name=author")
    private String author;

    /**
     * The creation date of the document (format: yyyy/MM/dd HH:mm:ss)
     */
    @SpeakeasyMetadata("multipartForm:name=creationDate")
    private String creationDate;

    /**
     * The creator of the document
     */
    @SpeakeasyMetadata("multipartForm:name=creator")
    private String creator;

    /**
     * The keywords for the document
     */
    @SpeakeasyMetadata("multipartForm:name=keywords")
    private String keywords;

    /**
     * The modification date of the document (format: yyyy/MM/dd HH:mm:ss)
     */
    @SpeakeasyMetadata("multipartForm:name=modificationDate")
    private String modificationDate;

    /**
     * The producer of the document
     */
    @SpeakeasyMetadata("multipartForm:name=producer")
    private String producer;

    /**
     * The subject of the document
     */
    @SpeakeasyMetadata("multipartForm:name=subject")
    private String subject;

    /**
     * The title of the document
     */
    @SpeakeasyMetadata("multipartForm:name=title")
    private String title;

    /**
     * The trapped status of the document
     */
    @SpeakeasyMetadata("multipartForm:name=trapped")
    private Trapped trapped;

    /**
     * Map list of key and value of custom parameters. Note these must start with customKey and customValue if they are non-standard
     */
    @SpeakeasyMetadata("multipartForm:name=allRequestParams,json")
    private Map<String, String> allRequestParams;

    @JsonCreator
    public MetadataRequest(
            @Nullable MetadataRequestFileInput fileInput,
            @Nullable String fileId,
            @Nullable Boolean deleteAll,
            @Nullable String author,
            @Nullable String creationDate,
            @Nullable String creator,
            @Nullable String keywords,
            @Nullable String modificationDate,
            @Nullable String producer,
            @Nullable String subject,
            @Nullable String title,
            @Nullable Trapped trapped,
            @Nullable Map<String, String> allRequestParams) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.deleteAll = Optional.ofNullable(deleteAll)
            .orElse(Builder._SINGLETON_VALUE_DeleteAll.value());
        this.author = Optional.ofNullable(author)
            .orElse(Builder._SINGLETON_VALUE_Author.value());
        this.creationDate = Optional.ofNullable(creationDate)
            .orElse(Builder._SINGLETON_VALUE_CreationDate.value());
        this.creator = Optional.ofNullable(creator)
            .orElse(Builder._SINGLETON_VALUE_Creator.value());
        this.keywords = Optional.ofNullable(keywords)
            .orElse(Builder._SINGLETON_VALUE_Keywords.value());
        this.modificationDate = Optional.ofNullable(modificationDate)
            .orElse(Builder._SINGLETON_VALUE_ModificationDate.value());
        this.producer = Optional.ofNullable(producer)
            .orElse(Builder._SINGLETON_VALUE_Producer.value());
        this.subject = Optional.ofNullable(subject)
            .orElse(Builder._SINGLETON_VALUE_Subject.value());
        this.title = Optional.ofNullable(title)
            .orElse(Builder._SINGLETON_VALUE_Title.value());
        this.trapped = Optional.ofNullable(trapped)
            .orElse(Builder._SINGLETON_VALUE_Trapped.value());
        this.allRequestParams = allRequestParams;
    }
    
    public MetadataRequest() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    public Optional<MetadataRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * Delete all metadata if set to true
     */
    public Optional<Boolean> deleteAll() {
        return Optional.ofNullable(this.deleteAll);
    }

    /**
     * The author of the document
     */
    public Optional<String> author() {
        return Optional.ofNullable(this.author);
    }

    /**
     * The creation date of the document (format: yyyy/MM/dd HH:mm:ss)
     */
    public Optional<String> creationDate() {
        return Optional.ofNullable(this.creationDate);
    }

    /**
     * The creator of the document
     */
    public Optional<String> creator() {
        return Optional.ofNullable(this.creator);
    }

    /**
     * The keywords for the document
     */
    public Optional<String> keywords() {
        return Optional.ofNullable(this.keywords);
    }

    /**
     * The modification date of the document (format: yyyy/MM/dd HH:mm:ss)
     */
    public Optional<String> modificationDate() {
        return Optional.ofNullable(this.modificationDate);
    }

    /**
     * The producer of the document
     */
    public Optional<String> producer() {
        return Optional.ofNullable(this.producer);
    }

    /**
     * The subject of the document
     */
    public Optional<String> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * The title of the document
     */
    public Optional<String> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * The trapped status of the document
     */
    public Optional<Trapped> trapped() {
        return Optional.ofNullable(this.trapped);
    }

    /**
     * Map list of key and value of custom parameters. Note these must start with customKey and customValue if they are non-standard
     */
    public Optional<Map<String, String>> allRequestParams() {
        return Optional.ofNullable(this.allRequestParams);
    }

    public static Builder builder() {
        return new Builder();
    }


    public MetadataRequest withFileInput(@Nullable MetadataRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public MetadataRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * Delete all metadata if set to true
     */
    public MetadataRequest withDeleteAll(@Nullable Boolean deleteAll) {
        this.deleteAll = deleteAll;
        return this;
    }


    /**
     * The author of the document
     */
    public MetadataRequest withAuthor(@Nullable String author) {
        this.author = author;
        return this;
    }


    /**
     * The creation date of the document (format: yyyy/MM/dd HH:mm:ss)
     */
    public MetadataRequest withCreationDate(@Nullable String creationDate) {
        this.creationDate = creationDate;
        return this;
    }


    /**
     * The creator of the document
     */
    public MetadataRequest withCreator(@Nullable String creator) {
        this.creator = creator;
        return this;
    }


    /**
     * The keywords for the document
     */
    public MetadataRequest withKeywords(@Nullable String keywords) {
        this.keywords = keywords;
        return this;
    }


    /**
     * The modification date of the document (format: yyyy/MM/dd HH:mm:ss)
     */
    public MetadataRequest withModificationDate(@Nullable String modificationDate) {
        this.modificationDate = modificationDate;
        return this;
    }


    /**
     * The producer of the document
     */
    public MetadataRequest withProducer(@Nullable String producer) {
        this.producer = producer;
        return this;
    }


    /**
     * The subject of the document
     */
    public MetadataRequest withSubject(@Nullable String subject) {
        this.subject = subject;
        return this;
    }


    /**
     * The title of the document
     */
    public MetadataRequest withTitle(@Nullable String title) {
        this.title = title;
        return this;
    }


    /**
     * The trapped status of the document
     */
    public MetadataRequest withTrapped(@Nullable Trapped trapped) {
        this.trapped = trapped;
        return this;
    }


    /**
     * Map list of key and value of custom parameters. Note these must start with customKey and customValue if they are non-standard
     */
    public MetadataRequest withAllRequestParams(@Nullable Map<String, String> allRequestParams) {
        this.allRequestParams = allRequestParams;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MetadataRequest other = (MetadataRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.deleteAll, other.deleteAll) &&
            Utils.enhancedDeepEquals(this.author, other.author) &&
            Utils.enhancedDeepEquals(this.creationDate, other.creationDate) &&
            Utils.enhancedDeepEquals(this.creator, other.creator) &&
            Utils.enhancedDeepEquals(this.keywords, other.keywords) &&
            Utils.enhancedDeepEquals(this.modificationDate, other.modificationDate) &&
            Utils.enhancedDeepEquals(this.producer, other.producer) &&
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.trapped, other.trapped) &&
            Utils.enhancedDeepEquals(this.allRequestParams, other.allRequestParams);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, deleteAll,
            author, creationDate, creator,
            keywords, modificationDate, producer,
            subject, title, trapped,
            allRequestParams);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MetadataRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "deleteAll", deleteAll,
                "author", author,
                "creationDate", creationDate,
                "creator", creator,
                "keywords", keywords,
                "modificationDate", modificationDate,
                "producer", producer,
                "subject", subject,
                "title", title,
                "trapped", trapped,
                "allRequestParams", allRequestParams);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private MetadataRequestFileInput fileInput;

        private String fileId;

        private Boolean deleteAll;

        private String author;

        private String creationDate;

        private String creator;

        private String keywords;

        private String modificationDate;

        private String producer;

        private String subject;

        private String title;

        private Trapped trapped;

        private Map<String, String> allRequestParams;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable MetadataRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * Delete all metadata if set to true
         */
        public Builder deleteAll(@Nullable Boolean deleteAll) {
            this.deleteAll = deleteAll;
            return this;
        }

        /**
         * The author of the document
         */
        public Builder author(@Nullable String author) {
            this.author = author;
            return this;
        }

        /**
         * The creation date of the document (format: yyyy/MM/dd HH:mm:ss)
         */
        public Builder creationDate(@Nullable String creationDate) {
            this.creationDate = creationDate;
            return this;
        }

        /**
         * The creator of the document
         */
        public Builder creator(@Nullable String creator) {
            this.creator = creator;
            return this;
        }

        /**
         * The keywords for the document
         */
        public Builder keywords(@Nullable String keywords) {
            this.keywords = keywords;
            return this;
        }

        /**
         * The modification date of the document (format: yyyy/MM/dd HH:mm:ss)
         */
        public Builder modificationDate(@Nullable String modificationDate) {
            this.modificationDate = modificationDate;
            return this;
        }

        /**
         * The producer of the document
         */
        public Builder producer(@Nullable String producer) {
            this.producer = producer;
            return this;
        }

        /**
         * The subject of the document
         */
        public Builder subject(@Nullable String subject) {
            this.subject = subject;
            return this;
        }

        /**
         * The title of the document
         */
        public Builder title(@Nullable String title) {
            this.title = title;
            return this;
        }

        /**
         * The trapped status of the document
         */
        public Builder trapped(@Nullable Trapped trapped) {
            this.trapped = trapped;
            return this;
        }

        /**
         * Map list of key and value of custom parameters. Note these must start with customKey and customValue if they are non-standard
         */
        public Builder allRequestParams(@Nullable Map<String, String> allRequestParams) {
            this.allRequestParams = allRequestParams;
            return this;
        }

        public MetadataRequest build() {
            return new MetadataRequest(
                fileInput, fileId, deleteAll,
                author, creationDate, creator,
                keywords, modificationDate, producer,
                subject, title, trapped,
                allRequestParams);
        }


        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_DeleteAll =
                new LazySingletonValue<>(
                        "deleteAll",
                        "false",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_Author =
                new LazySingletonValue<>(
                        "author",
                        "\"author\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_CreationDate =
                new LazySingletonValue<>(
                        "creationDate",
                        "\"2023/10/01 12:00:00\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_Creator =
                new LazySingletonValue<>(
                        "creator",
                        "\"creator\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_Keywords =
                new LazySingletonValue<>(
                        "keywords",
                        "\"keywords\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_ModificationDate =
                new LazySingletonValue<>(
                        "modificationDate",
                        "\"2023/10/01 12:00:00\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_Producer =
                new LazySingletonValue<>(
                        "producer",
                        "\"producer\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_Subject =
                new LazySingletonValue<>(
                        "subject",
                        "\"subject\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_Title =
                new LazySingletonValue<>(
                        "title",
                        "\"title\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<Trapped> _SINGLETON_VALUE_Trapped =
                new LazySingletonValue<>(
                        "trapped",
                        "\"False\"",
                        new TypeReference<Trapped>() {});
    }
}
