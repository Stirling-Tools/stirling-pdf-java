/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class SplitPdfBySizeOrCountRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private SplitPdfBySizeOrCountRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * Determines the type of split: 0 for size, 1 for page count, 2 for document count
     */
    @SpeakeasyMetadata("multipartForm:name=splitType")
    private Integer splitType;

    /**
     * Value for split: size in MB (e.g., '10MB') or number of pages (e.g., '5')
     */
    @SpeakeasyMetadata("multipartForm:name=splitValue")
    private String splitValue;

    @JsonCreator
    public SplitPdfBySizeOrCountRequest(
            @Nullable SplitPdfBySizeOrCountRequestFileInput fileInput,
            @Nullable String fileId,
            @Nullable Integer splitType,
            @Nullable String splitValue) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.splitType = Optional.ofNullable(splitType)
            .orElse(Builder._SINGLETON_VALUE_SplitType.value());
        this.splitValue = Optional.ofNullable(splitValue)
            .orElse(Builder._SINGLETON_VALUE_SplitValue.value());
    }
    
    public SplitPdfBySizeOrCountRequest() {
        this(null, null, null,
            null);
    }

    public Optional<SplitPdfBySizeOrCountRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * Determines the type of split: 0 for size, 1 for page count, 2 for document count
     */
    public Optional<Integer> splitType() {
        return Optional.ofNullable(this.splitType);
    }

    /**
     * Value for split: size in MB (e.g., '10MB') or number of pages (e.g., '5')
     */
    public Optional<String> splitValue() {
        return Optional.ofNullable(this.splitValue);
    }

    public static Builder builder() {
        return new Builder();
    }


    public SplitPdfBySizeOrCountRequest withFileInput(@Nullable SplitPdfBySizeOrCountRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public SplitPdfBySizeOrCountRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * Determines the type of split: 0 for size, 1 for page count, 2 for document count
     */
    public SplitPdfBySizeOrCountRequest withSplitType(@Nullable Integer splitType) {
        this.splitType = splitType;
        return this;
    }


    /**
     * Value for split: size in MB (e.g., '10MB') or number of pages (e.g., '5')
     */
    public SplitPdfBySizeOrCountRequest withSplitValue(@Nullable String splitValue) {
        this.splitValue = splitValue;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SplitPdfBySizeOrCountRequest other = (SplitPdfBySizeOrCountRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.splitType, other.splitType) &&
            Utils.enhancedDeepEquals(this.splitValue, other.splitValue);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, splitType,
            splitValue);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SplitPdfBySizeOrCountRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "splitType", splitType,
                "splitValue", splitValue);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private SplitPdfBySizeOrCountRequestFileInput fileInput;

        private String fileId;

        private Integer splitType;

        private String splitValue;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable SplitPdfBySizeOrCountRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * Determines the type of split: 0 for size, 1 for page count, 2 for document count
         */
        public Builder splitType(@Nullable Integer splitType) {
            this.splitType = splitType;
            return this;
        }

        /**
         * Value for split: size in MB (e.g., '10MB') or number of pages (e.g., '5')
         */
        public Builder splitValue(@Nullable String splitValue) {
            this.splitValue = splitValue;
            return this;
        }

        public SplitPdfBySizeOrCountRequest build() {
            return new SplitPdfBySizeOrCountRequest(
                fileInput, fileId, splitType,
                splitValue);
        }


        private static final LazySingletonValue<Integer> _SINGLETON_VALUE_SplitType =
                new LazySingletonValue<>(
                        "splitType",
                        "0",
                        new TypeReference<Integer>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_SplitValue =
                new LazySingletonValue<>(
                        "splitValue",
                        "\"10MB\"",
                        new TypeReference<String>() {});
    }
}
