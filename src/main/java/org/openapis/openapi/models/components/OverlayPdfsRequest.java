/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class OverlayPdfsRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private OverlayPdfsRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * An array of PDF files to be used as overlays on the base PDF. The order in these files is applied based on the selected mode.
     */
    @SpeakeasyMetadata("multipartForm:file,name=overlayFiles")
    private List<OverlayFile> overlayFiles;

    /**
     * The mode of overlaying: 'SequentialOverlay' for sequential application, 'InterleavedOverlay' for round-robin application, 'FixedRepeatOverlay' for fixed repetition based on provided counts
     */
    @SpeakeasyMetadata("multipartForm:name=overlayMode")
    private OverlayMode overlayMode;

    /**
     * An array of integers specifying the number of times each corresponding overlay file should be applied in the 'FixedRepeatOverlay' mode. This should match the length of the overlayFiles array.
     */
    @SpeakeasyMetadata("multipartForm:name=counts")
    private List<Integer> counts;

    /**
     * Overlay position 0 is Foregound, 1 is Background
     */
    @SpeakeasyMetadata("multipartForm:name=overlayPosition")
    private double overlayPosition;

    @JsonCreator
    public OverlayPdfsRequest(
            @Nullable OverlayPdfsRequestFileInput fileInput,
            @Nullable String fileId,
            @Nonnull List<OverlayFile> overlayFiles,
            @Nonnull OverlayMode overlayMode,
            @Nullable List<Integer> counts,
            double overlayPosition) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.overlayFiles = Optional.ofNullable(overlayFiles)
            .orElseThrow(() -> new IllegalArgumentException("overlayFiles cannot be null"));
        this.overlayMode = Optional.ofNullable(overlayMode)
            .orElseThrow(() -> new IllegalArgumentException("overlayMode cannot be null"));
        this.counts = counts;
        this.overlayPosition = overlayPosition;
    }
    
    public OverlayPdfsRequest(
            @Nonnull List<OverlayFile> overlayFiles,
            @Nonnull OverlayMode overlayMode,
            double overlayPosition) {
        this(null, null, overlayFiles,
            overlayMode, null, overlayPosition);
    }

    public Optional<OverlayPdfsRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * An array of PDF files to be used as overlays on the base PDF. The order in these files is applied based on the selected mode.
     */
    public List<OverlayFile> overlayFiles() {
        return this.overlayFiles;
    }

    /**
     * The mode of overlaying: 'SequentialOverlay' for sequential application, 'InterleavedOverlay' for round-robin application, 'FixedRepeatOverlay' for fixed repetition based on provided counts
     */
    public OverlayMode overlayMode() {
        return this.overlayMode;
    }

    /**
     * An array of integers specifying the number of times each corresponding overlay file should be applied in the 'FixedRepeatOverlay' mode. This should match the length of the overlayFiles array.
     */
    public Optional<List<Integer>> counts() {
        return Optional.ofNullable(this.counts);
    }

    /**
     * Overlay position 0 is Foregound, 1 is Background
     */
    public double overlayPosition() {
        return this.overlayPosition;
    }

    public static Builder builder() {
        return new Builder();
    }


    public OverlayPdfsRequest withFileInput(@Nullable OverlayPdfsRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public OverlayPdfsRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * An array of PDF files to be used as overlays on the base PDF. The order in these files is applied based on the selected mode.
     */
    public OverlayPdfsRequest withOverlayFiles(@Nonnull List<OverlayFile> overlayFiles) {
        this.overlayFiles = Utils.checkNotNull(overlayFiles, "overlayFiles");
        return this;
    }


    /**
     * The mode of overlaying: 'SequentialOverlay' for sequential application, 'InterleavedOverlay' for round-robin application, 'FixedRepeatOverlay' for fixed repetition based on provided counts
     */
    public OverlayPdfsRequest withOverlayMode(@Nonnull OverlayMode overlayMode) {
        this.overlayMode = Utils.checkNotNull(overlayMode, "overlayMode");
        return this;
    }


    /**
     * An array of integers specifying the number of times each corresponding overlay file should be applied in the 'FixedRepeatOverlay' mode. This should match the length of the overlayFiles array.
     */
    public OverlayPdfsRequest withCounts(@Nullable List<Integer> counts) {
        this.counts = counts;
        return this;
    }


    /**
     * Overlay position 0 is Foregound, 1 is Background
     */
    public OverlayPdfsRequest withOverlayPosition(double overlayPosition) {
        this.overlayPosition = overlayPosition;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OverlayPdfsRequest other = (OverlayPdfsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.overlayFiles, other.overlayFiles) &&
            Utils.enhancedDeepEquals(this.overlayMode, other.overlayMode) &&
            Utils.enhancedDeepEquals(this.counts, other.counts) &&
            Utils.enhancedDeepEquals(this.overlayPosition, other.overlayPosition);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, overlayFiles,
            overlayMode, counts, overlayPosition);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OverlayPdfsRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "overlayFiles", overlayFiles,
                "overlayMode", overlayMode,
                "counts", counts,
                "overlayPosition", overlayPosition);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private OverlayPdfsRequestFileInput fileInput;

        private String fileId;

        private List<OverlayFile> overlayFiles;

        private OverlayMode overlayMode;

        private List<Integer> counts;

        private double overlayPosition;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable OverlayPdfsRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * An array of PDF files to be used as overlays on the base PDF. The order in these files is applied based on the selected mode.
         */
        public Builder overlayFiles(@Nonnull List<OverlayFile> overlayFiles) {
            this.overlayFiles = Utils.checkNotNull(overlayFiles, "overlayFiles");
            return this;
        }

        /**
         * The mode of overlaying: 'SequentialOverlay' for sequential application, 'InterleavedOverlay' for round-robin application, 'FixedRepeatOverlay' for fixed repetition based on provided counts
         */
        public Builder overlayMode(@Nonnull OverlayMode overlayMode) {
            this.overlayMode = Utils.checkNotNull(overlayMode, "overlayMode");
            return this;
        }

        /**
         * An array of integers specifying the number of times each corresponding overlay file should be applied in the 'FixedRepeatOverlay' mode. This should match the length of the overlayFiles array.
         */
        public Builder counts(@Nullable List<Integer> counts) {
            this.counts = counts;
            return this;
        }

        /**
         * Overlay position 0 is Foregound, 1 is Background
         */
        public Builder overlayPosition(double overlayPosition) {
            this.overlayPosition = overlayPosition;
            return this;
        }

        public OverlayPdfsRequest build() {
            return new OverlayPdfsRequest(
                fileInput, fileId, overlayFiles,
                overlayMode, counts, overlayPosition);
        }

    }
}
