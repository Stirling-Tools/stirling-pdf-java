/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class FileSizeRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private FileSizeRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * The comparison type, accepts Greater, Equal, Less than
     */
    @SpeakeasyMetadata("multipartForm:name=comparator")
    private FileSizeRequestComparator comparator;

    /**
     * Size of the file in bytes
     */
    @SpeakeasyMetadata("multipartForm:name=fileSize")
    private Long fileSize;

    @JsonCreator
    public FileSizeRequest(
            @Nullable FileSizeRequestFileInput fileInput,
            @Nullable String fileId,
            @Nonnull FileSizeRequestComparator comparator,
            @Nullable Long fileSize) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.comparator = Optional.ofNullable(comparator)
            .orElseThrow(() -> new IllegalArgumentException("comparator cannot be null"));
        this.fileSize = Optional.ofNullable(fileSize)
            .orElse(Builder._SINGLETON_VALUE_FileSize.value());
    }
    
    public FileSizeRequest(
            @Nonnull FileSizeRequestComparator comparator) {
        this(null, null, comparator,
            null);
    }

    public Optional<FileSizeRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * The comparison type, accepts Greater, Equal, Less than
     */
    public FileSizeRequestComparator comparator() {
        return this.comparator;
    }

    /**
     * Size of the file in bytes
     */
    public Optional<Long> fileSize() {
        return Optional.ofNullable(this.fileSize);
    }

    public static Builder builder() {
        return new Builder();
    }


    public FileSizeRequest withFileInput(@Nullable FileSizeRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public FileSizeRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * The comparison type, accepts Greater, Equal, Less than
     */
    public FileSizeRequest withComparator(@Nonnull FileSizeRequestComparator comparator) {
        this.comparator = Utils.checkNotNull(comparator, "comparator");
        return this;
    }


    /**
     * Size of the file in bytes
     */
    public FileSizeRequest withFileSize(@Nullable Long fileSize) {
        this.fileSize = fileSize;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FileSizeRequest other = (FileSizeRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.comparator, other.comparator) &&
            Utils.enhancedDeepEquals(this.fileSize, other.fileSize);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, comparator,
            fileSize);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FileSizeRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "comparator", comparator,
                "fileSize", fileSize);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private FileSizeRequestFileInput fileInput;

        private String fileId;

        private FileSizeRequestComparator comparator;

        private Long fileSize;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable FileSizeRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * The comparison type, accepts Greater, Equal, Less than
         */
        public Builder comparator(@Nonnull FileSizeRequestComparator comparator) {
            this.comparator = Utils.checkNotNull(comparator, "comparator");
            return this;
        }

        /**
         * Size of the file in bytes
         */
        public Builder fileSize(@Nullable Long fileSize) {
            this.fileSize = fileSize;
            return this;
        }

        public FileSizeRequest build() {
            return new FileSizeRequest(
                fileInput, fileId, comparator,
                fileSize);
        }


        private static final LazySingletonValue<Long> _SINGLETON_VALUE_FileSize =
                new LazySingletonValue<>(
                        "fileSize",
                        "0",
                        new TypeReference<Long>() {});
    }
}
