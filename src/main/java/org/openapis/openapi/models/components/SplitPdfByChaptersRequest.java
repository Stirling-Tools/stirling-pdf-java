/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class SplitPdfByChaptersRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private SplitPdfByChaptersRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * Whether to include Metadata or not
     */
    @SpeakeasyMetadata("multipartForm:name=includeMetadata")
    private Boolean includeMetadata;

    /**
     * Whether to allow duplicates or not
     */
    @SpeakeasyMetadata("multipartForm:name=allowDuplicates")
    private Boolean allowDuplicates;

    /**
     * Maximum bookmark level required
     */
    @SpeakeasyMetadata("multipartForm:name=bookmarkLevel")
    private Integer bookmarkLevel;

    @JsonCreator
    public SplitPdfByChaptersRequest(
            @Nullable SplitPdfByChaptersRequestFileInput fileInput,
            @Nullable String fileId,
            @Nullable Boolean includeMetadata,
            @Nullable Boolean allowDuplicates,
            @Nullable Integer bookmarkLevel) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.includeMetadata = Optional.ofNullable(includeMetadata)
            .orElse(Builder._SINGLETON_VALUE_IncludeMetadata.value());
        this.allowDuplicates = Optional.ofNullable(allowDuplicates)
            .orElse(Builder._SINGLETON_VALUE_AllowDuplicates.value());
        this.bookmarkLevel = Optional.ofNullable(bookmarkLevel)
            .orElse(Builder._SINGLETON_VALUE_BookmarkLevel.value());
    }
    
    public SplitPdfByChaptersRequest() {
        this(null, null, null,
            null, null);
    }

    public Optional<SplitPdfByChaptersRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * Whether to include Metadata or not
     */
    public Optional<Boolean> includeMetadata() {
        return Optional.ofNullable(this.includeMetadata);
    }

    /**
     * Whether to allow duplicates or not
     */
    public Optional<Boolean> allowDuplicates() {
        return Optional.ofNullable(this.allowDuplicates);
    }

    /**
     * Maximum bookmark level required
     */
    public Optional<Integer> bookmarkLevel() {
        return Optional.ofNullable(this.bookmarkLevel);
    }

    public static Builder builder() {
        return new Builder();
    }


    public SplitPdfByChaptersRequest withFileInput(@Nullable SplitPdfByChaptersRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public SplitPdfByChaptersRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * Whether to include Metadata or not
     */
    public SplitPdfByChaptersRequest withIncludeMetadata(@Nullable Boolean includeMetadata) {
        this.includeMetadata = includeMetadata;
        return this;
    }


    /**
     * Whether to allow duplicates or not
     */
    public SplitPdfByChaptersRequest withAllowDuplicates(@Nullable Boolean allowDuplicates) {
        this.allowDuplicates = allowDuplicates;
        return this;
    }


    /**
     * Maximum bookmark level required
     */
    public SplitPdfByChaptersRequest withBookmarkLevel(@Nullable Integer bookmarkLevel) {
        this.bookmarkLevel = bookmarkLevel;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SplitPdfByChaptersRequest other = (SplitPdfByChaptersRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.includeMetadata, other.includeMetadata) &&
            Utils.enhancedDeepEquals(this.allowDuplicates, other.allowDuplicates) &&
            Utils.enhancedDeepEquals(this.bookmarkLevel, other.bookmarkLevel);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, includeMetadata,
            allowDuplicates, bookmarkLevel);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SplitPdfByChaptersRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "includeMetadata", includeMetadata,
                "allowDuplicates", allowDuplicates,
                "bookmarkLevel", bookmarkLevel);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private SplitPdfByChaptersRequestFileInput fileInput;

        private String fileId;

        private Boolean includeMetadata;

        private Boolean allowDuplicates;

        private Integer bookmarkLevel;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable SplitPdfByChaptersRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * Whether to include Metadata or not
         */
        public Builder includeMetadata(@Nullable Boolean includeMetadata) {
            this.includeMetadata = includeMetadata;
            return this;
        }

        /**
         * Whether to allow duplicates or not
         */
        public Builder allowDuplicates(@Nullable Boolean allowDuplicates) {
            this.allowDuplicates = allowDuplicates;
            return this;
        }

        /**
         * Maximum bookmark level required
         */
        public Builder bookmarkLevel(@Nullable Integer bookmarkLevel) {
            this.bookmarkLevel = bookmarkLevel;
            return this;
        }

        public SplitPdfByChaptersRequest build() {
            return new SplitPdfByChaptersRequest(
                fileInput, fileId, includeMetadata,
                allowDuplicates, bookmarkLevel);
        }


        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_IncludeMetadata =
                new LazySingletonValue<>(
                        "includeMetadata",
                        "true",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_AllowDuplicates =
                new LazySingletonValue<>(
                        "allowDuplicates",
                        "true",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<Integer> _SINGLETON_VALUE_BookmarkLevel =
                new LazySingletonValue<>(
                        "bookmarkLevel",
                        "2",
                        new TypeReference<Integer>() {});
    }
}
