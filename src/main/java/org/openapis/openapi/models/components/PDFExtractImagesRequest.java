/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class PDFExtractImagesRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private PDFExtractImagesRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * The output image format e.g., 'png', 'jpeg', or 'gif'
     */
    @SpeakeasyMetadata("multipartForm:name=format")
    private Format format;

    /**
     * Boolean to enable/disable the saving of duplicate images, true to enable duplicates
     */
    @SpeakeasyMetadata("multipartForm:name=allowDuplicates")
    private Boolean allowDuplicates;

    @JsonCreator
    public PDFExtractImagesRequest(
            @Nullable PDFExtractImagesRequestFileInput fileInput,
            @Nullable String fileId,
            @Nullable Format format,
            @Nullable Boolean allowDuplicates) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.format = Optional.ofNullable(format)
            .orElse(Builder._SINGLETON_VALUE_Format.value());
        this.allowDuplicates = Optional.ofNullable(allowDuplicates)
            .orElse(Builder._SINGLETON_VALUE_AllowDuplicates.value());
    }
    
    public PDFExtractImagesRequest() {
        this(null, null, null,
            null);
    }

    public Optional<PDFExtractImagesRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * The output image format e.g., 'png', 'jpeg', or 'gif'
     */
    public Optional<Format> format() {
        return Optional.ofNullable(this.format);
    }

    /**
     * Boolean to enable/disable the saving of duplicate images, true to enable duplicates
     */
    public Optional<Boolean> allowDuplicates() {
        return Optional.ofNullable(this.allowDuplicates);
    }

    public static Builder builder() {
        return new Builder();
    }


    public PDFExtractImagesRequest withFileInput(@Nullable PDFExtractImagesRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public PDFExtractImagesRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * The output image format e.g., 'png', 'jpeg', or 'gif'
     */
    public PDFExtractImagesRequest withFormat(@Nullable Format format) {
        this.format = format;
        return this;
    }


    /**
     * Boolean to enable/disable the saving of duplicate images, true to enable duplicates
     */
    public PDFExtractImagesRequest withAllowDuplicates(@Nullable Boolean allowDuplicates) {
        this.allowDuplicates = allowDuplicates;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PDFExtractImagesRequest other = (PDFExtractImagesRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.format, other.format) &&
            Utils.enhancedDeepEquals(this.allowDuplicates, other.allowDuplicates);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, format,
            allowDuplicates);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PDFExtractImagesRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "format", format,
                "allowDuplicates", allowDuplicates);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private PDFExtractImagesRequestFileInput fileInput;

        private String fileId;

        private Format format;

        private Boolean allowDuplicates;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable PDFExtractImagesRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * The output image format e.g., 'png', 'jpeg', or 'gif'
         */
        public Builder format(@Nullable Format format) {
            this.format = format;
            return this;
        }

        /**
         * Boolean to enable/disable the saving of duplicate images, true to enable duplicates
         */
        public Builder allowDuplicates(@Nullable Boolean allowDuplicates) {
            this.allowDuplicates = allowDuplicates;
            return this;
        }

        public PDFExtractImagesRequest build() {
            return new PDFExtractImagesRequest(
                fileInput, fileId, format,
                allowDuplicates);
        }


        private static final LazySingletonValue<Format> _SINGLETON_VALUE_Format =
                new LazySingletonValue<>(
                        "format",
                        "\"png\"",
                        new TypeReference<Format>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_AllowDuplicates =
                new LazySingletonValue<>(
                        "allowDuplicates",
                        "false",
                        new TypeReference<Boolean>() {});
    }
}
