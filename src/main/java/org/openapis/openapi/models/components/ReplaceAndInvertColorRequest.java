/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class ReplaceAndInvertColorRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private ReplaceAndInvertColorRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * Replace and Invert color options of a pdf.
     */
    @SpeakeasyMetadata("multipartForm:name=replaceAndInvertOption")
    private ReplaceAndInvertOption replaceAndInvertOption;

    /**
     * If HIGH_CONTRAST_COLOR option selected, then pick the default color option for text and background.
     */
    @SpeakeasyMetadata("multipartForm:name=highContrastColorCombination")
    private HighContrastColorCombination highContrastColorCombination;

    /**
     * If CUSTOM_COLOR option selected, then pick the custom color for background. Expected color value should be 24bit decimal value of a color
     */
    @SpeakeasyMetadata("multipartForm:name=backGroundColor")
    private String backGroundColor;

    /**
     * If CUSTOM_COLOR option selected, then pick the custom color for text. Expected color value should be 24bit decimal value of a color
     */
    @SpeakeasyMetadata("multipartForm:name=textColor")
    private String textColor;

    @JsonCreator
    public ReplaceAndInvertColorRequest(
            @Nullable ReplaceAndInvertColorRequestFileInput fileInput,
            @Nullable String fileId,
            @Nullable ReplaceAndInvertOption replaceAndInvertOption,
            @Nullable HighContrastColorCombination highContrastColorCombination,
            @Nullable String backGroundColor,
            @Nullable String textColor) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.replaceAndInvertOption = Optional.ofNullable(replaceAndInvertOption)
            .orElse(Builder._SINGLETON_VALUE_ReplaceAndInvertOption.value());
        this.highContrastColorCombination = Optional.ofNullable(highContrastColorCombination)
            .orElse(Builder._SINGLETON_VALUE_HighContrastColorCombination.value());
        this.backGroundColor = backGroundColor;
        this.textColor = textColor;
    }
    
    public ReplaceAndInvertColorRequest() {
        this(null, null, null,
            null, null, null);
    }

    public Optional<ReplaceAndInvertColorRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * Replace and Invert color options of a pdf.
     */
    public Optional<ReplaceAndInvertOption> replaceAndInvertOption() {
        return Optional.ofNullable(this.replaceAndInvertOption);
    }

    /**
     * If HIGH_CONTRAST_COLOR option selected, then pick the default color option for text and background.
     */
    public Optional<HighContrastColorCombination> highContrastColorCombination() {
        return Optional.ofNullable(this.highContrastColorCombination);
    }

    /**
     * If CUSTOM_COLOR option selected, then pick the custom color for background. Expected color value should be 24bit decimal value of a color
     */
    public Optional<String> backGroundColor() {
        return Optional.ofNullable(this.backGroundColor);
    }

    /**
     * If CUSTOM_COLOR option selected, then pick the custom color for text. Expected color value should be 24bit decimal value of a color
     */
    public Optional<String> textColor() {
        return Optional.ofNullable(this.textColor);
    }

    public static Builder builder() {
        return new Builder();
    }


    public ReplaceAndInvertColorRequest withFileInput(@Nullable ReplaceAndInvertColorRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public ReplaceAndInvertColorRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * Replace and Invert color options of a pdf.
     */
    public ReplaceAndInvertColorRequest withReplaceAndInvertOption(@Nullable ReplaceAndInvertOption replaceAndInvertOption) {
        this.replaceAndInvertOption = replaceAndInvertOption;
        return this;
    }


    /**
     * If HIGH_CONTRAST_COLOR option selected, then pick the default color option for text and background.
     */
    public ReplaceAndInvertColorRequest withHighContrastColorCombination(@Nullable HighContrastColorCombination highContrastColorCombination) {
        this.highContrastColorCombination = highContrastColorCombination;
        return this;
    }


    /**
     * If CUSTOM_COLOR option selected, then pick the custom color for background. Expected color value should be 24bit decimal value of a color
     */
    public ReplaceAndInvertColorRequest withBackGroundColor(@Nullable String backGroundColor) {
        this.backGroundColor = backGroundColor;
        return this;
    }


    /**
     * If CUSTOM_COLOR option selected, then pick the custom color for text. Expected color value should be 24bit decimal value of a color
     */
    public ReplaceAndInvertColorRequest withTextColor(@Nullable String textColor) {
        this.textColor = textColor;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReplaceAndInvertColorRequest other = (ReplaceAndInvertColorRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.replaceAndInvertOption, other.replaceAndInvertOption) &&
            Utils.enhancedDeepEquals(this.highContrastColorCombination, other.highContrastColorCombination) &&
            Utils.enhancedDeepEquals(this.backGroundColor, other.backGroundColor) &&
            Utils.enhancedDeepEquals(this.textColor, other.textColor);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, replaceAndInvertOption,
            highContrastColorCombination, backGroundColor, textColor);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReplaceAndInvertColorRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "replaceAndInvertOption", replaceAndInvertOption,
                "highContrastColorCombination", highContrastColorCombination,
                "backGroundColor", backGroundColor,
                "textColor", textColor);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private ReplaceAndInvertColorRequestFileInput fileInput;

        private String fileId;

        private ReplaceAndInvertOption replaceAndInvertOption;

        private HighContrastColorCombination highContrastColorCombination;

        private String backGroundColor;

        private String textColor;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable ReplaceAndInvertColorRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * Replace and Invert color options of a pdf.
         */
        public Builder replaceAndInvertOption(@Nullable ReplaceAndInvertOption replaceAndInvertOption) {
            this.replaceAndInvertOption = replaceAndInvertOption;
            return this;
        }

        /**
         * If HIGH_CONTRAST_COLOR option selected, then pick the default color option for text and background.
         */
        public Builder highContrastColorCombination(@Nullable HighContrastColorCombination highContrastColorCombination) {
            this.highContrastColorCombination = highContrastColorCombination;
            return this;
        }

        /**
         * If CUSTOM_COLOR option selected, then pick the custom color for background. Expected color value should be 24bit decimal value of a color
         */
        public Builder backGroundColor(@Nullable String backGroundColor) {
            this.backGroundColor = backGroundColor;
            return this;
        }

        /**
         * If CUSTOM_COLOR option selected, then pick the custom color for text. Expected color value should be 24bit decimal value of a color
         */
        public Builder textColor(@Nullable String textColor) {
            this.textColor = textColor;
            return this;
        }

        public ReplaceAndInvertColorRequest build() {
            return new ReplaceAndInvertColorRequest(
                fileInput, fileId, replaceAndInvertOption,
                highContrastColorCombination, backGroundColor, textColor);
        }


        private static final LazySingletonValue<ReplaceAndInvertOption> _SINGLETON_VALUE_ReplaceAndInvertOption =
                new LazySingletonValue<>(
                        "replaceAndInvertOption",
                        "\"HIGH_CONTRAST_COLOR\"",
                        new TypeReference<ReplaceAndInvertOption>() {});

        private static final LazySingletonValue<HighContrastColorCombination> _SINGLETON_VALUE_HighContrastColorCombination =
                new LazySingletonValue<>(
                        "highContrastColorCombination",
                        "\"WHITE_TEXT_ON_BLACK\"",
                        new TypeReference<HighContrastColorCombination>() {});
    }
}
