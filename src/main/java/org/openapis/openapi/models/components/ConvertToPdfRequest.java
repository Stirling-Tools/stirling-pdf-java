/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class ConvertToPdfRequest {
    /**
     * The input images to be converted to a PDF file
     */
    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private List<ConvertToPdfRequestFileInput> fileInput;

    /**
     * Option to determine how the image will fit onto the page
     */
    @SpeakeasyMetadata("multipartForm:name=fitOption")
    private FitOption fitOption;

    /**
     * The color type of the output image(s)
     */
    @SpeakeasyMetadata("multipartForm:name=colorType")
    private ConvertToPdfRequestColorType colorType;

    /**
     * Whether to automatically rotate the images to better fit the PDF page
     */
    @SpeakeasyMetadata("multipartForm:name=autoRotate")
    private Boolean autoRotate;

    @JsonCreator
    public ConvertToPdfRequest(
            @Nonnull List<ConvertToPdfRequestFileInput> fileInput,
            @Nullable FitOption fitOption,
            @Nullable ConvertToPdfRequestColorType colorType,
            @Nullable Boolean autoRotate) {
        this.fileInput = Optional.ofNullable(fileInput)
            .orElseThrow(() -> new IllegalArgumentException("fileInput cannot be null"));
        this.fitOption = Optional.ofNullable(fitOption)
            .orElse(Builder._SINGLETON_VALUE_FitOption.value());
        this.colorType = Optional.ofNullable(colorType)
            .orElse(Builder._SINGLETON_VALUE_ColorType.value());
        this.autoRotate = Optional.ofNullable(autoRotate)
            .orElse(Builder._SINGLETON_VALUE_AutoRotate.value());
    }
    
    public ConvertToPdfRequest(
            @Nonnull List<ConvertToPdfRequestFileInput> fileInput) {
        this(fileInput, null, null,
            null);
    }

    /**
     * The input images to be converted to a PDF file
     */
    public List<ConvertToPdfRequestFileInput> fileInput() {
        return this.fileInput;
    }

    /**
     * Option to determine how the image will fit onto the page
     */
    public Optional<FitOption> fitOption() {
        return Optional.ofNullable(this.fitOption);
    }

    /**
     * The color type of the output image(s)
     */
    public Optional<ConvertToPdfRequestColorType> colorType() {
        return Optional.ofNullable(this.colorType);
    }

    /**
     * Whether to automatically rotate the images to better fit the PDF page
     */
    public Optional<Boolean> autoRotate() {
        return Optional.ofNullable(this.autoRotate);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The input images to be converted to a PDF file
     */
    public ConvertToPdfRequest withFileInput(@Nonnull List<ConvertToPdfRequestFileInput> fileInput) {
        this.fileInput = Utils.checkNotNull(fileInput, "fileInput");
        return this;
    }


    /**
     * Option to determine how the image will fit onto the page
     */
    public ConvertToPdfRequest withFitOption(@Nullable FitOption fitOption) {
        this.fitOption = fitOption;
        return this;
    }


    /**
     * The color type of the output image(s)
     */
    public ConvertToPdfRequest withColorType(@Nullable ConvertToPdfRequestColorType colorType) {
        this.colorType = colorType;
        return this;
    }


    /**
     * Whether to automatically rotate the images to better fit the PDF page
     */
    public ConvertToPdfRequest withAutoRotate(@Nullable Boolean autoRotate) {
        this.autoRotate = autoRotate;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConvertToPdfRequest other = (ConvertToPdfRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fitOption, other.fitOption) &&
            Utils.enhancedDeepEquals(this.colorType, other.colorType) &&
            Utils.enhancedDeepEquals(this.autoRotate, other.autoRotate);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fitOption, colorType,
            autoRotate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConvertToPdfRequest.class,
                "fileInput", fileInput,
                "fitOption", fitOption,
                "colorType", colorType,
                "autoRotate", autoRotate);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private List<ConvertToPdfRequestFileInput> fileInput;

        private FitOption fitOption;

        private ConvertToPdfRequestColorType colorType;

        private Boolean autoRotate;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The input images to be converted to a PDF file
         */
        public Builder fileInput(@Nonnull List<ConvertToPdfRequestFileInput> fileInput) {
            this.fileInput = Utils.checkNotNull(fileInput, "fileInput");
            return this;
        }

        /**
         * Option to determine how the image will fit onto the page
         */
        public Builder fitOption(@Nullable FitOption fitOption) {
            this.fitOption = fitOption;
            return this;
        }

        /**
         * The color type of the output image(s)
         */
        public Builder colorType(@Nullable ConvertToPdfRequestColorType colorType) {
            this.colorType = colorType;
            return this;
        }

        /**
         * Whether to automatically rotate the images to better fit the PDF page
         */
        public Builder autoRotate(@Nullable Boolean autoRotate) {
            this.autoRotate = autoRotate;
            return this;
        }

        public ConvertToPdfRequest build() {
            return new ConvertToPdfRequest(
                fileInput, fitOption, colorType,
                autoRotate);
        }


        private static final LazySingletonValue<FitOption> _SINGLETON_VALUE_FitOption =
                new LazySingletonValue<>(
                        "fitOption",
                        "\"fillPage\"",
                        new TypeReference<FitOption>() {});

        private static final LazySingletonValue<ConvertToPdfRequestColorType> _SINGLETON_VALUE_ColorType =
                new LazySingletonValue<>(
                        "colorType",
                        "\"color\"",
                        new TypeReference<ConvertToPdfRequestColorType>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_AutoRotate =
                new LazySingletonValue<>(
                        "autoRotate",
                        "false",
                        new TypeReference<Boolean>() {});
    }
}
