/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class AddPasswordRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private AddPasswordRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * The owner password to be added to the PDF file (Restricts what can be done with the document once it is opened)
     */
    @SpeakeasyMetadata("multipartForm:name=ownerPassword")
    private String ownerPassword;

    /**
     * The password to be added to the PDF file (Restricts the opening of the document itself.)
     */
    @SpeakeasyMetadata("multipartForm:name=password")
    private String password;

    /**
     * The length of the encryption key
     */
    @SpeakeasyMetadata("multipartForm:name=keyLength")
    private KeyLength keyLength;

    /**
     * Whether document assembly is prevented
     */
    @SpeakeasyMetadata("multipartForm:name=preventAssembly")
    private Boolean preventAssembly;

    /**
     * Whether content extraction is prevented
     */
    @SpeakeasyMetadata("multipartForm:name=preventExtractContent")
    private Boolean preventExtractContent;

    /**
     * Whether content extraction for accessibility is prevented
     */
    @SpeakeasyMetadata("multipartForm:name=preventExtractForAccessibility")
    private Boolean preventExtractForAccessibility;

    /**
     * Whether form filling is prevented
     */
    @SpeakeasyMetadata("multipartForm:name=preventFillInForm")
    private Boolean preventFillInForm;

    /**
     * Whether document modification is prevented
     */
    @SpeakeasyMetadata("multipartForm:name=preventModify")
    private Boolean preventModify;

    /**
     * Whether modification of annotations is prevented
     */
    @SpeakeasyMetadata("multipartForm:name=preventModifyAnnotations")
    private Boolean preventModifyAnnotations;

    /**
     * Whether printing of the document is prevented
     */
    @SpeakeasyMetadata("multipartForm:name=preventPrinting")
    private Boolean preventPrinting;

    /**
     * Whether faithful printing is prevented
     */
    @SpeakeasyMetadata("multipartForm:name=preventPrintingFaithful")
    private Boolean preventPrintingFaithful;

    @JsonCreator
    public AddPasswordRequest(
            @Nullable AddPasswordRequestFileInput fileInput,
            @Nullable String fileId,
            @Nullable String ownerPassword,
            @Nullable String password,
            @Nonnull KeyLength keyLength,
            @Nullable Boolean preventAssembly,
            @Nullable Boolean preventExtractContent,
            @Nullable Boolean preventExtractForAccessibility,
            @Nullable Boolean preventFillInForm,
            @Nullable Boolean preventModify,
            @Nullable Boolean preventModifyAnnotations,
            @Nullable Boolean preventPrinting,
            @Nullable Boolean preventPrintingFaithful) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.ownerPassword = ownerPassword;
        this.password = password;
        this.keyLength = Optional.ofNullable(keyLength)
            .orElseThrow(() -> new IllegalArgumentException("keyLength cannot be null"));
        this.preventAssembly = Optional.ofNullable(preventAssembly)
            .orElse(Builder._SINGLETON_VALUE_PreventAssembly.value());
        this.preventExtractContent = Optional.ofNullable(preventExtractContent)
            .orElse(Builder._SINGLETON_VALUE_PreventExtractContent.value());
        this.preventExtractForAccessibility = Optional.ofNullable(preventExtractForAccessibility)
            .orElse(Builder._SINGLETON_VALUE_PreventExtractForAccessibility.value());
        this.preventFillInForm = Optional.ofNullable(preventFillInForm)
            .orElse(Builder._SINGLETON_VALUE_PreventFillInForm.value());
        this.preventModify = Optional.ofNullable(preventModify)
            .orElse(Builder._SINGLETON_VALUE_PreventModify.value());
        this.preventModifyAnnotations = Optional.ofNullable(preventModifyAnnotations)
            .orElse(Builder._SINGLETON_VALUE_PreventModifyAnnotations.value());
        this.preventPrinting = Optional.ofNullable(preventPrinting)
            .orElse(Builder._SINGLETON_VALUE_PreventPrinting.value());
        this.preventPrintingFaithful = Optional.ofNullable(preventPrintingFaithful)
            .orElse(Builder._SINGLETON_VALUE_PreventPrintingFaithful.value());
    }
    
    public AddPasswordRequest(
            @Nonnull KeyLength keyLength) {
        this(null, null, null,
            null, keyLength, null,
            null, null, null,
            null, null, null,
            null);
    }

    public Optional<AddPasswordRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * The owner password to be added to the PDF file (Restricts what can be done with the document once it is opened)
     */
    public Optional<String> ownerPassword() {
        return Optional.ofNullable(this.ownerPassword);
    }

    /**
     * The password to be added to the PDF file (Restricts the opening of the document itself.)
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The length of the encryption key
     */
    public KeyLength keyLength() {
        return this.keyLength;
    }

    /**
     * Whether document assembly is prevented
     */
    public Optional<Boolean> preventAssembly() {
        return Optional.ofNullable(this.preventAssembly);
    }

    /**
     * Whether content extraction is prevented
     */
    public Optional<Boolean> preventExtractContent() {
        return Optional.ofNullable(this.preventExtractContent);
    }

    /**
     * Whether content extraction for accessibility is prevented
     */
    public Optional<Boolean> preventExtractForAccessibility() {
        return Optional.ofNullable(this.preventExtractForAccessibility);
    }

    /**
     * Whether form filling is prevented
     */
    public Optional<Boolean> preventFillInForm() {
        return Optional.ofNullable(this.preventFillInForm);
    }

    /**
     * Whether document modification is prevented
     */
    public Optional<Boolean> preventModify() {
        return Optional.ofNullable(this.preventModify);
    }

    /**
     * Whether modification of annotations is prevented
     */
    public Optional<Boolean> preventModifyAnnotations() {
        return Optional.ofNullable(this.preventModifyAnnotations);
    }

    /**
     * Whether printing of the document is prevented
     */
    public Optional<Boolean> preventPrinting() {
        return Optional.ofNullable(this.preventPrinting);
    }

    /**
     * Whether faithful printing is prevented
     */
    public Optional<Boolean> preventPrintingFaithful() {
        return Optional.ofNullable(this.preventPrintingFaithful);
    }

    public static Builder builder() {
        return new Builder();
    }


    public AddPasswordRequest withFileInput(@Nullable AddPasswordRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public AddPasswordRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * The owner password to be added to the PDF file (Restricts what can be done with the document once it is opened)
     */
    public AddPasswordRequest withOwnerPassword(@Nullable String ownerPassword) {
        this.ownerPassword = ownerPassword;
        return this;
    }


    /**
     * The password to be added to the PDF file (Restricts the opening of the document itself.)
     */
    public AddPasswordRequest withPassword(@Nullable String password) {
        this.password = password;
        return this;
    }


    /**
     * The length of the encryption key
     */
    public AddPasswordRequest withKeyLength(@Nonnull KeyLength keyLength) {
        this.keyLength = Utils.checkNotNull(keyLength, "keyLength");
        return this;
    }


    /**
     * Whether document assembly is prevented
     */
    public AddPasswordRequest withPreventAssembly(@Nullable Boolean preventAssembly) {
        this.preventAssembly = preventAssembly;
        return this;
    }


    /**
     * Whether content extraction is prevented
     */
    public AddPasswordRequest withPreventExtractContent(@Nullable Boolean preventExtractContent) {
        this.preventExtractContent = preventExtractContent;
        return this;
    }


    /**
     * Whether content extraction for accessibility is prevented
     */
    public AddPasswordRequest withPreventExtractForAccessibility(@Nullable Boolean preventExtractForAccessibility) {
        this.preventExtractForAccessibility = preventExtractForAccessibility;
        return this;
    }


    /**
     * Whether form filling is prevented
     */
    public AddPasswordRequest withPreventFillInForm(@Nullable Boolean preventFillInForm) {
        this.preventFillInForm = preventFillInForm;
        return this;
    }


    /**
     * Whether document modification is prevented
     */
    public AddPasswordRequest withPreventModify(@Nullable Boolean preventModify) {
        this.preventModify = preventModify;
        return this;
    }


    /**
     * Whether modification of annotations is prevented
     */
    public AddPasswordRequest withPreventModifyAnnotations(@Nullable Boolean preventModifyAnnotations) {
        this.preventModifyAnnotations = preventModifyAnnotations;
        return this;
    }


    /**
     * Whether printing of the document is prevented
     */
    public AddPasswordRequest withPreventPrinting(@Nullable Boolean preventPrinting) {
        this.preventPrinting = preventPrinting;
        return this;
    }


    /**
     * Whether faithful printing is prevented
     */
    public AddPasswordRequest withPreventPrintingFaithful(@Nullable Boolean preventPrintingFaithful) {
        this.preventPrintingFaithful = preventPrintingFaithful;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddPasswordRequest other = (AddPasswordRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.ownerPassword, other.ownerPassword) &&
            Utils.enhancedDeepEquals(this.password, other.password) &&
            Utils.enhancedDeepEquals(this.keyLength, other.keyLength) &&
            Utils.enhancedDeepEquals(this.preventAssembly, other.preventAssembly) &&
            Utils.enhancedDeepEquals(this.preventExtractContent, other.preventExtractContent) &&
            Utils.enhancedDeepEquals(this.preventExtractForAccessibility, other.preventExtractForAccessibility) &&
            Utils.enhancedDeepEquals(this.preventFillInForm, other.preventFillInForm) &&
            Utils.enhancedDeepEquals(this.preventModify, other.preventModify) &&
            Utils.enhancedDeepEquals(this.preventModifyAnnotations, other.preventModifyAnnotations) &&
            Utils.enhancedDeepEquals(this.preventPrinting, other.preventPrinting) &&
            Utils.enhancedDeepEquals(this.preventPrintingFaithful, other.preventPrintingFaithful);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, ownerPassword,
            password, keyLength, preventAssembly,
            preventExtractContent, preventExtractForAccessibility, preventFillInForm,
            preventModify, preventModifyAnnotations, preventPrinting,
            preventPrintingFaithful);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AddPasswordRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "ownerPassword", ownerPassword,
                "password", password,
                "keyLength", keyLength,
                "preventAssembly", preventAssembly,
                "preventExtractContent", preventExtractContent,
                "preventExtractForAccessibility", preventExtractForAccessibility,
                "preventFillInForm", preventFillInForm,
                "preventModify", preventModify,
                "preventModifyAnnotations", preventModifyAnnotations,
                "preventPrinting", preventPrinting,
                "preventPrintingFaithful", preventPrintingFaithful);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private AddPasswordRequestFileInput fileInput;

        private String fileId;

        private String ownerPassword;

        private String password;

        private KeyLength keyLength;

        private Boolean preventAssembly;

        private Boolean preventExtractContent;

        private Boolean preventExtractForAccessibility;

        private Boolean preventFillInForm;

        private Boolean preventModify;

        private Boolean preventModifyAnnotations;

        private Boolean preventPrinting;

        private Boolean preventPrintingFaithful;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable AddPasswordRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * The owner password to be added to the PDF file (Restricts what can be done with the document once it is opened)
         */
        public Builder ownerPassword(@Nullable String ownerPassword) {
            this.ownerPassword = ownerPassword;
            return this;
        }

        /**
         * The password to be added to the PDF file (Restricts the opening of the document itself.)
         */
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }

        /**
         * The length of the encryption key
         */
        public Builder keyLength(@Nonnull KeyLength keyLength) {
            this.keyLength = Utils.checkNotNull(keyLength, "keyLength");
            return this;
        }

        /**
         * Whether document assembly is prevented
         */
        public Builder preventAssembly(@Nullable Boolean preventAssembly) {
            this.preventAssembly = preventAssembly;
            return this;
        }

        /**
         * Whether content extraction is prevented
         */
        public Builder preventExtractContent(@Nullable Boolean preventExtractContent) {
            this.preventExtractContent = preventExtractContent;
            return this;
        }

        /**
         * Whether content extraction for accessibility is prevented
         */
        public Builder preventExtractForAccessibility(@Nullable Boolean preventExtractForAccessibility) {
            this.preventExtractForAccessibility = preventExtractForAccessibility;
            return this;
        }

        /**
         * Whether form filling is prevented
         */
        public Builder preventFillInForm(@Nullable Boolean preventFillInForm) {
            this.preventFillInForm = preventFillInForm;
            return this;
        }

        /**
         * Whether document modification is prevented
         */
        public Builder preventModify(@Nullable Boolean preventModify) {
            this.preventModify = preventModify;
            return this;
        }

        /**
         * Whether modification of annotations is prevented
         */
        public Builder preventModifyAnnotations(@Nullable Boolean preventModifyAnnotations) {
            this.preventModifyAnnotations = preventModifyAnnotations;
            return this;
        }

        /**
         * Whether printing of the document is prevented
         */
        public Builder preventPrinting(@Nullable Boolean preventPrinting) {
            this.preventPrinting = preventPrinting;
            return this;
        }

        /**
         * Whether faithful printing is prevented
         */
        public Builder preventPrintingFaithful(@Nullable Boolean preventPrintingFaithful) {
            this.preventPrintingFaithful = preventPrintingFaithful;
            return this;
        }

        public AddPasswordRequest build() {
            return new AddPasswordRequest(
                fileInput, fileId, ownerPassword,
                password, keyLength, preventAssembly,
                preventExtractContent, preventExtractForAccessibility, preventFillInForm,
                preventModify, preventModifyAnnotations, preventPrinting,
                preventPrintingFaithful);
        }


        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_PreventAssembly =
                new LazySingletonValue<>(
                        "preventAssembly",
                        "false",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_PreventExtractContent =
                new LazySingletonValue<>(
                        "preventExtractContent",
                        "false",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_PreventExtractForAccessibility =
                new LazySingletonValue<>(
                        "preventExtractForAccessibility",
                        "false",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_PreventFillInForm =
                new LazySingletonValue<>(
                        "preventFillInForm",
                        "false",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_PreventModify =
                new LazySingletonValue<>(
                        "preventModify",
                        "false",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_PreventModifyAnnotations =
                new LazySingletonValue<>(
                        "preventModifyAnnotations",
                        "false",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_PreventPrinting =
                new LazySingletonValue<>(
                        "preventPrinting",
                        "false",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_PreventPrintingFaithful =
                new LazySingletonValue<>(
                        "preventPrintingFaithful",
                        "false",
                        new TypeReference<Boolean>() {});
    }
}
