/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class EmlToPdfRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private EmlToPdfRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * Include email attachments in the PDF output
     */
    @SpeakeasyMetadata("multipartForm:name=includeAttachments")
    private Boolean includeAttachments;

    /**
     * Maximum attachment size in MB to include (default 10MB, range: 1-100)
     */
    @SpeakeasyMetadata("multipartForm:name=maxAttachmentSizeMB")
    private Integer maxAttachmentSizeMB;

    /**
     * Download HTML intermediate file instead of PDF
     */
    @SpeakeasyMetadata("multipartForm:name=downloadHtml")
    private Boolean downloadHtml;

    /**
     * Include CC and BCC recipients in header (if available)
     */
    @SpeakeasyMetadata("multipartForm:name=includeAllRecipients")
    private Boolean includeAllRecipients;

    @JsonCreator
    public EmlToPdfRequest(
            @Nullable EmlToPdfRequestFileInput fileInput,
            @Nullable String fileId,
            @Nullable Boolean includeAttachments,
            @Nullable Integer maxAttachmentSizeMB,
            @Nullable Boolean downloadHtml,
            @Nullable Boolean includeAllRecipients) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.includeAttachments = includeAttachments;
        this.maxAttachmentSizeMB = maxAttachmentSizeMB;
        this.downloadHtml = downloadHtml;
        this.includeAllRecipients = includeAllRecipients;
    }
    
    public EmlToPdfRequest() {
        this(null, null, null,
            null, null, null);
    }

    public Optional<EmlToPdfRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * Include email attachments in the PDF output
     */
    public Optional<Boolean> includeAttachments() {
        return Optional.ofNullable(this.includeAttachments);
    }

    /**
     * Maximum attachment size in MB to include (default 10MB, range: 1-100)
     */
    public Optional<Integer> maxAttachmentSizeMB() {
        return Optional.ofNullable(this.maxAttachmentSizeMB);
    }

    /**
     * Download HTML intermediate file instead of PDF
     */
    public Optional<Boolean> downloadHtml() {
        return Optional.ofNullable(this.downloadHtml);
    }

    /**
     * Include CC and BCC recipients in header (if available)
     */
    public Optional<Boolean> includeAllRecipients() {
        return Optional.ofNullable(this.includeAllRecipients);
    }

    public static Builder builder() {
        return new Builder();
    }


    public EmlToPdfRequest withFileInput(@Nullable EmlToPdfRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public EmlToPdfRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * Include email attachments in the PDF output
     */
    public EmlToPdfRequest withIncludeAttachments(@Nullable Boolean includeAttachments) {
        this.includeAttachments = includeAttachments;
        return this;
    }


    /**
     * Maximum attachment size in MB to include (default 10MB, range: 1-100)
     */
    public EmlToPdfRequest withMaxAttachmentSizeMB(@Nullable Integer maxAttachmentSizeMB) {
        this.maxAttachmentSizeMB = maxAttachmentSizeMB;
        return this;
    }


    /**
     * Download HTML intermediate file instead of PDF
     */
    public EmlToPdfRequest withDownloadHtml(@Nullable Boolean downloadHtml) {
        this.downloadHtml = downloadHtml;
        return this;
    }


    /**
     * Include CC and BCC recipients in header (if available)
     */
    public EmlToPdfRequest withIncludeAllRecipients(@Nullable Boolean includeAllRecipients) {
        this.includeAllRecipients = includeAllRecipients;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmlToPdfRequest other = (EmlToPdfRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.includeAttachments, other.includeAttachments) &&
            Utils.enhancedDeepEquals(this.maxAttachmentSizeMB, other.maxAttachmentSizeMB) &&
            Utils.enhancedDeepEquals(this.downloadHtml, other.downloadHtml) &&
            Utils.enhancedDeepEquals(this.includeAllRecipients, other.includeAllRecipients);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, includeAttachments,
            maxAttachmentSizeMB, downloadHtml, includeAllRecipients);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmlToPdfRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "includeAttachments", includeAttachments,
                "maxAttachmentSizeMB", maxAttachmentSizeMB,
                "downloadHtml", downloadHtml,
                "includeAllRecipients", includeAllRecipients);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private EmlToPdfRequestFileInput fileInput;

        private String fileId;

        private Boolean includeAttachments;

        private Integer maxAttachmentSizeMB;

        private Boolean downloadHtml;

        private Boolean includeAllRecipients;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable EmlToPdfRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * Include email attachments in the PDF output
         */
        public Builder includeAttachments(@Nullable Boolean includeAttachments) {
            this.includeAttachments = includeAttachments;
            return this;
        }

        /**
         * Maximum attachment size in MB to include (default 10MB, range: 1-100)
         */
        public Builder maxAttachmentSizeMB(@Nullable Integer maxAttachmentSizeMB) {
            this.maxAttachmentSizeMB = maxAttachmentSizeMB;
            return this;
        }

        /**
         * Download HTML intermediate file instead of PDF
         */
        public Builder downloadHtml(@Nullable Boolean downloadHtml) {
            this.downloadHtml = downloadHtml;
            return this;
        }

        /**
         * Include CC and BCC recipients in header (if available)
         */
        public Builder includeAllRecipients(@Nullable Boolean includeAllRecipients) {
            this.includeAllRecipients = includeAllRecipients;
            return this;
        }

        public EmlToPdfRequest build() {
            return new EmlToPdfRequest(
                fileInput, fileId, includeAttachments,
                maxAttachmentSizeMB, downloadHtml, includeAllRecipients);
        }

    }
}
