/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class ScannerEffectRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private ScannerEffectRequestFileInput fileInput;

    /**
     * Scan quality preset
     */
    @SpeakeasyMetadata("multipartForm:name=quality")
    private Quality quality;

    /**
     * Rotation preset
     */
    @SpeakeasyMetadata("multipartForm:name=rotation")
    private Rotation rotation;

    /**
     * Colorspace for output image
     */
    @SpeakeasyMetadata("multipartForm:name=colorspace")
    private Colorspace colorspace;

    /**
     * Border thickness in pixels
     */
    @SpeakeasyMetadata("multipartForm:name=border")
    private Integer border;

    /**
     * Base rotation in degrees
     */
    @SpeakeasyMetadata("multipartForm:name=rotate")
    private Integer rotate;

    /**
     * Random rotation variance in degrees
     */
    @SpeakeasyMetadata("multipartForm:name=rotateVariance")
    private Integer rotateVariance;

    /**
     * Brightness multiplier (1.0 = no change)
     */
    @SpeakeasyMetadata("multipartForm:name=brightness")
    private Float brightness;

    /**
     * Contrast multiplier (1.0 = no change)
     */
    @SpeakeasyMetadata("multipartForm:name=contrast")
    private Float contrast;

    /**
     * Blur amount (0 = none, higher = more blur)
     */
    @SpeakeasyMetadata("multipartForm:name=blur")
    private Float blur;

    /**
     * Noise amount (0 = none, higher = more noise)
     */
    @SpeakeasyMetadata("multipartForm:name=noise")
    private Float noise;

    /**
     * Simulate yellowed paper
     */
    @SpeakeasyMetadata("multipartForm:name=yellowish")
    private Boolean yellowish;

    /**
     * Rendering resolution in DPI
     */
    @SpeakeasyMetadata("multipartForm:name=resolution")
    private Integer resolution;

    /**
     * Whether advanced settings are enabled
     */
    @SpeakeasyMetadata("multipartForm:name=advancedEnabled")
    private Boolean advancedEnabled;


    @SpeakeasyMetadata("multipartForm:name=qualityValue")
    private Integer qualityValue;


    @SpeakeasyMetadata("multipartForm:name=rotationValue")
    private Integer rotationValue;

    @JsonCreator
    public ScannerEffectRequest(
            @Nonnull ScannerEffectRequestFileInput fileInput,
            @Nonnull Quality quality,
            @Nonnull Rotation rotation,
            @Nullable Colorspace colorspace,
            @Nullable Integer border,
            @Nullable Integer rotate,
            @Nullable Integer rotateVariance,
            @Nullable Float brightness,
            @Nullable Float contrast,
            @Nullable Float blur,
            @Nullable Float noise,
            @Nullable Boolean yellowish,
            @Nullable Integer resolution,
            @Nullable Boolean advancedEnabled,
            @Nullable Integer qualityValue,
            @Nullable Integer rotationValue) {
        this.fileInput = Optional.ofNullable(fileInput)
            .orElseThrow(() -> new IllegalArgumentException("fileInput cannot be null"));
        this.quality = Optional.ofNullable(quality)
            .orElseThrow(() -> new IllegalArgumentException("quality cannot be null"));
        this.rotation = Optional.ofNullable(rotation)
            .orElseThrow(() -> new IllegalArgumentException("rotation cannot be null"));
        this.colorspace = colorspace;
        this.border = border;
        this.rotate = rotate;
        this.rotateVariance = rotateVariance;
        this.brightness = brightness;
        this.contrast = contrast;
        this.blur = blur;
        this.noise = noise;
        this.yellowish = yellowish;
        this.resolution = resolution;
        this.advancedEnabled = advancedEnabled;
        this.qualityValue = qualityValue;
        this.rotationValue = rotationValue;
    }
    
    public ScannerEffectRequest(
            @Nonnull ScannerEffectRequestFileInput fileInput,
            @Nonnull Quality quality,
            @Nonnull Rotation rotation) {
        this(fileInput, quality, rotation,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    public ScannerEffectRequestFileInput fileInput() {
        return this.fileInput;
    }

    /**
     * Scan quality preset
     */
    public Quality quality() {
        return this.quality;
    }

    /**
     * Rotation preset
     */
    public Rotation rotation() {
        return this.rotation;
    }

    /**
     * Colorspace for output image
     */
    public Optional<Colorspace> colorspace() {
        return Optional.ofNullable(this.colorspace);
    }

    /**
     * Border thickness in pixels
     */
    public Optional<Integer> border() {
        return Optional.ofNullable(this.border);
    }

    /**
     * Base rotation in degrees
     */
    public Optional<Integer> rotate() {
        return Optional.ofNullable(this.rotate);
    }

    /**
     * Random rotation variance in degrees
     */
    public Optional<Integer> rotateVariance() {
        return Optional.ofNullable(this.rotateVariance);
    }

    /**
     * Brightness multiplier (1.0 = no change)
     */
    public Optional<Float> brightness() {
        return Optional.ofNullable(this.brightness);
    }

    /**
     * Contrast multiplier (1.0 = no change)
     */
    public Optional<Float> contrast() {
        return Optional.ofNullable(this.contrast);
    }

    /**
     * Blur amount (0 = none, higher = more blur)
     */
    public Optional<Float> blur() {
        return Optional.ofNullable(this.blur);
    }

    /**
     * Noise amount (0 = none, higher = more noise)
     */
    public Optional<Float> noise() {
        return Optional.ofNullable(this.noise);
    }

    /**
     * Simulate yellowed paper
     */
    public Optional<Boolean> yellowish() {
        return Optional.ofNullable(this.yellowish);
    }

    /**
     * Rendering resolution in DPI
     */
    public Optional<Integer> resolution() {
        return Optional.ofNullable(this.resolution);
    }

    /**
     * Whether advanced settings are enabled
     */
    public Optional<Boolean> advancedEnabled() {
        return Optional.ofNullable(this.advancedEnabled);
    }

    public Optional<Integer> qualityValue() {
        return Optional.ofNullable(this.qualityValue);
    }

    public Optional<Integer> rotationValue() {
        return Optional.ofNullable(this.rotationValue);
    }

    public static Builder builder() {
        return new Builder();
    }


    public ScannerEffectRequest withFileInput(@Nonnull ScannerEffectRequestFileInput fileInput) {
        this.fileInput = Utils.checkNotNull(fileInput, "fileInput");
        return this;
    }


    /**
     * Scan quality preset
     */
    public ScannerEffectRequest withQuality(@Nonnull Quality quality) {
        this.quality = Utils.checkNotNull(quality, "quality");
        return this;
    }


    /**
     * Rotation preset
     */
    public ScannerEffectRequest withRotation(@Nonnull Rotation rotation) {
        this.rotation = Utils.checkNotNull(rotation, "rotation");
        return this;
    }


    /**
     * Colorspace for output image
     */
    public ScannerEffectRequest withColorspace(@Nullable Colorspace colorspace) {
        this.colorspace = colorspace;
        return this;
    }


    /**
     * Border thickness in pixels
     */
    public ScannerEffectRequest withBorder(@Nullable Integer border) {
        this.border = border;
        return this;
    }


    /**
     * Base rotation in degrees
     */
    public ScannerEffectRequest withRotate(@Nullable Integer rotate) {
        this.rotate = rotate;
        return this;
    }


    /**
     * Random rotation variance in degrees
     */
    public ScannerEffectRequest withRotateVariance(@Nullable Integer rotateVariance) {
        this.rotateVariance = rotateVariance;
        return this;
    }


    /**
     * Brightness multiplier (1.0 = no change)
     */
    public ScannerEffectRequest withBrightness(@Nullable Float brightness) {
        this.brightness = brightness;
        return this;
    }


    /**
     * Contrast multiplier (1.0 = no change)
     */
    public ScannerEffectRequest withContrast(@Nullable Float contrast) {
        this.contrast = contrast;
        return this;
    }


    /**
     * Blur amount (0 = none, higher = more blur)
     */
    public ScannerEffectRequest withBlur(@Nullable Float blur) {
        this.blur = blur;
        return this;
    }


    /**
     * Noise amount (0 = none, higher = more noise)
     */
    public ScannerEffectRequest withNoise(@Nullable Float noise) {
        this.noise = noise;
        return this;
    }


    /**
     * Simulate yellowed paper
     */
    public ScannerEffectRequest withYellowish(@Nullable Boolean yellowish) {
        this.yellowish = yellowish;
        return this;
    }


    /**
     * Rendering resolution in DPI
     */
    public ScannerEffectRequest withResolution(@Nullable Integer resolution) {
        this.resolution = resolution;
        return this;
    }


    /**
     * Whether advanced settings are enabled
     */
    public ScannerEffectRequest withAdvancedEnabled(@Nullable Boolean advancedEnabled) {
        this.advancedEnabled = advancedEnabled;
        return this;
    }


    public ScannerEffectRequest withQualityValue(@Nullable Integer qualityValue) {
        this.qualityValue = qualityValue;
        return this;
    }


    public ScannerEffectRequest withRotationValue(@Nullable Integer rotationValue) {
        this.rotationValue = rotationValue;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ScannerEffectRequest other = (ScannerEffectRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.quality, other.quality) &&
            Utils.enhancedDeepEquals(this.rotation, other.rotation) &&
            Utils.enhancedDeepEquals(this.colorspace, other.colorspace) &&
            Utils.enhancedDeepEquals(this.border, other.border) &&
            Utils.enhancedDeepEquals(this.rotate, other.rotate) &&
            Utils.enhancedDeepEquals(this.rotateVariance, other.rotateVariance) &&
            Utils.enhancedDeepEquals(this.brightness, other.brightness) &&
            Utils.enhancedDeepEquals(this.contrast, other.contrast) &&
            Utils.enhancedDeepEquals(this.blur, other.blur) &&
            Utils.enhancedDeepEquals(this.noise, other.noise) &&
            Utils.enhancedDeepEquals(this.yellowish, other.yellowish) &&
            Utils.enhancedDeepEquals(this.resolution, other.resolution) &&
            Utils.enhancedDeepEquals(this.advancedEnabled, other.advancedEnabled) &&
            Utils.enhancedDeepEquals(this.qualityValue, other.qualityValue) &&
            Utils.enhancedDeepEquals(this.rotationValue, other.rotationValue);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, quality, rotation,
            colorspace, border, rotate,
            rotateVariance, brightness, contrast,
            blur, noise, yellowish,
            resolution, advancedEnabled, qualityValue,
            rotationValue);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ScannerEffectRequest.class,
                "fileInput", fileInput,
                "quality", quality,
                "rotation", rotation,
                "colorspace", colorspace,
                "border", border,
                "rotate", rotate,
                "rotateVariance", rotateVariance,
                "brightness", brightness,
                "contrast", contrast,
                "blur", blur,
                "noise", noise,
                "yellowish", yellowish,
                "resolution", resolution,
                "advancedEnabled", advancedEnabled,
                "qualityValue", qualityValue,
                "rotationValue", rotationValue);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private ScannerEffectRequestFileInput fileInput;

        private Quality quality;

        private Rotation rotation;

        private Colorspace colorspace;

        private Integer border;

        private Integer rotate;

        private Integer rotateVariance;

        private Float brightness;

        private Float contrast;

        private Float blur;

        private Float noise;

        private Boolean yellowish;

        private Integer resolution;

        private Boolean advancedEnabled;

        private Integer qualityValue;

        private Integer rotationValue;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nonnull ScannerEffectRequestFileInput fileInput) {
            this.fileInput = Utils.checkNotNull(fileInput, "fileInput");
            return this;
        }

        /**
         * Scan quality preset
         */
        public Builder quality(@Nonnull Quality quality) {
            this.quality = Utils.checkNotNull(quality, "quality");
            return this;
        }

        /**
         * Rotation preset
         */
        public Builder rotation(@Nonnull Rotation rotation) {
            this.rotation = Utils.checkNotNull(rotation, "rotation");
            return this;
        }

        /**
         * Colorspace for output image
         */
        public Builder colorspace(@Nullable Colorspace colorspace) {
            this.colorspace = colorspace;
            return this;
        }

        /**
         * Border thickness in pixels
         */
        public Builder border(@Nullable Integer border) {
            this.border = border;
            return this;
        }

        /**
         * Base rotation in degrees
         */
        public Builder rotate(@Nullable Integer rotate) {
            this.rotate = rotate;
            return this;
        }

        /**
         * Random rotation variance in degrees
         */
        public Builder rotateVariance(@Nullable Integer rotateVariance) {
            this.rotateVariance = rotateVariance;
            return this;
        }

        /**
         * Brightness multiplier (1.0 = no change)
         */
        public Builder brightness(@Nullable Float brightness) {
            this.brightness = brightness;
            return this;
        }

        /**
         * Contrast multiplier (1.0 = no change)
         */
        public Builder contrast(@Nullable Float contrast) {
            this.contrast = contrast;
            return this;
        }

        /**
         * Blur amount (0 = none, higher = more blur)
         */
        public Builder blur(@Nullable Float blur) {
            this.blur = blur;
            return this;
        }

        /**
         * Noise amount (0 = none, higher = more noise)
         */
        public Builder noise(@Nullable Float noise) {
            this.noise = noise;
            return this;
        }

        /**
         * Simulate yellowed paper
         */
        public Builder yellowish(@Nullable Boolean yellowish) {
            this.yellowish = yellowish;
            return this;
        }

        /**
         * Rendering resolution in DPI
         */
        public Builder resolution(@Nullable Integer resolution) {
            this.resolution = resolution;
            return this;
        }

        /**
         * Whether advanced settings are enabled
         */
        public Builder advancedEnabled(@Nullable Boolean advancedEnabled) {
            this.advancedEnabled = advancedEnabled;
            return this;
        }

        public Builder qualityValue(@Nullable Integer qualityValue) {
            this.qualityValue = qualityValue;
            return this;
        }

        public Builder rotationValue(@Nullable Integer rotationValue) {
            this.rotationValue = rotationValue;
            return this;
        }

        public ScannerEffectRequest build() {
            return new ScannerEffectRequest(
                fileInput, quality, rotation,
                colorspace, border, rotate,
                rotateVariance, brightness, contrast,
                blur, noise, yellowish,
                resolution, advancedEnabled, qualityValue,
                rotationValue);
        }

    }
}
