/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class ContainsTextRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private ContainsTextRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
     */
    @SpeakeasyMetadata("multipartForm:name=pageNumbers")
    private String pageNumbers;

    /**
     * The text to check for
     */
    @SpeakeasyMetadata("multipartForm:name=text")
    private String text;

    @JsonCreator
    public ContainsTextRequest(
            @Nullable ContainsTextRequestFileInput fileInput,
            @Nullable String fileId,
            @Nullable String pageNumbers,
            @Nullable String text) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.pageNumbers = Optional.ofNullable(pageNumbers)
            .orElse(Builder._SINGLETON_VALUE_PageNumbers.value());
        this.text = Optional.ofNullable(text)
            .orElse(Builder._SINGLETON_VALUE_Text.value());
    }
    
    public ContainsTextRequest() {
        this(null, null, null,
            null);
    }

    public Optional<ContainsTextRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
     */
    public Optional<String> pageNumbers() {
        return Optional.ofNullable(this.pageNumbers);
    }

    /**
     * The text to check for
     */
    public Optional<String> text() {
        return Optional.ofNullable(this.text);
    }

    public static Builder builder() {
        return new Builder();
    }


    public ContainsTextRequest withFileInput(@Nullable ContainsTextRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public ContainsTextRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
     */
    public ContainsTextRequest withPageNumbers(@Nullable String pageNumbers) {
        this.pageNumbers = pageNumbers;
        return this;
    }


    /**
     * The text to check for
     */
    public ContainsTextRequest withText(@Nullable String text) {
        this.text = text;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContainsTextRequest other = (ContainsTextRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.pageNumbers, other.pageNumbers) &&
            Utils.enhancedDeepEquals(this.text, other.text);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, pageNumbers,
            text);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ContainsTextRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "pageNumbers", pageNumbers,
                "text", text);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private ContainsTextRequestFileInput fileInput;

        private String fileId;

        private String pageNumbers;

        private String text;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable ContainsTextRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
         */
        public Builder pageNumbers(@Nullable String pageNumbers) {
            this.pageNumbers = pageNumbers;
            return this;
        }

        /**
         * The text to check for
         */
        public Builder text(@Nullable String text) {
            this.text = text;
            return this;
        }

        public ContainsTextRequest build() {
            return new ContainsTextRequest(
                fileInput, fileId, pageNumbers,
                text);
        }


        private static final LazySingletonValue<String> _SINGLETON_VALUE_PageNumbers =
                new LazySingletonValue<>(
                        "pageNumbers",
                        "\"all\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_Text =
                new LazySingletonValue<>(
                        "text",
                        "\"text\"",
                        new TypeReference<String>() {});
    }
}
