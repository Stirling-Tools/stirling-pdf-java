/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class SanitizePdfRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private SanitizePdfRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * Remove JavaScript actions from the PDF
     */
    @SpeakeasyMetadata("multipartForm:name=removeJavaScript")
    private Boolean removeJavaScript;

    /**
     * Remove embedded files from the PDF
     */
    @SpeakeasyMetadata("multipartForm:name=removeEmbeddedFiles")
    private Boolean removeEmbeddedFiles;

    /**
     * Remove XMP metadata from the PDF
     */
    @SpeakeasyMetadata("multipartForm:name=removeXMPMetadata")
    private Boolean removeXMPMetadata;

    /**
     * Remove document info metadata from the PDF
     */
    @SpeakeasyMetadata("multipartForm:name=removeMetadata")
    private Boolean removeMetadata;

    /**
     * Remove links from the PDF
     */
    @SpeakeasyMetadata("multipartForm:name=removeLinks")
    private Boolean removeLinks;

    /**
     * Remove fonts from the PDF
     */
    @SpeakeasyMetadata("multipartForm:name=removeFonts")
    private Boolean removeFonts;

    @JsonCreator
    public SanitizePdfRequest(
            @Nullable SanitizePdfRequestFileInput fileInput,
            @Nullable String fileId,
            @Nullable Boolean removeJavaScript,
            @Nullable Boolean removeEmbeddedFiles,
            @Nullable Boolean removeXMPMetadata,
            @Nullable Boolean removeMetadata,
            @Nullable Boolean removeLinks,
            @Nullable Boolean removeFonts) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.removeJavaScript = Optional.ofNullable(removeJavaScript)
            .orElse(Builder._SINGLETON_VALUE_RemoveJavaScript.value());
        this.removeEmbeddedFiles = Optional.ofNullable(removeEmbeddedFiles)
            .orElse(Builder._SINGLETON_VALUE_RemoveEmbeddedFiles.value());
        this.removeXMPMetadata = Optional.ofNullable(removeXMPMetadata)
            .orElse(Builder._SINGLETON_VALUE_RemoveXMPMetadata.value());
        this.removeMetadata = Optional.ofNullable(removeMetadata)
            .orElse(Builder._SINGLETON_VALUE_RemoveMetadata.value());
        this.removeLinks = Optional.ofNullable(removeLinks)
            .orElse(Builder._SINGLETON_VALUE_RemoveLinks.value());
        this.removeFonts = Optional.ofNullable(removeFonts)
            .orElse(Builder._SINGLETON_VALUE_RemoveFonts.value());
    }
    
    public SanitizePdfRequest() {
        this(null, null, null,
            null, null, null,
            null, null);
    }

    public Optional<SanitizePdfRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * Remove JavaScript actions from the PDF
     */
    public Optional<Boolean> removeJavaScript() {
        return Optional.ofNullable(this.removeJavaScript);
    }

    /**
     * Remove embedded files from the PDF
     */
    public Optional<Boolean> removeEmbeddedFiles() {
        return Optional.ofNullable(this.removeEmbeddedFiles);
    }

    /**
     * Remove XMP metadata from the PDF
     */
    public Optional<Boolean> removeXMPMetadata() {
        return Optional.ofNullable(this.removeXMPMetadata);
    }

    /**
     * Remove document info metadata from the PDF
     */
    public Optional<Boolean> removeMetadata() {
        return Optional.ofNullable(this.removeMetadata);
    }

    /**
     * Remove links from the PDF
     */
    public Optional<Boolean> removeLinks() {
        return Optional.ofNullable(this.removeLinks);
    }

    /**
     * Remove fonts from the PDF
     */
    public Optional<Boolean> removeFonts() {
        return Optional.ofNullable(this.removeFonts);
    }

    public static Builder builder() {
        return new Builder();
    }


    public SanitizePdfRequest withFileInput(@Nullable SanitizePdfRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public SanitizePdfRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * Remove JavaScript actions from the PDF
     */
    public SanitizePdfRequest withRemoveJavaScript(@Nullable Boolean removeJavaScript) {
        this.removeJavaScript = removeJavaScript;
        return this;
    }


    /**
     * Remove embedded files from the PDF
     */
    public SanitizePdfRequest withRemoveEmbeddedFiles(@Nullable Boolean removeEmbeddedFiles) {
        this.removeEmbeddedFiles = removeEmbeddedFiles;
        return this;
    }


    /**
     * Remove XMP metadata from the PDF
     */
    public SanitizePdfRequest withRemoveXMPMetadata(@Nullable Boolean removeXMPMetadata) {
        this.removeXMPMetadata = removeXMPMetadata;
        return this;
    }


    /**
     * Remove document info metadata from the PDF
     */
    public SanitizePdfRequest withRemoveMetadata(@Nullable Boolean removeMetadata) {
        this.removeMetadata = removeMetadata;
        return this;
    }


    /**
     * Remove links from the PDF
     */
    public SanitizePdfRequest withRemoveLinks(@Nullable Boolean removeLinks) {
        this.removeLinks = removeLinks;
        return this;
    }


    /**
     * Remove fonts from the PDF
     */
    public SanitizePdfRequest withRemoveFonts(@Nullable Boolean removeFonts) {
        this.removeFonts = removeFonts;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SanitizePdfRequest other = (SanitizePdfRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.removeJavaScript, other.removeJavaScript) &&
            Utils.enhancedDeepEquals(this.removeEmbeddedFiles, other.removeEmbeddedFiles) &&
            Utils.enhancedDeepEquals(this.removeXMPMetadata, other.removeXMPMetadata) &&
            Utils.enhancedDeepEquals(this.removeMetadata, other.removeMetadata) &&
            Utils.enhancedDeepEquals(this.removeLinks, other.removeLinks) &&
            Utils.enhancedDeepEquals(this.removeFonts, other.removeFonts);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, removeJavaScript,
            removeEmbeddedFiles, removeXMPMetadata, removeMetadata,
            removeLinks, removeFonts);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SanitizePdfRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "removeJavaScript", removeJavaScript,
                "removeEmbeddedFiles", removeEmbeddedFiles,
                "removeXMPMetadata", removeXMPMetadata,
                "removeMetadata", removeMetadata,
                "removeLinks", removeLinks,
                "removeFonts", removeFonts);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private SanitizePdfRequestFileInput fileInput;

        private String fileId;

        private Boolean removeJavaScript;

        private Boolean removeEmbeddedFiles;

        private Boolean removeXMPMetadata;

        private Boolean removeMetadata;

        private Boolean removeLinks;

        private Boolean removeFonts;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable SanitizePdfRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * Remove JavaScript actions from the PDF
         */
        public Builder removeJavaScript(@Nullable Boolean removeJavaScript) {
            this.removeJavaScript = removeJavaScript;
            return this;
        }

        /**
         * Remove embedded files from the PDF
         */
        public Builder removeEmbeddedFiles(@Nullable Boolean removeEmbeddedFiles) {
            this.removeEmbeddedFiles = removeEmbeddedFiles;
            return this;
        }

        /**
         * Remove XMP metadata from the PDF
         */
        public Builder removeXMPMetadata(@Nullable Boolean removeXMPMetadata) {
            this.removeXMPMetadata = removeXMPMetadata;
            return this;
        }

        /**
         * Remove document info metadata from the PDF
         */
        public Builder removeMetadata(@Nullable Boolean removeMetadata) {
            this.removeMetadata = removeMetadata;
            return this;
        }

        /**
         * Remove links from the PDF
         */
        public Builder removeLinks(@Nullable Boolean removeLinks) {
            this.removeLinks = removeLinks;
            return this;
        }

        /**
         * Remove fonts from the PDF
         */
        public Builder removeFonts(@Nullable Boolean removeFonts) {
            this.removeFonts = removeFonts;
            return this;
        }

        public SanitizePdfRequest build() {
            return new SanitizePdfRequest(
                fileInput, fileId, removeJavaScript,
                removeEmbeddedFiles, removeXMPMetadata, removeMetadata,
                removeLinks, removeFonts);
        }


        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_RemoveJavaScript =
                new LazySingletonValue<>(
                        "removeJavaScript",
                        "true",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_RemoveEmbeddedFiles =
                new LazySingletonValue<>(
                        "removeEmbeddedFiles",
                        "true",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_RemoveXMPMetadata =
                new LazySingletonValue<>(
                        "removeXMPMetadata",
                        "false",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_RemoveMetadata =
                new LazySingletonValue<>(
                        "removeMetadata",
                        "false",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_RemoveLinks =
                new LazySingletonValue<>(
                        "removeLinks",
                        "false",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_RemoveFonts =
                new LazySingletonValue<>(
                        "removeFonts",
                        "false",
                        new TypeReference<Boolean>() {});
    }
}
