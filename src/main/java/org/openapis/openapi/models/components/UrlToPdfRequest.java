/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class UrlToPdfRequest {
    /**
     * The input URL to be converted to a PDF file
     */
    @SpeakeasyMetadata("multipartForm:name=urlInput")
    private String urlInput;

    @JsonCreator
    public UrlToPdfRequest(
            @Nonnull String urlInput) {
        this.urlInput = Optional.ofNullable(urlInput)
            .orElseThrow(() -> new IllegalArgumentException("urlInput cannot be null"));
    }

    /**
     * The input URL to be converted to a PDF file
     */
    public String urlInput() {
        return this.urlInput;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The input URL to be converted to a PDF file
     */
    public UrlToPdfRequest withUrlInput(@Nonnull String urlInput) {
        this.urlInput = Utils.checkNotNull(urlInput, "urlInput");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UrlToPdfRequest other = (UrlToPdfRequest) o;
        return 
            Utils.enhancedDeepEquals(this.urlInput, other.urlInput);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            urlInput);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UrlToPdfRequest.class,
                "urlInput", urlInput);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String urlInput;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The input URL to be converted to a PDF file
         */
        public Builder urlInput(@Nonnull String urlInput) {
            this.urlInput = Utils.checkNotNull(urlInput, "urlInput");
            return this;
        }

        public UrlToPdfRequest build() {
            return new UrlToPdfRequest(
                urlInput);
        }

    }
}
