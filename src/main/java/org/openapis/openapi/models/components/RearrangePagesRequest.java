/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class RearrangePagesRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private RearrangePagesRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
     */
    @SpeakeasyMetadata("multipartForm:name=pageNumbers")
    private String pageNumbers;

    /**
     * The custom mode for page rearrangement. Valid values are:
     * CUSTOM: Uses order defined in PageNums DUPLICATE: Duplicate pages n times (if Page order defined as 4, then duplicates each page 4 times)REVERSE_ORDER: Reverses the order of all pages.
     * DUPLEX_SORT: Sorts pages as if all fronts were scanned then all backs in reverse (1, n, 2, n-1, ...). BOOKLET_SORT: Arranges pages for booklet printing (last, first, second, second last, ...).
     * ODD_EVEN_SPLIT: Splits and arranges pages into odd and even numbered pages.
     * ODD_EVEN_MERGE: Merges pages and organises them alternately into odd and even pages.
     * REMOVE_FIRST: Removes the first page.
     * REMOVE_LAST: Removes the last page.
     * REMOVE_FIRST_AND_LAST: Removes both the first and the last pages.
     */
    @SpeakeasyMetadata("multipartForm:name=customMode")
    private CustomMode customMode;

    @JsonCreator
    public RearrangePagesRequest(
            @Nullable RearrangePagesRequestFileInput fileInput,
            @Nullable String fileId,
            @Nullable String pageNumbers,
            @Nullable CustomMode customMode) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.pageNumbers = Optional.ofNullable(pageNumbers)
            .orElse(Builder._SINGLETON_VALUE_PageNumbers.value());
        this.customMode = customMode;
    }
    
    public RearrangePagesRequest() {
        this(null, null, null,
            null);
    }

    public Optional<RearrangePagesRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
     */
    public Optional<String> pageNumbers() {
        return Optional.ofNullable(this.pageNumbers);
    }

    /**
     * The custom mode for page rearrangement. Valid values are:
     * CUSTOM: Uses order defined in PageNums DUPLICATE: Duplicate pages n times (if Page order defined as 4, then duplicates each page 4 times)REVERSE_ORDER: Reverses the order of all pages.
     * DUPLEX_SORT: Sorts pages as if all fronts were scanned then all backs in reverse (1, n, 2, n-1, ...). BOOKLET_SORT: Arranges pages for booklet printing (last, first, second, second last, ...).
     * ODD_EVEN_SPLIT: Splits and arranges pages into odd and even numbered pages.
     * ODD_EVEN_MERGE: Merges pages and organises them alternately into odd and even pages.
     * REMOVE_FIRST: Removes the first page.
     * REMOVE_LAST: Removes the last page.
     * REMOVE_FIRST_AND_LAST: Removes both the first and the last pages.
     */
    public Optional<CustomMode> customMode() {
        return Optional.ofNullable(this.customMode);
    }

    public static Builder builder() {
        return new Builder();
    }


    public RearrangePagesRequest withFileInput(@Nullable RearrangePagesRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public RearrangePagesRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
     */
    public RearrangePagesRequest withPageNumbers(@Nullable String pageNumbers) {
        this.pageNumbers = pageNumbers;
        return this;
    }


    /**
     * The custom mode for page rearrangement. Valid values are:
     * CUSTOM: Uses order defined in PageNums DUPLICATE: Duplicate pages n times (if Page order defined as 4, then duplicates each page 4 times)REVERSE_ORDER: Reverses the order of all pages.
     * DUPLEX_SORT: Sorts pages as if all fronts were scanned then all backs in reverse (1, n, 2, n-1, ...). BOOKLET_SORT: Arranges pages for booklet printing (last, first, second, second last, ...).
     * ODD_EVEN_SPLIT: Splits and arranges pages into odd and even numbered pages.
     * ODD_EVEN_MERGE: Merges pages and organises them alternately into odd and even pages.
     * REMOVE_FIRST: Removes the first page.
     * REMOVE_LAST: Removes the last page.
     * REMOVE_FIRST_AND_LAST: Removes both the first and the last pages.
     */
    public RearrangePagesRequest withCustomMode(@Nullable CustomMode customMode) {
        this.customMode = customMode;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RearrangePagesRequest other = (RearrangePagesRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.pageNumbers, other.pageNumbers) &&
            Utils.enhancedDeepEquals(this.customMode, other.customMode);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, pageNumbers,
            customMode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RearrangePagesRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "pageNumbers", pageNumbers,
                "customMode", customMode);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private RearrangePagesRequestFileInput fileInput;

        private String fileId;

        private String pageNumbers;

        private CustomMode customMode;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable RearrangePagesRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
         */
        public Builder pageNumbers(@Nullable String pageNumbers) {
            this.pageNumbers = pageNumbers;
            return this;
        }

        /**
         * The custom mode for page rearrangement. Valid values are:
         * CUSTOM: Uses order defined in PageNums DUPLICATE: Duplicate pages n times (if Page order defined as 4, then duplicates each page 4 times)REVERSE_ORDER: Reverses the order of all pages.
         * DUPLEX_SORT: Sorts pages as if all fronts were scanned then all backs in reverse (1, n, 2, n-1, ...). BOOKLET_SORT: Arranges pages for booklet printing (last, first, second, second last, ...).
         * ODD_EVEN_SPLIT: Splits and arranges pages into odd and even numbered pages.
         * ODD_EVEN_MERGE: Merges pages and organises them alternately into odd and even pages.
         * REMOVE_FIRST: Removes the first page.
         * REMOVE_LAST: Removes the last page.
         * REMOVE_FIRST_AND_LAST: Removes both the first and the last pages.
         */
        public Builder customMode(@Nullable CustomMode customMode) {
            this.customMode = customMode;
            return this;
        }

        public RearrangePagesRequest build() {
            return new RearrangePagesRequest(
                fileInput, fileId, pageNumbers,
                customMode);
        }


        private static final LazySingletonValue<String> _SINGLETON_VALUE_PageNumbers =
                new LazySingletonValue<>(
                        "pageNumbers",
                        "\"all\"",
                        new TypeReference<String>() {});
    }
}
