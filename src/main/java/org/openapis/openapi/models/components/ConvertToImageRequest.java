/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class ConvertToImageRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private ConvertToImageRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
     */
    @SpeakeasyMetadata("multipartForm:name=pageNumbers")
    private String pageNumbers;

    /**
     * The output image format
     */
    @SpeakeasyMetadata("multipartForm:name=imageFormat")
    private ImageFormat imageFormat;

    /**
     * Choose between a single image containing all pages or separate images for each page
     */
    @SpeakeasyMetadata("multipartForm:name=singleOrMultiple")
    private SingleOrMultiple singleOrMultiple;

    /**
     * The color type of the output image(s)
     */
    @SpeakeasyMetadata("multipartForm:name=colorType")
    private ConvertToImageRequestColorType colorType;

    /**
     * The DPI (dots per inch) for the output image(s)
     */
    @SpeakeasyMetadata("multipartForm:name=dpi")
    private Integer dpi;

    @JsonCreator
    public ConvertToImageRequest(
            @Nullable ConvertToImageRequestFileInput fileInput,
            @Nullable String fileId,
            @Nullable String pageNumbers,
            @Nullable ImageFormat imageFormat,
            @Nullable SingleOrMultiple singleOrMultiple,
            @Nullable ConvertToImageRequestColorType colorType,
            @Nullable Integer dpi) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.pageNumbers = Optional.ofNullable(pageNumbers)
            .orElse(Builder._SINGLETON_VALUE_PageNumbers.value());
        this.imageFormat = Optional.ofNullable(imageFormat)
            .orElse(Builder._SINGLETON_VALUE_ImageFormat.value());
        this.singleOrMultiple = Optional.ofNullable(singleOrMultiple)
            .orElse(Builder._SINGLETON_VALUE_SingleOrMultiple.value());
        this.colorType = Optional.ofNullable(colorType)
            .orElse(Builder._SINGLETON_VALUE_ColorType.value());
        this.dpi = Optional.ofNullable(dpi)
            .orElse(Builder._SINGLETON_VALUE_Dpi.value());
    }
    
    public ConvertToImageRequest() {
        this(null, null, null,
            null, null, null,
            null);
    }

    public Optional<ConvertToImageRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
     */
    public Optional<String> pageNumbers() {
        return Optional.ofNullable(this.pageNumbers);
    }

    /**
     * The output image format
     */
    public Optional<ImageFormat> imageFormat() {
        return Optional.ofNullable(this.imageFormat);
    }

    /**
     * Choose between a single image containing all pages or separate images for each page
     */
    public Optional<SingleOrMultiple> singleOrMultiple() {
        return Optional.ofNullable(this.singleOrMultiple);
    }

    /**
     * The color type of the output image(s)
     */
    public Optional<ConvertToImageRequestColorType> colorType() {
        return Optional.ofNullable(this.colorType);
    }

    /**
     * The DPI (dots per inch) for the output image(s)
     */
    public Optional<Integer> dpi() {
        return Optional.ofNullable(this.dpi);
    }

    public static Builder builder() {
        return new Builder();
    }


    public ConvertToImageRequest withFileInput(@Nullable ConvertToImageRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public ConvertToImageRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
     */
    public ConvertToImageRequest withPageNumbers(@Nullable String pageNumbers) {
        this.pageNumbers = pageNumbers;
        return this;
    }


    /**
     * The output image format
     */
    public ConvertToImageRequest withImageFormat(@Nullable ImageFormat imageFormat) {
        this.imageFormat = imageFormat;
        return this;
    }


    /**
     * Choose between a single image containing all pages or separate images for each page
     */
    public ConvertToImageRequest withSingleOrMultiple(@Nullable SingleOrMultiple singleOrMultiple) {
        this.singleOrMultiple = singleOrMultiple;
        return this;
    }


    /**
     * The color type of the output image(s)
     */
    public ConvertToImageRequest withColorType(@Nullable ConvertToImageRequestColorType colorType) {
        this.colorType = colorType;
        return this;
    }


    /**
     * The DPI (dots per inch) for the output image(s)
     */
    public ConvertToImageRequest withDpi(@Nullable Integer dpi) {
        this.dpi = dpi;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConvertToImageRequest other = (ConvertToImageRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.pageNumbers, other.pageNumbers) &&
            Utils.enhancedDeepEquals(this.imageFormat, other.imageFormat) &&
            Utils.enhancedDeepEquals(this.singleOrMultiple, other.singleOrMultiple) &&
            Utils.enhancedDeepEquals(this.colorType, other.colorType) &&
            Utils.enhancedDeepEquals(this.dpi, other.dpi);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, pageNumbers,
            imageFormat, singleOrMultiple, colorType,
            dpi);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConvertToImageRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "pageNumbers", pageNumbers,
                "imageFormat", imageFormat,
                "singleOrMultiple", singleOrMultiple,
                "colorType", colorType,
                "dpi", dpi);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private ConvertToImageRequestFileInput fileInput;

        private String fileId;

        private String pageNumbers;

        private ImageFormat imageFormat;

        private SingleOrMultiple singleOrMultiple;

        private ConvertToImageRequestColorType colorType;

        private Integer dpi;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable ConvertToImageRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
         */
        public Builder pageNumbers(@Nullable String pageNumbers) {
            this.pageNumbers = pageNumbers;
            return this;
        }

        /**
         * The output image format
         */
        public Builder imageFormat(@Nullable ImageFormat imageFormat) {
            this.imageFormat = imageFormat;
            return this;
        }

        /**
         * Choose between a single image containing all pages or separate images for each page
         */
        public Builder singleOrMultiple(@Nullable SingleOrMultiple singleOrMultiple) {
            this.singleOrMultiple = singleOrMultiple;
            return this;
        }

        /**
         * The color type of the output image(s)
         */
        public Builder colorType(@Nullable ConvertToImageRequestColorType colorType) {
            this.colorType = colorType;
            return this;
        }

        /**
         * The DPI (dots per inch) for the output image(s)
         */
        public Builder dpi(@Nullable Integer dpi) {
            this.dpi = dpi;
            return this;
        }

        public ConvertToImageRequest build() {
            return new ConvertToImageRequest(
                fileInput, fileId, pageNumbers,
                imageFormat, singleOrMultiple, colorType,
                dpi);
        }


        private static final LazySingletonValue<String> _SINGLETON_VALUE_PageNumbers =
                new LazySingletonValue<>(
                        "pageNumbers",
                        "\"all\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<ImageFormat> _SINGLETON_VALUE_ImageFormat =
                new LazySingletonValue<>(
                        "imageFormat",
                        "\"png\"",
                        new TypeReference<ImageFormat>() {});

        private static final LazySingletonValue<SingleOrMultiple> _SINGLETON_VALUE_SingleOrMultiple =
                new LazySingletonValue<>(
                        "singleOrMultiple",
                        "\"multiple\"",
                        new TypeReference<SingleOrMultiple>() {});

        private static final LazySingletonValue<ConvertToImageRequestColorType> _SINGLETON_VALUE_ColorType =
                new LazySingletonValue<>(
                        "colorType",
                        "\"color\"",
                        new TypeReference<ConvertToImageRequestColorType>() {});

        private static final LazySingletonValue<Integer> _SINGLETON_VALUE_Dpi =
                new LazySingletonValue<>(
                        "dpi",
                        "300",
                        new TypeReference<Integer>() {});
    }
}
