/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class CropPdfForm {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private CropPdfFormFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * The x-coordinate of the top-left corner of the crop area
     */
    @SpeakeasyMetadata("multipartForm:name=x")
    private Double x;

    /**
     * The y-coordinate of the top-left corner of the crop area
     */
    @SpeakeasyMetadata("multipartForm:name=y")
    private Double y;

    /**
     * The width of the crop area
     */
    @SpeakeasyMetadata("multipartForm:name=width")
    private Double width;

    /**
     * The height of the crop area
     */
    @SpeakeasyMetadata("multipartForm:name=height")
    private Double height;

    @JsonCreator
    public CropPdfForm(
            @Nullable CropPdfFormFileInput fileInput,
            @Nullable String fileId,
            @Nullable Double x,
            @Nullable Double y,
            @Nullable Double width,
            @Nullable Double height) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }
    
    public CropPdfForm() {
        this(null, null, null,
            null, null, null);
    }

    public Optional<CropPdfFormFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * The x-coordinate of the top-left corner of the crop area
     */
    public Optional<Double> x() {
        return Optional.ofNullable(this.x);
    }

    /**
     * The y-coordinate of the top-left corner of the crop area
     */
    public Optional<Double> y() {
        return Optional.ofNullable(this.y);
    }

    /**
     * The width of the crop area
     */
    public Optional<Double> width() {
        return Optional.ofNullable(this.width);
    }

    /**
     * The height of the crop area
     */
    public Optional<Double> height() {
        return Optional.ofNullable(this.height);
    }

    public static Builder builder() {
        return new Builder();
    }


    public CropPdfForm withFileInput(@Nullable CropPdfFormFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public CropPdfForm withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * The x-coordinate of the top-left corner of the crop area
     */
    public CropPdfForm withX(@Nullable Double x) {
        this.x = x;
        return this;
    }


    /**
     * The y-coordinate of the top-left corner of the crop area
     */
    public CropPdfForm withY(@Nullable Double y) {
        this.y = y;
        return this;
    }


    /**
     * The width of the crop area
     */
    public CropPdfForm withWidth(@Nullable Double width) {
        this.width = width;
        return this;
    }


    /**
     * The height of the crop area
     */
    public CropPdfForm withHeight(@Nullable Double height) {
        this.height = height;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CropPdfForm other = (CropPdfForm) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.x, other.x) &&
            Utils.enhancedDeepEquals(this.y, other.y) &&
            Utils.enhancedDeepEquals(this.width, other.width) &&
            Utils.enhancedDeepEquals(this.height, other.height);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, x,
            y, width, height);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CropPdfForm.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "x", x,
                "y", y,
                "width", width,
                "height", height);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private CropPdfFormFileInput fileInput;

        private String fileId;

        private Double x;

        private Double y;

        private Double width;

        private Double height;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable CropPdfFormFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * The x-coordinate of the top-left corner of the crop area
         */
        public Builder x(@Nullable Double x) {
            this.x = x;
            return this;
        }

        /**
         * The y-coordinate of the top-left corner of the crop area
         */
        public Builder y(@Nullable Double y) {
            this.y = y;
            return this;
        }

        /**
         * The width of the crop area
         */
        public Builder width(@Nullable Double width) {
            this.width = width;
            return this;
        }

        /**
         * The height of the crop area
         */
        public Builder height(@Nullable Double height) {
            this.height = height;
            return this;
        }

        public CropPdfForm build() {
            return new CropPdfForm(
                fileInput, fileId, x,
                y, width, height);
        }

    }
}
