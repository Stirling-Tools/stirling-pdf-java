/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class FileInfo {

    private String fileName;


    private String filePath;


    private OffsetDateTime modificationDate;


    private Long fileSize;


    private OffsetDateTime creationDate;


    private String formattedCreationDate;


    private String formattedFileSize;


    private String formattedModificationDate;


    private FilePathAsPath filePathAsPath;

    @JsonCreator
    public FileInfo(
            @Nullable String fileName,
            @Nullable String filePath,
            @Nullable OffsetDateTime modificationDate,
            @Nullable Long fileSize,
            @Nullable OffsetDateTime creationDate,
            @Nullable String formattedCreationDate,
            @Nullable String formattedFileSize,
            @Nullable String formattedModificationDate,
            @Nullable FilePathAsPath filePathAsPath) {
        this.fileName = fileName;
        this.filePath = filePath;
        this.modificationDate = modificationDate;
        this.fileSize = fileSize;
        this.creationDate = creationDate;
        this.formattedCreationDate = formattedCreationDate;
        this.formattedFileSize = formattedFileSize;
        this.formattedModificationDate = formattedModificationDate;
        this.filePathAsPath = filePathAsPath;
    }
    
    public FileInfo() {
        this(null, null, null,
            null, null, null,
            null, null, null);
    }

    public Optional<String> fileName() {
        return Optional.ofNullable(this.fileName);
    }

    public Optional<String> filePath() {
        return Optional.ofNullable(this.filePath);
    }

    public Optional<OffsetDateTime> modificationDate() {
        return Optional.ofNullable(this.modificationDate);
    }

    public Optional<Long> fileSize() {
        return Optional.ofNullable(this.fileSize);
    }

    public Optional<OffsetDateTime> creationDate() {
        return Optional.ofNullable(this.creationDate);
    }

    public Optional<String> formattedCreationDate() {
        return Optional.ofNullable(this.formattedCreationDate);
    }

    public Optional<String> formattedFileSize() {
        return Optional.ofNullable(this.formattedFileSize);
    }

    public Optional<String> formattedModificationDate() {
        return Optional.ofNullable(this.formattedModificationDate);
    }

    public Optional<FilePathAsPath> filePathAsPath() {
        return Optional.ofNullable(this.filePathAsPath);
    }

    public static Builder builder() {
        return new Builder();
    }


    public FileInfo withFileName(@Nullable String fileName) {
        this.fileName = fileName;
        return this;
    }


    public FileInfo withFilePath(@Nullable String filePath) {
        this.filePath = filePath;
        return this;
    }


    public FileInfo withModificationDate(@Nullable OffsetDateTime modificationDate) {
        this.modificationDate = modificationDate;
        return this;
    }


    public FileInfo withFileSize(@Nullable Long fileSize) {
        this.fileSize = fileSize;
        return this;
    }


    public FileInfo withCreationDate(@Nullable OffsetDateTime creationDate) {
        this.creationDate = creationDate;
        return this;
    }


    public FileInfo withFormattedCreationDate(@Nullable String formattedCreationDate) {
        this.formattedCreationDate = formattedCreationDate;
        return this;
    }


    public FileInfo withFormattedFileSize(@Nullable String formattedFileSize) {
        this.formattedFileSize = formattedFileSize;
        return this;
    }


    public FileInfo withFormattedModificationDate(@Nullable String formattedModificationDate) {
        this.formattedModificationDate = formattedModificationDate;
        return this;
    }


    public FileInfo withFilePathAsPath(@Nullable FilePathAsPath filePathAsPath) {
        this.filePathAsPath = filePathAsPath;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FileInfo other = (FileInfo) o;
        return 
            Utils.enhancedDeepEquals(this.fileName, other.fileName) &&
            Utils.enhancedDeepEquals(this.filePath, other.filePath) &&
            Utils.enhancedDeepEquals(this.modificationDate, other.modificationDate) &&
            Utils.enhancedDeepEquals(this.fileSize, other.fileSize) &&
            Utils.enhancedDeepEquals(this.creationDate, other.creationDate) &&
            Utils.enhancedDeepEquals(this.formattedCreationDate, other.formattedCreationDate) &&
            Utils.enhancedDeepEquals(this.formattedFileSize, other.formattedFileSize) &&
            Utils.enhancedDeepEquals(this.formattedModificationDate, other.formattedModificationDate) &&
            Utils.enhancedDeepEquals(this.filePathAsPath, other.filePathAsPath);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileName, filePath, modificationDate,
            fileSize, creationDate, formattedCreationDate,
            formattedFileSize, formattedModificationDate, filePathAsPath);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FileInfo.class,
                "fileName", fileName,
                "filePath", filePath,
                "modificationDate", modificationDate,
                "fileSize", fileSize,
                "creationDate", creationDate,
                "formattedCreationDate", formattedCreationDate,
                "formattedFileSize", formattedFileSize,
                "formattedModificationDate", formattedModificationDate,
                "filePathAsPath", filePathAsPath);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String fileName;

        private String filePath;

        private OffsetDateTime modificationDate;

        private Long fileSize;

        private OffsetDateTime creationDate;

        private String formattedCreationDate;

        private String formattedFileSize;

        private String formattedModificationDate;

        private FilePathAsPath filePathAsPath;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileName(@Nullable String fileName) {
            this.fileName = fileName;
            return this;
        }

        public Builder filePath(@Nullable String filePath) {
            this.filePath = filePath;
            return this;
        }

        public Builder modificationDate(@Nullable OffsetDateTime modificationDate) {
            this.modificationDate = modificationDate;
            return this;
        }

        public Builder fileSize(@Nullable Long fileSize) {
            this.fileSize = fileSize;
            return this;
        }

        public Builder creationDate(@Nullable OffsetDateTime creationDate) {
            this.creationDate = creationDate;
            return this;
        }

        public Builder formattedCreationDate(@Nullable String formattedCreationDate) {
            this.formattedCreationDate = formattedCreationDate;
            return this;
        }

        public Builder formattedFileSize(@Nullable String formattedFileSize) {
            this.formattedFileSize = formattedFileSize;
            return this;
        }

        public Builder formattedModificationDate(@Nullable String formattedModificationDate) {
            this.formattedModificationDate = formattedModificationDate;
            return this;
        }

        public Builder filePathAsPath(@Nullable FilePathAsPath filePathAsPath) {
            this.filePathAsPath = filePathAsPath;
            return this;
        }

        public FileInfo build() {
            return new FileInfo(
                fileName, filePath, modificationDate,
                fileSize, creationDate, formattedCreationDate,
                formattedFileSize, formattedModificationDate, filePathAsPath);
        }

    }
}
