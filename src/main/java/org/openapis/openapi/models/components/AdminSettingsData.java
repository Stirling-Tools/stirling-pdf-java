/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class AdminSettingsData {

    private List<User> users;


    private String currentUsername;


    private Map<String, String> roleDetails;


    private Map<String, Boolean> userSessions;


    private Map<String, OffsetDateTime> userLastRequest;


    private Integer totalUsers;


    private Integer activeUsers;


    private Integer disabledUsers;


    private List<Team> teams;


    private Integer maxPaidUsers;

    @JsonCreator
    public AdminSettingsData(
            @Nullable List<User> users,
            @Nullable String currentUsername,
            @Nullable Map<String, String> roleDetails,
            @Nullable Map<String, Boolean> userSessions,
            @Nullable Map<String, OffsetDateTime> userLastRequest,
            @Nullable Integer totalUsers,
            @Nullable Integer activeUsers,
            @Nullable Integer disabledUsers,
            @Nullable List<Team> teams,
            @Nullable Integer maxPaidUsers) {
        this.users = users;
        this.currentUsername = currentUsername;
        this.roleDetails = roleDetails;
        this.userSessions = userSessions;
        this.userLastRequest = userLastRequest;
        this.totalUsers = totalUsers;
        this.activeUsers = activeUsers;
        this.disabledUsers = disabledUsers;
        this.teams = teams;
        this.maxPaidUsers = maxPaidUsers;
    }
    
    public AdminSettingsData() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    public Optional<List<User>> users() {
        return Optional.ofNullable(this.users);
    }

    public Optional<String> currentUsername() {
        return Optional.ofNullable(this.currentUsername);
    }

    public Optional<Map<String, String>> roleDetails() {
        return Optional.ofNullable(this.roleDetails);
    }

    public Optional<Map<String, Boolean>> userSessions() {
        return Optional.ofNullable(this.userSessions);
    }

    public Optional<Map<String, OffsetDateTime>> userLastRequest() {
        return Optional.ofNullable(this.userLastRequest);
    }

    public Optional<Integer> totalUsers() {
        return Optional.ofNullable(this.totalUsers);
    }

    public Optional<Integer> activeUsers() {
        return Optional.ofNullable(this.activeUsers);
    }

    public Optional<Integer> disabledUsers() {
        return Optional.ofNullable(this.disabledUsers);
    }

    public Optional<List<Team>> teams() {
        return Optional.ofNullable(this.teams);
    }

    public Optional<Integer> maxPaidUsers() {
        return Optional.ofNullable(this.maxPaidUsers);
    }

    public static Builder builder() {
        return new Builder();
    }


    public AdminSettingsData withUsers(@Nullable List<User> users) {
        this.users = users;
        return this;
    }


    public AdminSettingsData withCurrentUsername(@Nullable String currentUsername) {
        this.currentUsername = currentUsername;
        return this;
    }


    public AdminSettingsData withRoleDetails(@Nullable Map<String, String> roleDetails) {
        this.roleDetails = roleDetails;
        return this;
    }


    public AdminSettingsData withUserSessions(@Nullable Map<String, Boolean> userSessions) {
        this.userSessions = userSessions;
        return this;
    }


    public AdminSettingsData withUserLastRequest(@Nullable Map<String, OffsetDateTime> userLastRequest) {
        this.userLastRequest = userLastRequest;
        return this;
    }


    public AdminSettingsData withTotalUsers(@Nullable Integer totalUsers) {
        this.totalUsers = totalUsers;
        return this;
    }


    public AdminSettingsData withActiveUsers(@Nullable Integer activeUsers) {
        this.activeUsers = activeUsers;
        return this;
    }


    public AdminSettingsData withDisabledUsers(@Nullable Integer disabledUsers) {
        this.disabledUsers = disabledUsers;
        return this;
    }


    public AdminSettingsData withTeams(@Nullable List<Team> teams) {
        this.teams = teams;
        return this;
    }


    public AdminSettingsData withMaxPaidUsers(@Nullable Integer maxPaidUsers) {
        this.maxPaidUsers = maxPaidUsers;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AdminSettingsData other = (AdminSettingsData) o;
        return 
            Utils.enhancedDeepEquals(this.users, other.users) &&
            Utils.enhancedDeepEquals(this.currentUsername, other.currentUsername) &&
            Utils.enhancedDeepEquals(this.roleDetails, other.roleDetails) &&
            Utils.enhancedDeepEquals(this.userSessions, other.userSessions) &&
            Utils.enhancedDeepEquals(this.userLastRequest, other.userLastRequest) &&
            Utils.enhancedDeepEquals(this.totalUsers, other.totalUsers) &&
            Utils.enhancedDeepEquals(this.activeUsers, other.activeUsers) &&
            Utils.enhancedDeepEquals(this.disabledUsers, other.disabledUsers) &&
            Utils.enhancedDeepEquals(this.teams, other.teams) &&
            Utils.enhancedDeepEquals(this.maxPaidUsers, other.maxPaidUsers);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            users, currentUsername, roleDetails,
            userSessions, userLastRequest, totalUsers,
            activeUsers, disabledUsers, teams,
            maxPaidUsers);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AdminSettingsData.class,
                "users", users,
                "currentUsername", currentUsername,
                "roleDetails", roleDetails,
                "userSessions", userSessions,
                "userLastRequest", userLastRequest,
                "totalUsers", totalUsers,
                "activeUsers", activeUsers,
                "disabledUsers", disabledUsers,
                "teams", teams,
                "maxPaidUsers", maxPaidUsers);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private List<User> users;

        private String currentUsername;

        private Map<String, String> roleDetails;

        private Map<String, Boolean> userSessions;

        private Map<String, OffsetDateTime> userLastRequest;

        private Integer totalUsers;

        private Integer activeUsers;

        private Integer disabledUsers;

        private List<Team> teams;

        private Integer maxPaidUsers;

        private Builder() {
          // force use of static builder() method
        }

        public Builder users(@Nullable List<User> users) {
            this.users = users;
            return this;
        }

        public Builder currentUsername(@Nullable String currentUsername) {
            this.currentUsername = currentUsername;
            return this;
        }

        public Builder roleDetails(@Nullable Map<String, String> roleDetails) {
            this.roleDetails = roleDetails;
            return this;
        }

        public Builder userSessions(@Nullable Map<String, Boolean> userSessions) {
            this.userSessions = userSessions;
            return this;
        }

        public Builder userLastRequest(@Nullable Map<String, OffsetDateTime> userLastRequest) {
            this.userLastRequest = userLastRequest;
            return this;
        }

        public Builder totalUsers(@Nullable Integer totalUsers) {
            this.totalUsers = totalUsers;
            return this;
        }

        public Builder activeUsers(@Nullable Integer activeUsers) {
            this.activeUsers = activeUsers;
            return this;
        }

        public Builder disabledUsers(@Nullable Integer disabledUsers) {
            this.disabledUsers = disabledUsers;
            return this;
        }

        public Builder teams(@Nullable List<Team> teams) {
            this.teams = teams;
            return this;
        }

        public Builder maxPaidUsers(@Nullable Integer maxPaidUsers) {
            this.maxPaidUsers = maxPaidUsers;
            return this;
        }

        public AdminSettingsData build() {
            return new AdminSettingsData(
                users, currentUsername, roleDetails,
                userSessions, userLastRequest, totalUsers,
                activeUsers, disabledUsers, teams,
                maxPaidUsers);
        }

    }
}
