/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class SignPDFWithCertRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private SignPDFWithCertRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * The type of the digital certificate
     */
    @SpeakeasyMetadata("multipartForm:name=certType")
    private CertType certType;


    @SpeakeasyMetadata("multipartForm:file,name=privateKeyFile")
    private PrivateKeyFile privateKeyFile;


    @SpeakeasyMetadata("multipartForm:file,name=certFile")
    private SignPDFWithCertRequestCertFile certFile;


    @SpeakeasyMetadata("multipartForm:file,name=p12File")
    private P12File p12File;


    @SpeakeasyMetadata("multipartForm:file,name=jksFile")
    private JksFile jksFile;

    /**
     * The password for the keystore or the private key
     */
    @SpeakeasyMetadata("multipartForm:name=password")
    private String password;

    /**
     * Whether to visually show the signature in the PDF file
     */
    @SpeakeasyMetadata("multipartForm:name=showSignature")
    private Boolean showSignature;

    /**
     * The reason for signing the PDF
     */
    @SpeakeasyMetadata("multipartForm:name=reason")
    private String reason;

    /**
     * The location where the PDF is signed
     */
    @SpeakeasyMetadata("multipartForm:name=location")
    private String location;

    /**
     * The name of the signer
     */
    @SpeakeasyMetadata("multipartForm:name=name")
    private String name;

    /**
     * The page number where the signature should be visible. This is required if showSignature is set to true
     */
    @SpeakeasyMetadata("multipartForm:name=pageNumber")
    private Integer pageNumber;

    /**
     * Whether to visually show a signature logo along with the signature
     */
    @SpeakeasyMetadata("multipartForm:name=showLogo")
    private Boolean showLogo;

    @JsonCreator
    public SignPDFWithCertRequest(
            @Nullable SignPDFWithCertRequestFileInput fileInput,
            @Nullable String fileId,
            @Nonnull CertType certType,
            @Nullable PrivateKeyFile privateKeyFile,
            @Nullable SignPDFWithCertRequestCertFile certFile,
            @Nullable P12File p12File,
            @Nullable JksFile jksFile,
            @Nullable String password,
            @Nullable Boolean showSignature,
            @Nullable String reason,
            @Nullable String location,
            @Nullable String name,
            @Nullable Integer pageNumber,
            @Nullable Boolean showLogo) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.certType = Optional.ofNullable(certType)
            .orElseThrow(() -> new IllegalArgumentException("certType cannot be null"));
        this.privateKeyFile = privateKeyFile;
        this.certFile = certFile;
        this.p12File = p12File;
        this.jksFile = jksFile;
        this.password = password;
        this.showSignature = Optional.ofNullable(showSignature)
            .orElse(Builder._SINGLETON_VALUE_ShowSignature.value());
        this.reason = Optional.ofNullable(reason)
            .orElse(Builder._SINGLETON_VALUE_Reason.value());
        this.location = Optional.ofNullable(location)
            .orElse(Builder._SINGLETON_VALUE_Location.value());
        this.name = Optional.ofNullable(name)
            .orElse(Builder._SINGLETON_VALUE_Name.value());
        this.pageNumber = Optional.ofNullable(pageNumber)
            .orElse(Builder._SINGLETON_VALUE_PageNumber.value());
        this.showLogo = Optional.ofNullable(showLogo)
            .orElse(Builder._SINGLETON_VALUE_ShowLogo.value());
    }
    
    public SignPDFWithCertRequest(
            @Nonnull CertType certType) {
        this(null, null, certType,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    public Optional<SignPDFWithCertRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * The type of the digital certificate
     */
    public CertType certType() {
        return this.certType;
    }

    public Optional<PrivateKeyFile> privateKeyFile() {
        return Optional.ofNullable(this.privateKeyFile);
    }

    public Optional<SignPDFWithCertRequestCertFile> certFile() {
        return Optional.ofNullable(this.certFile);
    }

    public Optional<P12File> p12File() {
        return Optional.ofNullable(this.p12File);
    }

    public Optional<JksFile> jksFile() {
        return Optional.ofNullable(this.jksFile);
    }

    /**
     * The password for the keystore or the private key
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Whether to visually show the signature in the PDF file
     */
    public Optional<Boolean> showSignature() {
        return Optional.ofNullable(this.showSignature);
    }

    /**
     * The reason for signing the PDF
     */
    public Optional<String> reason() {
        return Optional.ofNullable(this.reason);
    }

    /**
     * The location where the PDF is signed
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the signer
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The page number where the signature should be visible. This is required if showSignature is set to true
     */
    public Optional<Integer> pageNumber() {
        return Optional.ofNullable(this.pageNumber);
    }

    /**
     * Whether to visually show a signature logo along with the signature
     */
    public Optional<Boolean> showLogo() {
        return Optional.ofNullable(this.showLogo);
    }

    public static Builder builder() {
        return new Builder();
    }


    public SignPDFWithCertRequest withFileInput(@Nullable SignPDFWithCertRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public SignPDFWithCertRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * The type of the digital certificate
     */
    public SignPDFWithCertRequest withCertType(@Nonnull CertType certType) {
        this.certType = Utils.checkNotNull(certType, "certType");
        return this;
    }


    public SignPDFWithCertRequest withPrivateKeyFile(@Nullable PrivateKeyFile privateKeyFile) {
        this.privateKeyFile = privateKeyFile;
        return this;
    }


    public SignPDFWithCertRequest withCertFile(@Nullable SignPDFWithCertRequestCertFile certFile) {
        this.certFile = certFile;
        return this;
    }


    public SignPDFWithCertRequest withP12File(@Nullable P12File p12File) {
        this.p12File = p12File;
        return this;
    }


    public SignPDFWithCertRequest withJksFile(@Nullable JksFile jksFile) {
        this.jksFile = jksFile;
        return this;
    }


    /**
     * The password for the keystore or the private key
     */
    public SignPDFWithCertRequest withPassword(@Nullable String password) {
        this.password = password;
        return this;
    }


    /**
     * Whether to visually show the signature in the PDF file
     */
    public SignPDFWithCertRequest withShowSignature(@Nullable Boolean showSignature) {
        this.showSignature = showSignature;
        return this;
    }


    /**
     * The reason for signing the PDF
     */
    public SignPDFWithCertRequest withReason(@Nullable String reason) {
        this.reason = reason;
        return this;
    }


    /**
     * The location where the PDF is signed
     */
    public SignPDFWithCertRequest withLocation(@Nullable String location) {
        this.location = location;
        return this;
    }


    /**
     * The name of the signer
     */
    public SignPDFWithCertRequest withName(@Nullable String name) {
        this.name = name;
        return this;
    }


    /**
     * The page number where the signature should be visible. This is required if showSignature is set to true
     */
    public SignPDFWithCertRequest withPageNumber(@Nullable Integer pageNumber) {
        this.pageNumber = pageNumber;
        return this;
    }


    /**
     * Whether to visually show a signature logo along with the signature
     */
    public SignPDFWithCertRequest withShowLogo(@Nullable Boolean showLogo) {
        this.showLogo = showLogo;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SignPDFWithCertRequest other = (SignPDFWithCertRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.certType, other.certType) &&
            Utils.enhancedDeepEquals(this.privateKeyFile, other.privateKeyFile) &&
            Utils.enhancedDeepEquals(this.certFile, other.certFile) &&
            Utils.enhancedDeepEquals(this.p12File, other.p12File) &&
            Utils.enhancedDeepEquals(this.jksFile, other.jksFile) &&
            Utils.enhancedDeepEquals(this.password, other.password) &&
            Utils.enhancedDeepEquals(this.showSignature, other.showSignature) &&
            Utils.enhancedDeepEquals(this.reason, other.reason) &&
            Utils.enhancedDeepEquals(this.location, other.location) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.pageNumber, other.pageNumber) &&
            Utils.enhancedDeepEquals(this.showLogo, other.showLogo);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, certType,
            privateKeyFile, certFile, p12File,
            jksFile, password, showSignature,
            reason, location, name,
            pageNumber, showLogo);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SignPDFWithCertRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "certType", certType,
                "privateKeyFile", privateKeyFile,
                "certFile", certFile,
                "p12File", p12File,
                "jksFile", jksFile,
                "password", password,
                "showSignature", showSignature,
                "reason", reason,
                "location", location,
                "name", name,
                "pageNumber", pageNumber,
                "showLogo", showLogo);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private SignPDFWithCertRequestFileInput fileInput;

        private String fileId;

        private CertType certType;

        private PrivateKeyFile privateKeyFile;

        private SignPDFWithCertRequestCertFile certFile;

        private P12File p12File;

        private JksFile jksFile;

        private String password;

        private Boolean showSignature;

        private String reason;

        private String location;

        private String name;

        private Integer pageNumber;

        private Boolean showLogo;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable SignPDFWithCertRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * The type of the digital certificate
         */
        public Builder certType(@Nonnull CertType certType) {
            this.certType = Utils.checkNotNull(certType, "certType");
            return this;
        }

        public Builder privateKeyFile(@Nullable PrivateKeyFile privateKeyFile) {
            this.privateKeyFile = privateKeyFile;
            return this;
        }

        public Builder certFile(@Nullable SignPDFWithCertRequestCertFile certFile) {
            this.certFile = certFile;
            return this;
        }

        public Builder p12File(@Nullable P12File p12File) {
            this.p12File = p12File;
            return this;
        }

        public Builder jksFile(@Nullable JksFile jksFile) {
            this.jksFile = jksFile;
            return this;
        }

        /**
         * The password for the keystore or the private key
         */
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }

        /**
         * Whether to visually show the signature in the PDF file
         */
        public Builder showSignature(@Nullable Boolean showSignature) {
            this.showSignature = showSignature;
            return this;
        }

        /**
         * The reason for signing the PDF
         */
        public Builder reason(@Nullable String reason) {
            this.reason = reason;
            return this;
        }

        /**
         * The location where the PDF is signed
         */
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }

        /**
         * The name of the signer
         */
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        /**
         * The page number where the signature should be visible. This is required if showSignature is set to true
         */
        public Builder pageNumber(@Nullable Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }

        /**
         * Whether to visually show a signature logo along with the signature
         */
        public Builder showLogo(@Nullable Boolean showLogo) {
            this.showLogo = showLogo;
            return this;
        }

        public SignPDFWithCertRequest build() {
            return new SignPDFWithCertRequest(
                fileInput, fileId, certType,
                privateKeyFile, certFile, p12File,
                jksFile, password, showSignature,
                reason, location, name,
                pageNumber, showLogo);
        }


        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_ShowSignature =
                new LazySingletonValue<>(
                        "showSignature",
                        "false",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_Reason =
                new LazySingletonValue<>(
                        "reason",
                        "\"Signed by SPDF\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_Location =
                new LazySingletonValue<>(
                        "location",
                        "\"SPDF\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_Name =
                new LazySingletonValue<>(
                        "name",
                        "\"SPDF\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<Integer> _SINGLETON_VALUE_PageNumber =
                new LazySingletonValue<>(
                        "pageNumber",
                        "1",
                        new TypeReference<Integer>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_ShowLogo =
                new LazySingletonValue<>(
                        "showLogo",
                        "true",
                        new TypeReference<Boolean>() {});
    }
}
