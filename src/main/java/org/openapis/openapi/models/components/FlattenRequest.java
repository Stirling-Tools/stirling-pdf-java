/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class FlattenRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private FlattenRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * True to flatten only the forms, false to flatten full PDF (Convert page to image)
     */
    @SpeakeasyMetadata("multipartForm:name=flattenOnlyForms")
    private Boolean flattenOnlyForms;

    @JsonCreator
    public FlattenRequest(
            @Nullable FlattenRequestFileInput fileInput,
            @Nullable String fileId,
            @Nullable Boolean flattenOnlyForms) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.flattenOnlyForms = Optional.ofNullable(flattenOnlyForms)
            .orElse(Builder._SINGLETON_VALUE_FlattenOnlyForms.value());
    }
    
    public FlattenRequest() {
        this(null, null, null);
    }

    public Optional<FlattenRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * True to flatten only the forms, false to flatten full PDF (Convert page to image)
     */
    public Optional<Boolean> flattenOnlyForms() {
        return Optional.ofNullable(this.flattenOnlyForms);
    }

    public static Builder builder() {
        return new Builder();
    }


    public FlattenRequest withFileInput(@Nullable FlattenRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public FlattenRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * True to flatten only the forms, false to flatten full PDF (Convert page to image)
     */
    public FlattenRequest withFlattenOnlyForms(@Nullable Boolean flattenOnlyForms) {
        this.flattenOnlyForms = flattenOnlyForms;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FlattenRequest other = (FlattenRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.flattenOnlyForms, other.flattenOnlyForms);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, flattenOnlyForms);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FlattenRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "flattenOnlyForms", flattenOnlyForms);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private FlattenRequestFileInput fileInput;

        private String fileId;

        private Boolean flattenOnlyForms;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable FlattenRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * True to flatten only the forms, false to flatten full PDF (Convert page to image)
         */
        public Builder flattenOnlyForms(@Nullable Boolean flattenOnlyForms) {
            this.flattenOnlyForms = flattenOnlyForms;
            return this;
        }

        public FlattenRequest build() {
            return new FlattenRequest(
                fileInput, fileId, flattenOnlyForms);
        }


        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_FlattenOnlyForms =
                new LazySingletonValue<>(
                        "flattenOnlyForms",
                        "false",
                        new TypeReference<Boolean>() {});
    }
}
