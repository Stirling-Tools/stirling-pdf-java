/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Float;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class OverlayImageRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private OverlayImageRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;


    @SpeakeasyMetadata("multipartForm:file,name=imageFile")
    private ImageFile imageFile;

    /**
     * The x-coordinate at which to place the top-left corner of the image.
     */
    @SpeakeasyMetadata("multipartForm:name=x")
    private Float x;

    /**
     * The y-coordinate at which to place the top-left corner of the image.
     */
    @SpeakeasyMetadata("multipartForm:name=y")
    private Float y;

    /**
     * Whether to overlay the image onto every page of the PDF.
     */
    @SpeakeasyMetadata("multipartForm:name=everyPage")
    private Boolean everyPage;

    @JsonCreator
    public OverlayImageRequest(
            @Nullable OverlayImageRequestFileInput fileInput,
            @Nullable String fileId,
            @Nonnull ImageFile imageFile,
            @Nullable Float x,
            @Nullable Float y,
            @Nullable Boolean everyPage) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.imageFile = Optional.ofNullable(imageFile)
            .orElseThrow(() -> new IllegalArgumentException("imageFile cannot be null"));
        this.x = Optional.ofNullable(x)
            .orElse(Builder._SINGLETON_VALUE_X.value());
        this.y = Optional.ofNullable(y)
            .orElse(Builder._SINGLETON_VALUE_Y.value());
        this.everyPage = Optional.ofNullable(everyPage)
            .orElse(Builder._SINGLETON_VALUE_EveryPage.value());
    }
    
    public OverlayImageRequest(
            @Nonnull ImageFile imageFile) {
        this(null, null, imageFile,
            null, null, null);
    }

    public Optional<OverlayImageRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    public ImageFile imageFile() {
        return this.imageFile;
    }

    /**
     * The x-coordinate at which to place the top-left corner of the image.
     */
    public Optional<Float> x() {
        return Optional.ofNullable(this.x);
    }

    /**
     * The y-coordinate at which to place the top-left corner of the image.
     */
    public Optional<Float> y() {
        return Optional.ofNullable(this.y);
    }

    /**
     * Whether to overlay the image onto every page of the PDF.
     */
    public Optional<Boolean> everyPage() {
        return Optional.ofNullable(this.everyPage);
    }

    public static Builder builder() {
        return new Builder();
    }


    public OverlayImageRequest withFileInput(@Nullable OverlayImageRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public OverlayImageRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    public OverlayImageRequest withImageFile(@Nonnull ImageFile imageFile) {
        this.imageFile = Utils.checkNotNull(imageFile, "imageFile");
        return this;
    }


    /**
     * The x-coordinate at which to place the top-left corner of the image.
     */
    public OverlayImageRequest withX(@Nullable Float x) {
        this.x = x;
        return this;
    }


    /**
     * The y-coordinate at which to place the top-left corner of the image.
     */
    public OverlayImageRequest withY(@Nullable Float y) {
        this.y = y;
        return this;
    }


    /**
     * Whether to overlay the image onto every page of the PDF.
     */
    public OverlayImageRequest withEveryPage(@Nullable Boolean everyPage) {
        this.everyPage = everyPage;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OverlayImageRequest other = (OverlayImageRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.imageFile, other.imageFile) &&
            Utils.enhancedDeepEquals(this.x, other.x) &&
            Utils.enhancedDeepEquals(this.y, other.y) &&
            Utils.enhancedDeepEquals(this.everyPage, other.everyPage);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, imageFile,
            x, y, everyPage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OverlayImageRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "imageFile", imageFile,
                "x", x,
                "y", y,
                "everyPage", everyPage);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private OverlayImageRequestFileInput fileInput;

        private String fileId;

        private ImageFile imageFile;

        private Float x;

        private Float y;

        private Boolean everyPage;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable OverlayImageRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        public Builder imageFile(@Nonnull ImageFile imageFile) {
            this.imageFile = Utils.checkNotNull(imageFile, "imageFile");
            return this;
        }

        /**
         * The x-coordinate at which to place the top-left corner of the image.
         */
        public Builder x(@Nullable Float x) {
            this.x = x;
            return this;
        }

        /**
         * The y-coordinate at which to place the top-left corner of the image.
         */
        public Builder y(@Nullable Float y) {
            this.y = y;
            return this;
        }

        /**
         * Whether to overlay the image onto every page of the PDF.
         */
        public Builder everyPage(@Nullable Boolean everyPage) {
            this.everyPage = everyPage;
            return this;
        }

        public OverlayImageRequest build() {
            return new OverlayImageRequest(
                fileInput, fileId, imageFile,
                x, y, everyPage);
        }


        private static final LazySingletonValue<Float> _SINGLETON_VALUE_X =
                new LazySingletonValue<>(
                        "x",
                        "0",
                        new TypeReference<Float>() {});

        private static final LazySingletonValue<Float> _SINGLETON_VALUE_Y =
                new LazySingletonValue<>(
                        "y",
                        "0",
                        new TypeReference<Float>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_EveryPage =
                new LazySingletonValue<>(
                        "everyPage",
                        "false",
                        new TypeReference<Boolean>() {});
    }
}
