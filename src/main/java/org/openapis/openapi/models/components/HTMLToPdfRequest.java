/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Float;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class HTMLToPdfRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private HTMLToPdfRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * Zoom level for displaying the website. Default is '1'.
     */
    @SpeakeasyMetadata("multipartForm:name=zoom")
    private Float zoom;

    @JsonCreator
    public HTMLToPdfRequest(
            @Nullable HTMLToPdfRequestFileInput fileInput,
            @Nullable String fileId,
            @Nullable Float zoom) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.zoom = Optional.ofNullable(zoom)
            .orElse(Builder._SINGLETON_VALUE_Zoom.value());
    }
    
    public HTMLToPdfRequest() {
        this(null, null, null);
    }

    public Optional<HTMLToPdfRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * Zoom level for displaying the website. Default is '1'.
     */
    public Optional<Float> zoom() {
        return Optional.ofNullable(this.zoom);
    }

    public static Builder builder() {
        return new Builder();
    }


    public HTMLToPdfRequest withFileInput(@Nullable HTMLToPdfRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public HTMLToPdfRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * Zoom level for displaying the website. Default is '1'.
     */
    public HTMLToPdfRequest withZoom(@Nullable Float zoom) {
        this.zoom = zoom;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HTMLToPdfRequest other = (HTMLToPdfRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.zoom, other.zoom);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, zoom);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HTMLToPdfRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "zoom", zoom);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private HTMLToPdfRequestFileInput fileInput;

        private String fileId;

        private Float zoom;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable HTMLToPdfRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * Zoom level for displaying the website. Default is '1'.
         */
        public Builder zoom(@Nullable Float zoom) {
            this.zoom = zoom;
            return this;
        }

        public HTMLToPdfRequest build() {
            return new HTMLToPdfRequest(
                fileInput, fileId, zoom);
        }


        private static final LazySingletonValue<Float> _SINGLETON_VALUE_Zoom =
                new LazySingletonValue<>(
                        "zoom",
                        "1",
                        new TypeReference<Float>() {});
    }
}
