/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class FilePathAsPath {

    private Boolean absolute;


    private FileSystem fileSystem;


    private Integer nameCount;

    @JsonCreator
    public FilePathAsPath(
            @Nullable Boolean absolute,
            @Nullable FileSystem fileSystem,
            @Nullable Integer nameCount) {
        this.absolute = absolute;
        this.fileSystem = fileSystem;
        this.nameCount = nameCount;
    }
    
    public FilePathAsPath() {
        this(null, null, null);
    }

    public Optional<Boolean> absolute() {
        return Optional.ofNullable(this.absolute);
    }

    public Optional<FileSystem> fileSystem() {
        return Optional.ofNullable(this.fileSystem);
    }

    public Optional<Integer> nameCount() {
        return Optional.ofNullable(this.nameCount);
    }

    public static Builder builder() {
        return new Builder();
    }


    public FilePathAsPath withAbsolute(@Nullable Boolean absolute) {
        this.absolute = absolute;
        return this;
    }


    public FilePathAsPath withFileSystem(@Nullable FileSystem fileSystem) {
        this.fileSystem = fileSystem;
        return this;
    }


    public FilePathAsPath withNameCount(@Nullable Integer nameCount) {
        this.nameCount = nameCount;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FilePathAsPath other = (FilePathAsPath) o;
        return 
            Utils.enhancedDeepEquals(this.absolute, other.absolute) &&
            Utils.enhancedDeepEquals(this.fileSystem, other.fileSystem) &&
            Utils.enhancedDeepEquals(this.nameCount, other.nameCount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            absolute, fileSystem, nameCount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FilePathAsPath.class,
                "absolute", absolute,
                "fileSystem", fileSystem,
                "nameCount", nameCount);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Boolean absolute;

        private FileSystem fileSystem;

        private Integer nameCount;

        private Builder() {
          // force use of static builder() method
        }

        public Builder absolute(@Nullable Boolean absolute) {
            this.absolute = absolute;
            return this;
        }

        public Builder fileSystem(@Nullable FileSystem fileSystem) {
            this.fileSystem = fileSystem;
            return this;
        }

        public Builder nameCount(@Nullable Integer nameCount) {
            this.nameCount = nameCount;
            return this;
        }

        public FilePathAsPath build() {
            return new FilePathAsPath(
                absolute, fileSystem, nameCount);
        }

    }
}
