/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * RedactionArea
 * 
 * <p>A list of areas that should be redacted
 */
public class RedactionArea {
    /**
     * The left edge point of the area to be redacted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("x")
    private Double x;

    /**
     * The top edge point of the area to be redacted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("y")
    private Double y;

    /**
     * The height of the area to be redacted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    private Double height;

    /**
     * The width of the area to be redacted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    private Double width;

    /**
     * The page on which the area should be redacted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page")
    private Integer page;

    /**
     * The color used to redact the specified area.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("color")
    private String color;

    @JsonCreator
    public RedactionArea(
            @JsonProperty("x") @Nullable Double x,
            @JsonProperty("y") @Nullable Double y,
            @JsonProperty("height") @Nullable Double height,
            @JsonProperty("width") @Nullable Double width,
            @JsonProperty("page") @Nullable Integer page,
            @JsonProperty("color") @Nullable String color) {
        this.x = x;
        this.y = y;
        this.height = height;
        this.width = width;
        this.page = page;
        this.color = color;
    }
    
    public RedactionArea() {
        this(null, null, null,
            null, null, null);
    }

    /**
     * The left edge point of the area to be redacted.
     */
    public Optional<Double> x() {
        return Optional.ofNullable(this.x);
    }

    /**
     * The top edge point of the area to be redacted.
     */
    public Optional<Double> y() {
        return Optional.ofNullable(this.y);
    }

    /**
     * The height of the area to be redacted.
     */
    public Optional<Double> height() {
        return Optional.ofNullable(this.height);
    }

    /**
     * The width of the area to be redacted.
     */
    public Optional<Double> width() {
        return Optional.ofNullable(this.width);
    }

    /**
     * The page on which the area should be redacted.
     */
    public Optional<Integer> page() {
        return Optional.ofNullable(this.page);
    }

    /**
     * The color used to redact the specified area.
     */
    public Optional<String> color() {
        return Optional.ofNullable(this.color);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The left edge point of the area to be redacted.
     */
    public RedactionArea withX(@Nullable Double x) {
        this.x = x;
        return this;
    }


    /**
     * The top edge point of the area to be redacted.
     */
    public RedactionArea withY(@Nullable Double y) {
        this.y = y;
        return this;
    }


    /**
     * The height of the area to be redacted.
     */
    public RedactionArea withHeight(@Nullable Double height) {
        this.height = height;
        return this;
    }


    /**
     * The width of the area to be redacted.
     */
    public RedactionArea withWidth(@Nullable Double width) {
        this.width = width;
        return this;
    }


    /**
     * The page on which the area should be redacted.
     */
    public RedactionArea withPage(@Nullable Integer page) {
        this.page = page;
        return this;
    }


    /**
     * The color used to redact the specified area.
     */
    public RedactionArea withColor(@Nullable String color) {
        this.color = color;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RedactionArea other = (RedactionArea) o;
        return 
            Utils.enhancedDeepEquals(this.x, other.x) &&
            Utils.enhancedDeepEquals(this.y, other.y) &&
            Utils.enhancedDeepEquals(this.height, other.height) &&
            Utils.enhancedDeepEquals(this.width, other.width) &&
            Utils.enhancedDeepEquals(this.page, other.page) &&
            Utils.enhancedDeepEquals(this.color, other.color);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            x, y, height,
            width, page, color);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RedactionArea.class,
                "x", x,
                "y", y,
                "height", height,
                "width", width,
                "page", page,
                "color", color);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Double x;

        private Double y;

        private Double height;

        private Double width;

        private Integer page;

        private String color;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The left edge point of the area to be redacted.
         */
        public Builder x(@Nullable Double x) {
            this.x = x;
            return this;
        }

        /**
         * The top edge point of the area to be redacted.
         */
        public Builder y(@Nullable Double y) {
            this.y = y;
            return this;
        }

        /**
         * The height of the area to be redacted.
         */
        public Builder height(@Nullable Double height) {
            this.height = height;
            return this;
        }

        /**
         * The width of the area to be redacted.
         */
        public Builder width(@Nullable Double width) {
            this.width = width;
            return this;
        }

        /**
         * The page on which the area should be redacted.
         */
        public Builder page(@Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * The color used to redact the specified area.
         */
        public Builder color(@Nullable String color) {
            this.color = color;
            return this;
        }

        public RedactionArea build() {
            return new RedactionArea(
                x, y, height,
                width, page, color);
        }

    }
}
