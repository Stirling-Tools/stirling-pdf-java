/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class TeamDetailsData {

    private Team team;


    private List<User> teamUsers;


    private List<User> availableUsers;


    private Map<String, OffsetDateTime> userLastRequest;

    @JsonCreator
    public TeamDetailsData(
            @Nullable Team team,
            @Nullable List<User> teamUsers,
            @Nullable List<User> availableUsers,
            @Nullable Map<String, OffsetDateTime> userLastRequest) {
        this.team = team;
        this.teamUsers = teamUsers;
        this.availableUsers = availableUsers;
        this.userLastRequest = userLastRequest;
    }
    
    public TeamDetailsData() {
        this(null, null, null,
            null);
    }

    public Optional<Team> team() {
        return Optional.ofNullable(this.team);
    }

    public Optional<List<User>> teamUsers() {
        return Optional.ofNullable(this.teamUsers);
    }

    public Optional<List<User>> availableUsers() {
        return Optional.ofNullable(this.availableUsers);
    }

    public Optional<Map<String, OffsetDateTime>> userLastRequest() {
        return Optional.ofNullable(this.userLastRequest);
    }

    public static Builder builder() {
        return new Builder();
    }


    public TeamDetailsData withTeam(@Nullable Team team) {
        this.team = team;
        return this;
    }


    public TeamDetailsData withTeamUsers(@Nullable List<User> teamUsers) {
        this.teamUsers = teamUsers;
        return this;
    }


    public TeamDetailsData withAvailableUsers(@Nullable List<User> availableUsers) {
        this.availableUsers = availableUsers;
        return this;
    }


    public TeamDetailsData withUserLastRequest(@Nullable Map<String, OffsetDateTime> userLastRequest) {
        this.userLastRequest = userLastRequest;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TeamDetailsData other = (TeamDetailsData) o;
        return 
            Utils.enhancedDeepEquals(this.team, other.team) &&
            Utils.enhancedDeepEquals(this.teamUsers, other.teamUsers) &&
            Utils.enhancedDeepEquals(this.availableUsers, other.availableUsers) &&
            Utils.enhancedDeepEquals(this.userLastRequest, other.userLastRequest);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            team, teamUsers, availableUsers,
            userLastRequest);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TeamDetailsData.class,
                "team", team,
                "teamUsers", teamUsers,
                "availableUsers", availableUsers,
                "userLastRequest", userLastRequest);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Team team;

        private List<User> teamUsers;

        private List<User> availableUsers;

        private Map<String, OffsetDateTime> userLastRequest;

        private Builder() {
          // force use of static builder() method
        }

        public Builder team(@Nullable Team team) {
            this.team = team;
            return this;
        }

        public Builder teamUsers(@Nullable List<User> teamUsers) {
            this.teamUsers = teamUsers;
            return this;
        }

        public Builder availableUsers(@Nullable List<User> availableUsers) {
            this.availableUsers = availableUsers;
            return this;
        }

        public Builder userLastRequest(@Nullable Map<String, OffsetDateTime> userLastRequest) {
            this.userLastRequest = userLastRequest;
            return this;
        }

        public TeamDetailsData build() {
            return new TeamDetailsData(
                team, teamUsers, availableUsers,
                userLastRequest);
        }

    }
}
