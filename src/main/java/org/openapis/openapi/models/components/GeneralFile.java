/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class GeneralFile {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private GeneralFileFileInput fileInput;

    @JsonCreator
    public GeneralFile(
            @Nonnull GeneralFileFileInput fileInput) {
        this.fileInput = Optional.ofNullable(fileInput)
            .orElseThrow(() -> new IllegalArgumentException("fileInput cannot be null"));
    }

    public GeneralFileFileInput fileInput() {
        return this.fileInput;
    }

    public static Builder builder() {
        return new Builder();
    }


    public GeneralFile withFileInput(@Nonnull GeneralFileFileInput fileInput) {
        this.fileInput = Utils.checkNotNull(fileInput, "fileInput");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GeneralFile other = (GeneralFile) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GeneralFile.class,
                "fileInput", fileInput);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private GeneralFileFileInput fileInput;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nonnull GeneralFileFileInput fileInput) {
            this.fileInput = Utils.checkNotNull(fileInput, "fileInput");
            return this;
        }

        public GeneralFile build() {
            return new GeneralFile(
                fileInput);
        }

    }
}
