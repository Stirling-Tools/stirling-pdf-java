/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class AddWatermarkRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private AddWatermarkRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * The watermark type (text or image)
     */
    @SpeakeasyMetadata("multipartForm:name=watermarkType")
    private WatermarkType watermarkType;

    /**
     * The watermark text
     */
    @SpeakeasyMetadata("multipartForm:name=watermarkText")
    private String watermarkText;


    @SpeakeasyMetadata("multipartForm:file,name=watermarkImage")
    private WatermarkImage watermarkImage;

    /**
     * The selected alphabet
     */
    @SpeakeasyMetadata("multipartForm:name=alphabet")
    private AddWatermarkRequestAlphabet alphabet;

    /**
     * The font size of the watermark text
     */
    @SpeakeasyMetadata("multipartForm:name=fontSize")
    private Float fontSize;

    /**
     * The rotation of the watermark in degrees
     */
    @SpeakeasyMetadata("multipartForm:name=rotation")
    private Float rotation;

    /**
     * The opacity of the watermark (0.0 - 1.0)
     */
    @SpeakeasyMetadata("multipartForm:name=opacity")
    private Float opacity;

    /**
     * The width spacer between watermark elements
     */
    @SpeakeasyMetadata("multipartForm:name=widthSpacer")
    private Integer widthSpacer;

    /**
     * The height spacer between watermark elements
     */
    @SpeakeasyMetadata("multipartForm:name=heightSpacer")
    private Integer heightSpacer;

    /**
     * The color for watermark
     */
    @SpeakeasyMetadata("multipartForm:name=customColor")
    private String customColor;

    /**
     * Convert the redacted PDF to an image
     */
    @SpeakeasyMetadata("multipartForm:name=convertPDFToImage")
    private Boolean convertPDFToImage;

    @JsonCreator
    public AddWatermarkRequest(
            @Nullable AddWatermarkRequestFileInput fileInput,
            @Nullable String fileId,
            @Nonnull WatermarkType watermarkType,
            @Nullable String watermarkText,
            @Nullable WatermarkImage watermarkImage,
            @Nullable AddWatermarkRequestAlphabet alphabet,
            @Nullable Float fontSize,
            @Nullable Float rotation,
            @Nullable Float opacity,
            @Nullable Integer widthSpacer,
            @Nullable Integer heightSpacer,
            @Nullable String customColor,
            @Nullable Boolean convertPDFToImage) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.watermarkType = Optional.ofNullable(watermarkType)
            .orElseThrow(() -> new IllegalArgumentException("watermarkType cannot be null"));
        this.watermarkText = Optional.ofNullable(watermarkText)
            .orElse(Builder._SINGLETON_VALUE_WatermarkText.value());
        this.watermarkImage = watermarkImage;
        this.alphabet = Optional.ofNullable(alphabet)
            .orElse(Builder._SINGLETON_VALUE_Alphabet.value());
        this.fontSize = Optional.ofNullable(fontSize)
            .orElse(Builder._SINGLETON_VALUE_FontSize.value());
        this.rotation = Optional.ofNullable(rotation)
            .orElse(Builder._SINGLETON_VALUE_Rotation.value());
        this.opacity = Optional.ofNullable(opacity)
            .orElse(Builder._SINGLETON_VALUE_Opacity.value());
        this.widthSpacer = Optional.ofNullable(widthSpacer)
            .orElse(Builder._SINGLETON_VALUE_WidthSpacer.value());
        this.heightSpacer = Optional.ofNullable(heightSpacer)
            .orElse(Builder._SINGLETON_VALUE_HeightSpacer.value());
        this.customColor = Optional.ofNullable(customColor)
            .orElse(Builder._SINGLETON_VALUE_CustomColor.value());
        this.convertPDFToImage = Optional.ofNullable(convertPDFToImage)
            .orElse(Builder._SINGLETON_VALUE_ConvertPDFToImage.value());
    }
    
    public AddWatermarkRequest(
            @Nonnull WatermarkType watermarkType) {
        this(null, null, watermarkType,
            null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    public Optional<AddWatermarkRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * The watermark type (text or image)
     */
    public WatermarkType watermarkType() {
        return this.watermarkType;
    }

    /**
     * The watermark text
     */
    public Optional<String> watermarkText() {
        return Optional.ofNullable(this.watermarkText);
    }

    public Optional<WatermarkImage> watermarkImage() {
        return Optional.ofNullable(this.watermarkImage);
    }

    /**
     * The selected alphabet
     */
    public Optional<AddWatermarkRequestAlphabet> alphabet() {
        return Optional.ofNullable(this.alphabet);
    }

    /**
     * The font size of the watermark text
     */
    public Optional<Float> fontSize() {
        return Optional.ofNullable(this.fontSize);
    }

    /**
     * The rotation of the watermark in degrees
     */
    public Optional<Float> rotation() {
        return Optional.ofNullable(this.rotation);
    }

    /**
     * The opacity of the watermark (0.0 - 1.0)
     */
    public Optional<Float> opacity() {
        return Optional.ofNullable(this.opacity);
    }

    /**
     * The width spacer between watermark elements
     */
    public Optional<Integer> widthSpacer() {
        return Optional.ofNullable(this.widthSpacer);
    }

    /**
     * The height spacer between watermark elements
     */
    public Optional<Integer> heightSpacer() {
        return Optional.ofNullable(this.heightSpacer);
    }

    /**
     * The color for watermark
     */
    public Optional<String> customColor() {
        return Optional.ofNullable(this.customColor);
    }

    /**
     * Convert the redacted PDF to an image
     */
    public Optional<Boolean> convertPDFToImage() {
        return Optional.ofNullable(this.convertPDFToImage);
    }

    public static Builder builder() {
        return new Builder();
    }


    public AddWatermarkRequest withFileInput(@Nullable AddWatermarkRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public AddWatermarkRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * The watermark type (text or image)
     */
    public AddWatermarkRequest withWatermarkType(@Nonnull WatermarkType watermarkType) {
        this.watermarkType = Utils.checkNotNull(watermarkType, "watermarkType");
        return this;
    }


    /**
     * The watermark text
     */
    public AddWatermarkRequest withWatermarkText(@Nullable String watermarkText) {
        this.watermarkText = watermarkText;
        return this;
    }


    public AddWatermarkRequest withWatermarkImage(@Nullable WatermarkImage watermarkImage) {
        this.watermarkImage = watermarkImage;
        return this;
    }


    /**
     * The selected alphabet
     */
    public AddWatermarkRequest withAlphabet(@Nullable AddWatermarkRequestAlphabet alphabet) {
        this.alphabet = alphabet;
        return this;
    }


    /**
     * The font size of the watermark text
     */
    public AddWatermarkRequest withFontSize(@Nullable Float fontSize) {
        this.fontSize = fontSize;
        return this;
    }


    /**
     * The rotation of the watermark in degrees
     */
    public AddWatermarkRequest withRotation(@Nullable Float rotation) {
        this.rotation = rotation;
        return this;
    }


    /**
     * The opacity of the watermark (0.0 - 1.0)
     */
    public AddWatermarkRequest withOpacity(@Nullable Float opacity) {
        this.opacity = opacity;
        return this;
    }


    /**
     * The width spacer between watermark elements
     */
    public AddWatermarkRequest withWidthSpacer(@Nullable Integer widthSpacer) {
        this.widthSpacer = widthSpacer;
        return this;
    }


    /**
     * The height spacer between watermark elements
     */
    public AddWatermarkRequest withHeightSpacer(@Nullable Integer heightSpacer) {
        this.heightSpacer = heightSpacer;
        return this;
    }


    /**
     * The color for watermark
     */
    public AddWatermarkRequest withCustomColor(@Nullable String customColor) {
        this.customColor = customColor;
        return this;
    }


    /**
     * Convert the redacted PDF to an image
     */
    public AddWatermarkRequest withConvertPDFToImage(@Nullable Boolean convertPDFToImage) {
        this.convertPDFToImage = convertPDFToImage;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddWatermarkRequest other = (AddWatermarkRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.watermarkType, other.watermarkType) &&
            Utils.enhancedDeepEquals(this.watermarkText, other.watermarkText) &&
            Utils.enhancedDeepEquals(this.watermarkImage, other.watermarkImage) &&
            Utils.enhancedDeepEquals(this.alphabet, other.alphabet) &&
            Utils.enhancedDeepEquals(this.fontSize, other.fontSize) &&
            Utils.enhancedDeepEquals(this.rotation, other.rotation) &&
            Utils.enhancedDeepEquals(this.opacity, other.opacity) &&
            Utils.enhancedDeepEquals(this.widthSpacer, other.widthSpacer) &&
            Utils.enhancedDeepEquals(this.heightSpacer, other.heightSpacer) &&
            Utils.enhancedDeepEquals(this.customColor, other.customColor) &&
            Utils.enhancedDeepEquals(this.convertPDFToImage, other.convertPDFToImage);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, watermarkType,
            watermarkText, watermarkImage, alphabet,
            fontSize, rotation, opacity,
            widthSpacer, heightSpacer, customColor,
            convertPDFToImage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AddWatermarkRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "watermarkType", watermarkType,
                "watermarkText", watermarkText,
                "watermarkImage", watermarkImage,
                "alphabet", alphabet,
                "fontSize", fontSize,
                "rotation", rotation,
                "opacity", opacity,
                "widthSpacer", widthSpacer,
                "heightSpacer", heightSpacer,
                "customColor", customColor,
                "convertPDFToImage", convertPDFToImage);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private AddWatermarkRequestFileInput fileInput;

        private String fileId;

        private WatermarkType watermarkType;

        private String watermarkText;

        private WatermarkImage watermarkImage;

        private AddWatermarkRequestAlphabet alphabet;

        private Float fontSize;

        private Float rotation;

        private Float opacity;

        private Integer widthSpacer;

        private Integer heightSpacer;

        private String customColor;

        private Boolean convertPDFToImage;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable AddWatermarkRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * The watermark type (text or image)
         */
        public Builder watermarkType(@Nonnull WatermarkType watermarkType) {
            this.watermarkType = Utils.checkNotNull(watermarkType, "watermarkType");
            return this;
        }

        /**
         * The watermark text
         */
        public Builder watermarkText(@Nullable String watermarkText) {
            this.watermarkText = watermarkText;
            return this;
        }

        public Builder watermarkImage(@Nullable WatermarkImage watermarkImage) {
            this.watermarkImage = watermarkImage;
            return this;
        }

        /**
         * The selected alphabet
         */
        public Builder alphabet(@Nullable AddWatermarkRequestAlphabet alphabet) {
            this.alphabet = alphabet;
            return this;
        }

        /**
         * The font size of the watermark text
         */
        public Builder fontSize(@Nullable Float fontSize) {
            this.fontSize = fontSize;
            return this;
        }

        /**
         * The rotation of the watermark in degrees
         */
        public Builder rotation(@Nullable Float rotation) {
            this.rotation = rotation;
            return this;
        }

        /**
         * The opacity of the watermark (0.0 - 1.0)
         */
        public Builder opacity(@Nullable Float opacity) {
            this.opacity = opacity;
            return this;
        }

        /**
         * The width spacer between watermark elements
         */
        public Builder widthSpacer(@Nullable Integer widthSpacer) {
            this.widthSpacer = widthSpacer;
            return this;
        }

        /**
         * The height spacer between watermark elements
         */
        public Builder heightSpacer(@Nullable Integer heightSpacer) {
            this.heightSpacer = heightSpacer;
            return this;
        }

        /**
         * The color for watermark
         */
        public Builder customColor(@Nullable String customColor) {
            this.customColor = customColor;
            return this;
        }

        /**
         * Convert the redacted PDF to an image
         */
        public Builder convertPDFToImage(@Nullable Boolean convertPDFToImage) {
            this.convertPDFToImage = convertPDFToImage;
            return this;
        }

        public AddWatermarkRequest build() {
            return new AddWatermarkRequest(
                fileInput, fileId, watermarkType,
                watermarkText, watermarkImage, alphabet,
                fontSize, rotation, opacity,
                widthSpacer, heightSpacer, customColor,
                convertPDFToImage);
        }


        private static final LazySingletonValue<String> _SINGLETON_VALUE_WatermarkText =
                new LazySingletonValue<>(
                        "watermarkText",
                        "\"Stirling Software\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<AddWatermarkRequestAlphabet> _SINGLETON_VALUE_Alphabet =
                new LazySingletonValue<>(
                        "alphabet",
                        "\"roman\"",
                        new TypeReference<AddWatermarkRequestAlphabet>() {});

        private static final LazySingletonValue<Float> _SINGLETON_VALUE_FontSize =
                new LazySingletonValue<>(
                        "fontSize",
                        "30",
                        new TypeReference<Float>() {});

        private static final LazySingletonValue<Float> _SINGLETON_VALUE_Rotation =
                new LazySingletonValue<>(
                        "rotation",
                        "0",
                        new TypeReference<Float>() {});

        private static final LazySingletonValue<Float> _SINGLETON_VALUE_Opacity =
                new LazySingletonValue<>(
                        "opacity",
                        "0.5",
                        new TypeReference<Float>() {});

        private static final LazySingletonValue<Integer> _SINGLETON_VALUE_WidthSpacer =
                new LazySingletonValue<>(
                        "widthSpacer",
                        "50",
                        new TypeReference<Integer>() {});

        private static final LazySingletonValue<Integer> _SINGLETON_VALUE_HeightSpacer =
                new LazySingletonValue<>(
                        "heightSpacer",
                        "50",
                        new TypeReference<Integer>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_CustomColor =
                new LazySingletonValue<>(
                        "customColor",
                        "\"#d3d3d3\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_ConvertPDFToImage =
                new LazySingletonValue<>(
                        "convertPDFToImage",
                        "false",
                        new TypeReference<Boolean>() {});
    }
}
