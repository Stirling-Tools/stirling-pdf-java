/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class User {

    private Long id;


    private String username;


    private String password;


    private String apiKey;


    private Boolean enabled;


    private Boolean isFirstLogin;


    private String roleName;


    private String authenticationType;


    private List<Authority> authorities;


    private Team team;


    private Map<String, String> settings;


    private Boolean firstLogin;


    private String rolesAsString;


    private Boolean accountNonExpired;


    private Boolean credentialsNonExpired;


    private Boolean accountNonLocked;

    @JsonCreator
    public User(
            @Nullable Long id,
            @Nullable String username,
            @Nullable String password,
            @Nullable String apiKey,
            @Nullable Boolean enabled,
            @Nullable Boolean isFirstLogin,
            @Nullable String roleName,
            @Nullable String authenticationType,
            @Nullable List<Authority> authorities,
            @Nullable Team team,
            @Nullable Map<String, String> settings,
            @Nullable Boolean firstLogin,
            @Nullable String rolesAsString,
            @Nullable Boolean accountNonExpired,
            @Nullable Boolean credentialsNonExpired,
            @Nullable Boolean accountNonLocked) {
        this.id = id;
        this.username = username;
        this.password = password;
        this.apiKey = apiKey;
        this.enabled = enabled;
        this.isFirstLogin = isFirstLogin;
        this.roleName = roleName;
        this.authenticationType = authenticationType;
        this.authorities = authorities;
        this.team = team;
        this.settings = settings;
        this.firstLogin = firstLogin;
        this.rolesAsString = rolesAsString;
        this.accountNonExpired = accountNonExpired;
        this.credentialsNonExpired = credentialsNonExpired;
        this.accountNonLocked = accountNonLocked;
    }
    
    public User() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    public Optional<Long> id() {
        return Optional.ofNullable(this.id);
    }

    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }

    public Optional<String> apiKey() {
        return Optional.ofNullable(this.apiKey);
    }

    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    public Optional<Boolean> isFirstLogin() {
        return Optional.ofNullable(this.isFirstLogin);
    }

    public Optional<String> roleName() {
        return Optional.ofNullable(this.roleName);
    }

    public Optional<String> authenticationType() {
        return Optional.ofNullable(this.authenticationType);
    }

    public Optional<List<Authority>> authorities() {
        return Optional.ofNullable(this.authorities);
    }

    public Optional<Team> team() {
        return Optional.ofNullable(this.team);
    }

    public Optional<Map<String, String>> settings() {
        return Optional.ofNullable(this.settings);
    }

    public Optional<Boolean> firstLogin() {
        return Optional.ofNullable(this.firstLogin);
    }

    public Optional<String> rolesAsString() {
        return Optional.ofNullable(this.rolesAsString);
    }

    public Optional<Boolean> accountNonExpired() {
        return Optional.ofNullable(this.accountNonExpired);
    }

    public Optional<Boolean> credentialsNonExpired() {
        return Optional.ofNullable(this.credentialsNonExpired);
    }

    public Optional<Boolean> accountNonLocked() {
        return Optional.ofNullable(this.accountNonLocked);
    }

    public static Builder builder() {
        return new Builder();
    }


    public User withId(@Nullable Long id) {
        this.id = id;
        return this;
    }


    public User withUsername(@Nullable String username) {
        this.username = username;
        return this;
    }


    public User withPassword(@Nullable String password) {
        this.password = password;
        return this;
    }


    public User withApiKey(@Nullable String apiKey) {
        this.apiKey = apiKey;
        return this;
    }


    public User withEnabled(@Nullable Boolean enabled) {
        this.enabled = enabled;
        return this;
    }


    public User withIsFirstLogin(@Nullable Boolean isFirstLogin) {
        this.isFirstLogin = isFirstLogin;
        return this;
    }


    public User withRoleName(@Nullable String roleName) {
        this.roleName = roleName;
        return this;
    }


    public User withAuthenticationType(@Nullable String authenticationType) {
        this.authenticationType = authenticationType;
        return this;
    }


    public User withAuthorities(@Nullable List<Authority> authorities) {
        this.authorities = authorities;
        return this;
    }


    public User withTeam(@Nullable Team team) {
        this.team = team;
        return this;
    }


    public User withSettings(@Nullable Map<String, String> settings) {
        this.settings = settings;
        return this;
    }


    public User withFirstLogin(@Nullable Boolean firstLogin) {
        this.firstLogin = firstLogin;
        return this;
    }


    public User withRolesAsString(@Nullable String rolesAsString) {
        this.rolesAsString = rolesAsString;
        return this;
    }


    public User withAccountNonExpired(@Nullable Boolean accountNonExpired) {
        this.accountNonExpired = accountNonExpired;
        return this;
    }


    public User withCredentialsNonExpired(@Nullable Boolean credentialsNonExpired) {
        this.credentialsNonExpired = credentialsNonExpired;
        return this;
    }


    public User withAccountNonLocked(@Nullable Boolean accountNonLocked) {
        this.accountNonLocked = accountNonLocked;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        User other = (User) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.username, other.username) &&
            Utils.enhancedDeepEquals(this.password, other.password) &&
            Utils.enhancedDeepEquals(this.apiKey, other.apiKey) &&
            Utils.enhancedDeepEquals(this.enabled, other.enabled) &&
            Utils.enhancedDeepEquals(this.isFirstLogin, other.isFirstLogin) &&
            Utils.enhancedDeepEquals(this.roleName, other.roleName) &&
            Utils.enhancedDeepEquals(this.authenticationType, other.authenticationType) &&
            Utils.enhancedDeepEquals(this.authorities, other.authorities) &&
            Utils.enhancedDeepEquals(this.team, other.team) &&
            Utils.enhancedDeepEquals(this.settings, other.settings) &&
            Utils.enhancedDeepEquals(this.firstLogin, other.firstLogin) &&
            Utils.enhancedDeepEquals(this.rolesAsString, other.rolesAsString) &&
            Utils.enhancedDeepEquals(this.accountNonExpired, other.accountNonExpired) &&
            Utils.enhancedDeepEquals(this.credentialsNonExpired, other.credentialsNonExpired) &&
            Utils.enhancedDeepEquals(this.accountNonLocked, other.accountNonLocked);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, username, password,
            apiKey, enabled, isFirstLogin,
            roleName, authenticationType, authorities,
            team, settings, firstLogin,
            rolesAsString, accountNonExpired, credentialsNonExpired,
            accountNonLocked);
    }
    
    @Override
    public String toString() {
        return Utils.toString(User.class,
                "id", id,
                "username", username,
                "password", password,
                "apiKey", apiKey,
                "enabled", enabled,
                "isFirstLogin", isFirstLogin,
                "roleName", roleName,
                "authenticationType", authenticationType,
                "authorities", authorities,
                "team", team,
                "settings", settings,
                "firstLogin", firstLogin,
                "rolesAsString", rolesAsString,
                "accountNonExpired", accountNonExpired,
                "credentialsNonExpired", credentialsNonExpired,
                "accountNonLocked", accountNonLocked);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long id;

        private String username;

        private String password;

        private String apiKey;

        private Boolean enabled;

        private Boolean isFirstLogin;

        private String roleName;

        private String authenticationType;

        private List<Authority> authorities;

        private Team team;

        private Map<String, String> settings;

        private Boolean firstLogin;

        private String rolesAsString;

        private Boolean accountNonExpired;

        private Boolean credentialsNonExpired;

        private Boolean accountNonLocked;

        private Builder() {
          // force use of static builder() method
        }

        public Builder id(@Nullable Long id) {
            this.id = id;
            return this;
        }

        public Builder username(@Nullable String username) {
            this.username = username;
            return this;
        }

        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }

        public Builder apiKey(@Nullable String apiKey) {
            this.apiKey = apiKey;
            return this;
        }

        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder isFirstLogin(@Nullable Boolean isFirstLogin) {
            this.isFirstLogin = isFirstLogin;
            return this;
        }

        public Builder roleName(@Nullable String roleName) {
            this.roleName = roleName;
            return this;
        }

        public Builder authenticationType(@Nullable String authenticationType) {
            this.authenticationType = authenticationType;
            return this;
        }

        public Builder authorities(@Nullable List<Authority> authorities) {
            this.authorities = authorities;
            return this;
        }

        public Builder team(@Nullable Team team) {
            this.team = team;
            return this;
        }

        public Builder settings(@Nullable Map<String, String> settings) {
            this.settings = settings;
            return this;
        }

        public Builder firstLogin(@Nullable Boolean firstLogin) {
            this.firstLogin = firstLogin;
            return this;
        }

        public Builder rolesAsString(@Nullable String rolesAsString) {
            this.rolesAsString = rolesAsString;
            return this;
        }

        public Builder accountNonExpired(@Nullable Boolean accountNonExpired) {
            this.accountNonExpired = accountNonExpired;
            return this;
        }

        public Builder credentialsNonExpired(@Nullable Boolean credentialsNonExpired) {
            this.credentialsNonExpired = credentialsNonExpired;
            return this;
        }

        public Builder accountNonLocked(@Nullable Boolean accountNonLocked) {
            this.accountNonLocked = accountNonLocked;
            return this;
        }

        public User build() {
            return new User(
                id, username, password,
                apiKey, enabled, isFirstLogin,
                roleName, authenticationType, authorities,
                team, settings, firstLogin,
                rolesAsString, accountNonExpired, credentialsNonExpired,
                accountNonLocked);
        }

    }
}
