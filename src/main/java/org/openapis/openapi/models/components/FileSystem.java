/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class FileSystem {

    private Boolean open;


    private Boolean readOnly;


    private String separator;


    private Object rootDirectories;


    private Object fileStores;


    private Object userPrincipalLookupService;

    @JsonCreator
    public FileSystem(
            @Nullable Boolean open,
            @Nullable Boolean readOnly,
            @Nullable String separator,
            @Nullable Object rootDirectories,
            @Nullable Object fileStores,
            @Nullable Object userPrincipalLookupService) {
        this.open = open;
        this.readOnly = readOnly;
        this.separator = separator;
        this.rootDirectories = rootDirectories;
        this.fileStores = fileStores;
        this.userPrincipalLookupService = userPrincipalLookupService;
    }
    
    public FileSystem() {
        this(null, null, null,
            null, null, null);
    }

    public Optional<Boolean> open() {
        return Optional.ofNullable(this.open);
    }

    public Optional<Boolean> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    public Optional<String> separator() {
        return Optional.ofNullable(this.separator);
    }

    public Optional<Object> rootDirectories() {
        return Optional.ofNullable(this.rootDirectories);
    }

    public Optional<Object> fileStores() {
        return Optional.ofNullable(this.fileStores);
    }

    public Optional<Object> userPrincipalLookupService() {
        return Optional.ofNullable(this.userPrincipalLookupService);
    }

    public static Builder builder() {
        return new Builder();
    }


    public FileSystem withOpen(@Nullable Boolean open) {
        this.open = open;
        return this;
    }


    public FileSystem withReadOnly(@Nullable Boolean readOnly) {
        this.readOnly = readOnly;
        return this;
    }


    public FileSystem withSeparator(@Nullable String separator) {
        this.separator = separator;
        return this;
    }


    public FileSystem withRootDirectories(@Nullable Object rootDirectories) {
        this.rootDirectories = rootDirectories;
        return this;
    }


    public FileSystem withFileStores(@Nullable Object fileStores) {
        this.fileStores = fileStores;
        return this;
    }


    public FileSystem withUserPrincipalLookupService(@Nullable Object userPrincipalLookupService) {
        this.userPrincipalLookupService = userPrincipalLookupService;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FileSystem other = (FileSystem) o;
        return 
            Utils.enhancedDeepEquals(this.open, other.open) &&
            Utils.enhancedDeepEquals(this.readOnly, other.readOnly) &&
            Utils.enhancedDeepEquals(this.separator, other.separator) &&
            Utils.enhancedDeepEquals(this.rootDirectories, other.rootDirectories) &&
            Utils.enhancedDeepEquals(this.fileStores, other.fileStores) &&
            Utils.enhancedDeepEquals(this.userPrincipalLookupService, other.userPrincipalLookupService);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            open, readOnly, separator,
            rootDirectories, fileStores, userPrincipalLookupService);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FileSystem.class,
                "open", open,
                "readOnly", readOnly,
                "separator", separator,
                "rootDirectories", rootDirectories,
                "fileStores", fileStores,
                "userPrincipalLookupService", userPrincipalLookupService);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Boolean open;

        private Boolean readOnly;

        private String separator;

        private Object rootDirectories;

        private Object fileStores;

        private Object userPrincipalLookupService;

        private Builder() {
          // force use of static builder() method
        }

        public Builder open(@Nullable Boolean open) {
            this.open = open;
            return this;
        }

        public Builder readOnly(@Nullable Boolean readOnly) {
            this.readOnly = readOnly;
            return this;
        }

        public Builder separator(@Nullable String separator) {
            this.separator = separator;
            return this;
        }

        public Builder rootDirectories(@Nullable Object rootDirectories) {
            this.rootDirectories = rootDirectories;
            return this;
        }

        public Builder fileStores(@Nullable Object fileStores) {
            this.fileStores = fileStores;
            return this;
        }

        public Builder userPrincipalLookupService(@Nullable Object userPrincipalLookupService) {
            this.userPrincipalLookupService = userPrincipalLookupService;
            return this;
        }

        public FileSystem build() {
            return new FileSystem(
                open, readOnly, separator,
                rootDirectories, fileStores, userPrincipalLookupService);
        }

    }
}
