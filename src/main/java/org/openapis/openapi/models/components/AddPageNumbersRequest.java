/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class AddPageNumbersRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private AddPageNumbersRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
     */
    @SpeakeasyMetadata("multipartForm:name=pageNumbers")
    private String pageNumbers;

    /**
     * Custom margin: small/medium/large/x-large
     */
    @SpeakeasyMetadata("multipartForm:name=customMargin")
    private AddPageNumbersRequestCustomMargin customMargin;

    /**
     * Font size for page numbers
     */
    @SpeakeasyMetadata("multipartForm:name=fontSize")
    private Float fontSize;

    /**
     * Font type for page numbers
     */
    @SpeakeasyMetadata("multipartForm:name=fontType")
    private FontType fontType;

    /**
     * Position: 1-9 representing positions on the page (1=top-left, 2=top-center, 3=top-right, 4=middle-left, 5=middle-center, 6=middle-right, 7=bottom-left, 8=bottom-center, 9=bottom-right)
     */
    @SpeakeasyMetadata("multipartForm:name=position")
    private AddPageNumbersRequestPosition position;

    /**
     * Starting number for page numbering
     */
    @SpeakeasyMetadata("multipartForm:name=startingNumber")
    private Integer startingNumber;

    /**
     * Which pages to number (e.g. '1,3-5,7' or 'all')
     */
    @SpeakeasyMetadata("multipartForm:name=pagesToNumber")
    private String pagesToNumber;

    /**
     * Custom text pattern. Available variables: {n}=current page number, {total}=total pages, {filename}=original filename
     */
    @SpeakeasyMetadata("multipartForm:name=customText")
    private String customText;

    @JsonCreator
    public AddPageNumbersRequest(
            @Nullable AddPageNumbersRequestFileInput fileInput,
            @Nullable String fileId,
            @Nullable String pageNumbers,
            @Nullable AddPageNumbersRequestCustomMargin customMargin,
            @Nullable Float fontSize,
            @Nonnull FontType fontType,
            @Nonnull AddPageNumbersRequestPosition position,
            @Nullable Integer startingNumber,
            @Nullable String pagesToNumber,
            @Nullable String customText) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.pageNumbers = Optional.ofNullable(pageNumbers)
            .orElse(Builder._SINGLETON_VALUE_PageNumbers.value());
        this.customMargin = Optional.ofNullable(customMargin)
            .orElse(Builder._SINGLETON_VALUE_CustomMargin.value());
        this.fontSize = Optional.ofNullable(fontSize)
            .orElse(Builder._SINGLETON_VALUE_FontSize.value());
        this.fontType = Optional.ofNullable(fontType)
            .orElseThrow(() -> new IllegalArgumentException("fontType cannot be null"));
        this.position = Optional.ofNullable(position)
            .orElseThrow(() -> new IllegalArgumentException("position cannot be null"));
        this.startingNumber = Optional.ofNullable(startingNumber)
            .orElse(Builder._SINGLETON_VALUE_StartingNumber.value());
        this.pagesToNumber = Optional.ofNullable(pagesToNumber)
            .orElse(Builder._SINGLETON_VALUE_PagesToNumber.value());
        this.customText = Optional.ofNullable(customText)
            .orElse(Builder._SINGLETON_VALUE_CustomText.value());
    }
    
    public AddPageNumbersRequest(
            @Nonnull FontType fontType,
            @Nonnull AddPageNumbersRequestPosition position) {
        this(null, null, null,
            null, null, fontType,
            position, null, null,
            null);
    }

    public Optional<AddPageNumbersRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
     */
    public Optional<String> pageNumbers() {
        return Optional.ofNullable(this.pageNumbers);
    }

    /**
     * Custom margin: small/medium/large/x-large
     */
    public Optional<AddPageNumbersRequestCustomMargin> customMargin() {
        return Optional.ofNullable(this.customMargin);
    }

    /**
     * Font size for page numbers
     */
    public Optional<Float> fontSize() {
        return Optional.ofNullable(this.fontSize);
    }

    /**
     * Font type for page numbers
     */
    public FontType fontType() {
        return this.fontType;
    }

    /**
     * Position: 1-9 representing positions on the page (1=top-left, 2=top-center, 3=top-right, 4=middle-left, 5=middle-center, 6=middle-right, 7=bottom-left, 8=bottom-center, 9=bottom-right)
     */
    public AddPageNumbersRequestPosition position() {
        return this.position;
    }

    /**
     * Starting number for page numbering
     */
    public Optional<Integer> startingNumber() {
        return Optional.ofNullable(this.startingNumber);
    }

    /**
     * Which pages to number (e.g. '1,3-5,7' or 'all')
     */
    public Optional<String> pagesToNumber() {
        return Optional.ofNullable(this.pagesToNumber);
    }

    /**
     * Custom text pattern. Available variables: {n}=current page number, {total}=total pages, {filename}=original filename
     */
    public Optional<String> customText() {
        return Optional.ofNullable(this.customText);
    }

    public static Builder builder() {
        return new Builder();
    }


    public AddPageNumbersRequest withFileInput(@Nullable AddPageNumbersRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public AddPageNumbersRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
     */
    public AddPageNumbersRequest withPageNumbers(@Nullable String pageNumbers) {
        this.pageNumbers = pageNumbers;
        return this;
    }


    /**
     * Custom margin: small/medium/large/x-large
     */
    public AddPageNumbersRequest withCustomMargin(@Nullable AddPageNumbersRequestCustomMargin customMargin) {
        this.customMargin = customMargin;
        return this;
    }


    /**
     * Font size for page numbers
     */
    public AddPageNumbersRequest withFontSize(@Nullable Float fontSize) {
        this.fontSize = fontSize;
        return this;
    }


    /**
     * Font type for page numbers
     */
    public AddPageNumbersRequest withFontType(@Nonnull FontType fontType) {
        this.fontType = Utils.checkNotNull(fontType, "fontType");
        return this;
    }


    /**
     * Position: 1-9 representing positions on the page (1=top-left, 2=top-center, 3=top-right, 4=middle-left, 5=middle-center, 6=middle-right, 7=bottom-left, 8=bottom-center, 9=bottom-right)
     */
    public AddPageNumbersRequest withPosition(@Nonnull AddPageNumbersRequestPosition position) {
        this.position = Utils.checkNotNull(position, "position");
        return this;
    }


    /**
     * Starting number for page numbering
     */
    public AddPageNumbersRequest withStartingNumber(@Nullable Integer startingNumber) {
        this.startingNumber = startingNumber;
        return this;
    }


    /**
     * Which pages to number (e.g. '1,3-5,7' or 'all')
     */
    public AddPageNumbersRequest withPagesToNumber(@Nullable String pagesToNumber) {
        this.pagesToNumber = pagesToNumber;
        return this;
    }


    /**
     * Custom text pattern. Available variables: {n}=current page number, {total}=total pages, {filename}=original filename
     */
    public AddPageNumbersRequest withCustomText(@Nullable String customText) {
        this.customText = customText;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddPageNumbersRequest other = (AddPageNumbersRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.pageNumbers, other.pageNumbers) &&
            Utils.enhancedDeepEquals(this.customMargin, other.customMargin) &&
            Utils.enhancedDeepEquals(this.fontSize, other.fontSize) &&
            Utils.enhancedDeepEquals(this.fontType, other.fontType) &&
            Utils.enhancedDeepEquals(this.position, other.position) &&
            Utils.enhancedDeepEquals(this.startingNumber, other.startingNumber) &&
            Utils.enhancedDeepEquals(this.pagesToNumber, other.pagesToNumber) &&
            Utils.enhancedDeepEquals(this.customText, other.customText);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, pageNumbers,
            customMargin, fontSize, fontType,
            position, startingNumber, pagesToNumber,
            customText);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AddPageNumbersRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "pageNumbers", pageNumbers,
                "customMargin", customMargin,
                "fontSize", fontSize,
                "fontType", fontType,
                "position", position,
                "startingNumber", startingNumber,
                "pagesToNumber", pagesToNumber,
                "customText", customText);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private AddPageNumbersRequestFileInput fileInput;

        private String fileId;

        private String pageNumbers;

        private AddPageNumbersRequestCustomMargin customMargin;

        private Float fontSize;

        private FontType fontType;

        private AddPageNumbersRequestPosition position;

        private Integer startingNumber;

        private String pagesToNumber;

        private String customText;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable AddPageNumbersRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
         */
        public Builder pageNumbers(@Nullable String pageNumbers) {
            this.pageNumbers = pageNumbers;
            return this;
        }

        /**
         * Custom margin: small/medium/large/x-large
         */
        public Builder customMargin(@Nullable AddPageNumbersRequestCustomMargin customMargin) {
            this.customMargin = customMargin;
            return this;
        }

        /**
         * Font size for page numbers
         */
        public Builder fontSize(@Nullable Float fontSize) {
            this.fontSize = fontSize;
            return this;
        }

        /**
         * Font type for page numbers
         */
        public Builder fontType(@Nonnull FontType fontType) {
            this.fontType = Utils.checkNotNull(fontType, "fontType");
            return this;
        }

        /**
         * Position: 1-9 representing positions on the page (1=top-left, 2=top-center, 3=top-right, 4=middle-left, 5=middle-center, 6=middle-right, 7=bottom-left, 8=bottom-center, 9=bottom-right)
         */
        public Builder position(@Nonnull AddPageNumbersRequestPosition position) {
            this.position = Utils.checkNotNull(position, "position");
            return this;
        }

        /**
         * Starting number for page numbering
         */
        public Builder startingNumber(@Nullable Integer startingNumber) {
            this.startingNumber = startingNumber;
            return this;
        }

        /**
         * Which pages to number (e.g. '1,3-5,7' or 'all')
         */
        public Builder pagesToNumber(@Nullable String pagesToNumber) {
            this.pagesToNumber = pagesToNumber;
            return this;
        }

        /**
         * Custom text pattern. Available variables: {n}=current page number, {total}=total pages, {filename}=original filename
         */
        public Builder customText(@Nullable String customText) {
            this.customText = customText;
            return this;
        }

        public AddPageNumbersRequest build() {
            return new AddPageNumbersRequest(
                fileInput, fileId, pageNumbers,
                customMargin, fontSize, fontType,
                position, startingNumber, pagesToNumber,
                customText);
        }


        private static final LazySingletonValue<String> _SINGLETON_VALUE_PageNumbers =
                new LazySingletonValue<>(
                        "pageNumbers",
                        "\"all\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<AddPageNumbersRequestCustomMargin> _SINGLETON_VALUE_CustomMargin =
                new LazySingletonValue<>(
                        "customMargin",
                        "\"medium\"",
                        new TypeReference<AddPageNumbersRequestCustomMargin>() {});

        private static final LazySingletonValue<Float> _SINGLETON_VALUE_FontSize =
                new LazySingletonValue<>(
                        "fontSize",
                        "12",
                        new TypeReference<Float>() {});

        private static final LazySingletonValue<Integer> _SINGLETON_VALUE_StartingNumber =
                new LazySingletonValue<>(
                        "startingNumber",
                        "1",
                        new TypeReference<Integer>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_PagesToNumber =
                new LazySingletonValue<>(
                        "pagesToNumber",
                        "\"all\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_CustomText =
                new LazySingletonValue<>(
                        "customText",
                        "\"{n}\"",
                        new TypeReference<String>() {});
    }
}
