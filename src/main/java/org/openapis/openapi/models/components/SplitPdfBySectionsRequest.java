/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class SplitPdfBySectionsRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private SplitPdfBySectionsRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * Number of horizontal divisions for each PDF page
     */
    @SpeakeasyMetadata("multipartForm:name=horizontalDivisions")
    private Integer horizontalDivisions;

    /**
     * Number of vertical divisions for each PDF page
     */
    @SpeakeasyMetadata("multipartForm:name=verticalDivisions")
    private Integer verticalDivisions;

    /**
     * Merge the split documents into a single PDF
     */
    @SpeakeasyMetadata("multipartForm:name=merge")
    private Boolean merge;

    @JsonCreator
    public SplitPdfBySectionsRequest(
            @Nullable SplitPdfBySectionsRequestFileInput fileInput,
            @Nullable String fileId,
            @Nullable Integer horizontalDivisions,
            @Nullable Integer verticalDivisions,
            @Nullable Boolean merge) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.horizontalDivisions = Optional.ofNullable(horizontalDivisions)
            .orElse(Builder._SINGLETON_VALUE_HorizontalDivisions.value());
        this.verticalDivisions = Optional.ofNullable(verticalDivisions)
            .orElse(Builder._SINGLETON_VALUE_VerticalDivisions.value());
        this.merge = Optional.ofNullable(merge)
            .orElse(Builder._SINGLETON_VALUE_Merge.value());
    }
    
    public SplitPdfBySectionsRequest() {
        this(null, null, null,
            null, null);
    }

    public Optional<SplitPdfBySectionsRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * Number of horizontal divisions for each PDF page
     */
    public Optional<Integer> horizontalDivisions() {
        return Optional.ofNullable(this.horizontalDivisions);
    }

    /**
     * Number of vertical divisions for each PDF page
     */
    public Optional<Integer> verticalDivisions() {
        return Optional.ofNullable(this.verticalDivisions);
    }

    /**
     * Merge the split documents into a single PDF
     */
    public Optional<Boolean> merge() {
        return Optional.ofNullable(this.merge);
    }

    public static Builder builder() {
        return new Builder();
    }


    public SplitPdfBySectionsRequest withFileInput(@Nullable SplitPdfBySectionsRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public SplitPdfBySectionsRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * Number of horizontal divisions for each PDF page
     */
    public SplitPdfBySectionsRequest withHorizontalDivisions(@Nullable Integer horizontalDivisions) {
        this.horizontalDivisions = horizontalDivisions;
        return this;
    }


    /**
     * Number of vertical divisions for each PDF page
     */
    public SplitPdfBySectionsRequest withVerticalDivisions(@Nullable Integer verticalDivisions) {
        this.verticalDivisions = verticalDivisions;
        return this;
    }


    /**
     * Merge the split documents into a single PDF
     */
    public SplitPdfBySectionsRequest withMerge(@Nullable Boolean merge) {
        this.merge = merge;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SplitPdfBySectionsRequest other = (SplitPdfBySectionsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.horizontalDivisions, other.horizontalDivisions) &&
            Utils.enhancedDeepEquals(this.verticalDivisions, other.verticalDivisions) &&
            Utils.enhancedDeepEquals(this.merge, other.merge);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, horizontalDivisions,
            verticalDivisions, merge);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SplitPdfBySectionsRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "horizontalDivisions", horizontalDivisions,
                "verticalDivisions", verticalDivisions,
                "merge", merge);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private SplitPdfBySectionsRequestFileInput fileInput;

        private String fileId;

        private Integer horizontalDivisions;

        private Integer verticalDivisions;

        private Boolean merge;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable SplitPdfBySectionsRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * Number of horizontal divisions for each PDF page
         */
        public Builder horizontalDivisions(@Nullable Integer horizontalDivisions) {
            this.horizontalDivisions = horizontalDivisions;
            return this;
        }

        /**
         * Number of vertical divisions for each PDF page
         */
        public Builder verticalDivisions(@Nullable Integer verticalDivisions) {
            this.verticalDivisions = verticalDivisions;
            return this;
        }

        /**
         * Merge the split documents into a single PDF
         */
        public Builder merge(@Nullable Boolean merge) {
            this.merge = merge;
            return this;
        }

        public SplitPdfBySectionsRequest build() {
            return new SplitPdfBySectionsRequest(
                fileInput, fileId, horizontalDivisions,
                verticalDivisions, merge);
        }


        private static final LazySingletonValue<Integer> _SINGLETON_VALUE_HorizontalDivisions =
                new LazySingletonValue<>(
                        "horizontalDivisions",
                        "0",
                        new TypeReference<Integer>() {});

        private static final LazySingletonValue<Integer> _SINGLETON_VALUE_VerticalDivisions =
                new LazySingletonValue<>(
                        "verticalDivisions",
                        "1",
                        new TypeReference<Integer>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_Merge =
                new LazySingletonValue<>(
                        "merge",
                        "true",
                        new TypeReference<Boolean>() {});
    }
}
