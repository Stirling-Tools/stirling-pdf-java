/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class ExtractImageScansRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private ExtractImageScansRequestFileInput fileInput;

    /**
     * The angle threshold for the image scan extraction
     */
    @SpeakeasyMetadata("multipartForm:name=angleThreshold")
    private Integer angleThreshold;

    /**
     * The tolerance for the image scan extraction
     */
    @SpeakeasyMetadata("multipartForm:name=tolerance")
    private Integer tolerance;

    /**
     * The minimum area for the image scan extraction
     */
    @SpeakeasyMetadata("multipartForm:name=minArea")
    private Integer minArea;

    /**
     * The minimum contour area for the image scan extraction
     */
    @SpeakeasyMetadata("multipartForm:name=minContourArea")
    private Integer minContourArea;

    /**
     * The border size for the image scan extraction
     */
    @SpeakeasyMetadata("multipartForm:name=borderSize")
    private Integer borderSize;

    @JsonCreator
    public ExtractImageScansRequest(
            @Nonnull ExtractImageScansRequestFileInput fileInput,
            @Nullable Integer angleThreshold,
            @Nullable Integer tolerance,
            @Nullable Integer minArea,
            @Nullable Integer minContourArea,
            @Nullable Integer borderSize) {
        this.fileInput = Optional.ofNullable(fileInput)
            .orElseThrow(() -> new IllegalArgumentException("fileInput cannot be null"));
        this.angleThreshold = Optional.ofNullable(angleThreshold)
            .orElse(Builder._SINGLETON_VALUE_AngleThreshold.value());
        this.tolerance = Optional.ofNullable(tolerance)
            .orElse(Builder._SINGLETON_VALUE_Tolerance.value());
        this.minArea = Optional.ofNullable(minArea)
            .orElse(Builder._SINGLETON_VALUE_MinArea.value());
        this.minContourArea = Optional.ofNullable(minContourArea)
            .orElse(Builder._SINGLETON_VALUE_MinContourArea.value());
        this.borderSize = Optional.ofNullable(borderSize)
            .orElse(Builder._SINGLETON_VALUE_BorderSize.value());
    }
    
    public ExtractImageScansRequest(
            @Nonnull ExtractImageScansRequestFileInput fileInput) {
        this(fileInput, null, null,
            null, null, null);
    }

    public ExtractImageScansRequestFileInput fileInput() {
        return this.fileInput;
    }

    /**
     * The angle threshold for the image scan extraction
     */
    public Optional<Integer> angleThreshold() {
        return Optional.ofNullable(this.angleThreshold);
    }

    /**
     * The tolerance for the image scan extraction
     */
    public Optional<Integer> tolerance() {
        return Optional.ofNullable(this.tolerance);
    }

    /**
     * The minimum area for the image scan extraction
     */
    public Optional<Integer> minArea() {
        return Optional.ofNullable(this.minArea);
    }

    /**
     * The minimum contour area for the image scan extraction
     */
    public Optional<Integer> minContourArea() {
        return Optional.ofNullable(this.minContourArea);
    }

    /**
     * The border size for the image scan extraction
     */
    public Optional<Integer> borderSize() {
        return Optional.ofNullable(this.borderSize);
    }

    public static Builder builder() {
        return new Builder();
    }


    public ExtractImageScansRequest withFileInput(@Nonnull ExtractImageScansRequestFileInput fileInput) {
        this.fileInput = Utils.checkNotNull(fileInput, "fileInput");
        return this;
    }


    /**
     * The angle threshold for the image scan extraction
     */
    public ExtractImageScansRequest withAngleThreshold(@Nullable Integer angleThreshold) {
        this.angleThreshold = angleThreshold;
        return this;
    }


    /**
     * The tolerance for the image scan extraction
     */
    public ExtractImageScansRequest withTolerance(@Nullable Integer tolerance) {
        this.tolerance = tolerance;
        return this;
    }


    /**
     * The minimum area for the image scan extraction
     */
    public ExtractImageScansRequest withMinArea(@Nullable Integer minArea) {
        this.minArea = minArea;
        return this;
    }


    /**
     * The minimum contour area for the image scan extraction
     */
    public ExtractImageScansRequest withMinContourArea(@Nullable Integer minContourArea) {
        this.minContourArea = minContourArea;
        return this;
    }


    /**
     * The border size for the image scan extraction
     */
    public ExtractImageScansRequest withBorderSize(@Nullable Integer borderSize) {
        this.borderSize = borderSize;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExtractImageScansRequest other = (ExtractImageScansRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.angleThreshold, other.angleThreshold) &&
            Utils.enhancedDeepEquals(this.tolerance, other.tolerance) &&
            Utils.enhancedDeepEquals(this.minArea, other.minArea) &&
            Utils.enhancedDeepEquals(this.minContourArea, other.minContourArea) &&
            Utils.enhancedDeepEquals(this.borderSize, other.borderSize);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, angleThreshold, tolerance,
            minArea, minContourArea, borderSize);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExtractImageScansRequest.class,
                "fileInput", fileInput,
                "angleThreshold", angleThreshold,
                "tolerance", tolerance,
                "minArea", minArea,
                "minContourArea", minContourArea,
                "borderSize", borderSize);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private ExtractImageScansRequestFileInput fileInput;

        private Integer angleThreshold;

        private Integer tolerance;

        private Integer minArea;

        private Integer minContourArea;

        private Integer borderSize;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nonnull ExtractImageScansRequestFileInput fileInput) {
            this.fileInput = Utils.checkNotNull(fileInput, "fileInput");
            return this;
        }

        /**
         * The angle threshold for the image scan extraction
         */
        public Builder angleThreshold(@Nullable Integer angleThreshold) {
            this.angleThreshold = angleThreshold;
            return this;
        }

        /**
         * The tolerance for the image scan extraction
         */
        public Builder tolerance(@Nullable Integer tolerance) {
            this.tolerance = tolerance;
            return this;
        }

        /**
         * The minimum area for the image scan extraction
         */
        public Builder minArea(@Nullable Integer minArea) {
            this.minArea = minArea;
            return this;
        }

        /**
         * The minimum contour area for the image scan extraction
         */
        public Builder minContourArea(@Nullable Integer minContourArea) {
            this.minContourArea = minContourArea;
            return this;
        }

        /**
         * The border size for the image scan extraction
         */
        public Builder borderSize(@Nullable Integer borderSize) {
            this.borderSize = borderSize;
            return this;
        }

        public ExtractImageScansRequest build() {
            return new ExtractImageScansRequest(
                fileInput, angleThreshold, tolerance,
                minArea, minContourArea, borderSize);
        }


        private static final LazySingletonValue<Integer> _SINGLETON_VALUE_AngleThreshold =
                new LazySingletonValue<>(
                        "angleThreshold",
                        "5",
                        new TypeReference<Integer>() {});

        private static final LazySingletonValue<Integer> _SINGLETON_VALUE_Tolerance =
                new LazySingletonValue<>(
                        "tolerance",
                        "20",
                        new TypeReference<Integer>() {});

        private static final LazySingletonValue<Integer> _SINGLETON_VALUE_MinArea =
                new LazySingletonValue<>(
                        "minArea",
                        "8000",
                        new TypeReference<Integer>() {});

        private static final LazySingletonValue<Integer> _SINGLETON_VALUE_MinContourArea =
                new LazySingletonValue<>(
                        "minContourArea",
                        "500",
                        new TypeReference<Integer>() {});

        private static final LazySingletonValue<Integer> _SINGLETON_VALUE_BorderSize =
                new LazySingletonValue<>(
                        "borderSize",
                        "1",
                        new TypeReference<Integer>() {});
    }
}
