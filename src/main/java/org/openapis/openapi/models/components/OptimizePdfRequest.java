/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class OptimizePdfRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private OptimizePdfRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * The level of optimization to apply to the PDF file. Higher values indicate greater compression but may reduce quality.
     */
    @SpeakeasyMetadata("multipartForm:name=optimizeLevel")
    private OptimizeLevel optimizeLevel;

    /**
     * The expected output size, e.g. '100MB', '25KB', etc.
     */
    @SpeakeasyMetadata("multipartForm:name=expectedOutputSize")
    private String expectedOutputSize;

    /**
     * Whether to linearize the PDF for faster web viewing. Default is false.
     */
    @SpeakeasyMetadata("multipartForm:name=linearize")
    private Boolean linearize;

    /**
     * Whether to normalize the PDF content for better compatibility. Default is false.
     */
    @SpeakeasyMetadata("multipartForm:name=normalize")
    private Boolean normalize;

    /**
     * Whether to convert the PDF to grayscale. Default is false.
     */
    @SpeakeasyMetadata("multipartForm:name=grayscale")
    private Boolean grayscale;

    @JsonCreator
    public OptimizePdfRequest(
            @Nullable OptimizePdfRequestFileInput fileInput,
            @Nullable String fileId,
            @Nonnull OptimizeLevel optimizeLevel,
            @Nullable String expectedOutputSize,
            @Nullable Boolean linearize,
            @Nullable Boolean normalize,
            @Nullable Boolean grayscale) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.optimizeLevel = Optional.ofNullable(optimizeLevel)
            .orElseThrow(() -> new IllegalArgumentException("optimizeLevel cannot be null"));
        this.expectedOutputSize = Optional.ofNullable(expectedOutputSize)
            .orElse(Builder._SINGLETON_VALUE_ExpectedOutputSize.value());
        this.linearize = Optional.ofNullable(linearize)
            .orElse(Builder._SINGLETON_VALUE_Linearize.value());
        this.normalize = Optional.ofNullable(normalize)
            .orElse(Builder._SINGLETON_VALUE_Normalize.value());
        this.grayscale = Optional.ofNullable(grayscale)
            .orElse(Builder._SINGLETON_VALUE_Grayscale.value());
    }
    
    public OptimizePdfRequest(
            @Nonnull OptimizeLevel optimizeLevel) {
        this(null, null, optimizeLevel,
            null, null, null,
            null);
    }

    public Optional<OptimizePdfRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * The level of optimization to apply to the PDF file. Higher values indicate greater compression but may reduce quality.
     */
    public OptimizeLevel optimizeLevel() {
        return this.optimizeLevel;
    }

    /**
     * The expected output size, e.g. '100MB', '25KB', etc.
     */
    public Optional<String> expectedOutputSize() {
        return Optional.ofNullable(this.expectedOutputSize);
    }

    /**
     * Whether to linearize the PDF for faster web viewing. Default is false.
     */
    public Optional<Boolean> linearize() {
        return Optional.ofNullable(this.linearize);
    }

    /**
     * Whether to normalize the PDF content for better compatibility. Default is false.
     */
    public Optional<Boolean> normalize() {
        return Optional.ofNullable(this.normalize);
    }

    /**
     * Whether to convert the PDF to grayscale. Default is false.
     */
    public Optional<Boolean> grayscale() {
        return Optional.ofNullable(this.grayscale);
    }

    public static Builder builder() {
        return new Builder();
    }


    public OptimizePdfRequest withFileInput(@Nullable OptimizePdfRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public OptimizePdfRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * The level of optimization to apply to the PDF file. Higher values indicate greater compression but may reduce quality.
     */
    public OptimizePdfRequest withOptimizeLevel(@Nonnull OptimizeLevel optimizeLevel) {
        this.optimizeLevel = Utils.checkNotNull(optimizeLevel, "optimizeLevel");
        return this;
    }


    /**
     * The expected output size, e.g. '100MB', '25KB', etc.
     */
    public OptimizePdfRequest withExpectedOutputSize(@Nullable String expectedOutputSize) {
        this.expectedOutputSize = expectedOutputSize;
        return this;
    }


    /**
     * Whether to linearize the PDF for faster web viewing. Default is false.
     */
    public OptimizePdfRequest withLinearize(@Nullable Boolean linearize) {
        this.linearize = linearize;
        return this;
    }


    /**
     * Whether to normalize the PDF content for better compatibility. Default is false.
     */
    public OptimizePdfRequest withNormalize(@Nullable Boolean normalize) {
        this.normalize = normalize;
        return this;
    }


    /**
     * Whether to convert the PDF to grayscale. Default is false.
     */
    public OptimizePdfRequest withGrayscale(@Nullable Boolean grayscale) {
        this.grayscale = grayscale;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OptimizePdfRequest other = (OptimizePdfRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.optimizeLevel, other.optimizeLevel) &&
            Utils.enhancedDeepEquals(this.expectedOutputSize, other.expectedOutputSize) &&
            Utils.enhancedDeepEquals(this.linearize, other.linearize) &&
            Utils.enhancedDeepEquals(this.normalize, other.normalize) &&
            Utils.enhancedDeepEquals(this.grayscale, other.grayscale);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, optimizeLevel,
            expectedOutputSize, linearize, normalize,
            grayscale);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OptimizePdfRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "optimizeLevel", optimizeLevel,
                "expectedOutputSize", expectedOutputSize,
                "linearize", linearize,
                "normalize", normalize,
                "grayscale", grayscale);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private OptimizePdfRequestFileInput fileInput;

        private String fileId;

        private OptimizeLevel optimizeLevel;

        private String expectedOutputSize;

        private Boolean linearize;

        private Boolean normalize;

        private Boolean grayscale;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable OptimizePdfRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * The level of optimization to apply to the PDF file. Higher values indicate greater compression but may reduce quality.
         */
        public Builder optimizeLevel(@Nonnull OptimizeLevel optimizeLevel) {
            this.optimizeLevel = Utils.checkNotNull(optimizeLevel, "optimizeLevel");
            return this;
        }

        /**
         * The expected output size, e.g. '100MB', '25KB', etc.
         */
        public Builder expectedOutputSize(@Nullable String expectedOutputSize) {
            this.expectedOutputSize = expectedOutputSize;
            return this;
        }

        /**
         * Whether to linearize the PDF for faster web viewing. Default is false.
         */
        public Builder linearize(@Nullable Boolean linearize) {
            this.linearize = linearize;
            return this;
        }

        /**
         * Whether to normalize the PDF content for better compatibility. Default is false.
         */
        public Builder normalize(@Nullable Boolean normalize) {
            this.normalize = normalize;
            return this;
        }

        /**
         * Whether to convert the PDF to grayscale. Default is false.
         */
        public Builder grayscale(@Nullable Boolean grayscale) {
            this.grayscale = grayscale;
            return this;
        }

        public OptimizePdfRequest build() {
            return new OptimizePdfRequest(
                fileInput, fileId, optimizeLevel,
                expectedOutputSize, linearize, normalize,
                grayscale);
        }


        private static final LazySingletonValue<String> _SINGLETON_VALUE_ExpectedOutputSize =
                new LazySingletonValue<>(
                        "expectedOutputSize",
                        "\"25KB\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_Linearize =
                new LazySingletonValue<>(
                        "linearize",
                        "false",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_Normalize =
                new LazySingletonValue<>(
                        "normalize",
                        "false",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_Grayscale =
                new LazySingletonValue<>(
                        "grayscale",
                        "false",
                        new TypeReference<Boolean>() {});
    }
}
