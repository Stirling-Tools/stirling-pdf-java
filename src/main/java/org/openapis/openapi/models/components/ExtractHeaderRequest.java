/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class ExtractHeaderRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private ExtractHeaderRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * Flag indicating whether to use the first text as a fallback if no suitable title is found. Defaults to false.
     */
    @SpeakeasyMetadata("multipartForm:name=useFirstTextAsFallback")
    private Boolean useFirstTextAsFallback;

    @JsonCreator
    public ExtractHeaderRequest(
            @Nullable ExtractHeaderRequestFileInput fileInput,
            @Nullable String fileId,
            @Nullable Boolean useFirstTextAsFallback) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.useFirstTextAsFallback = Optional.ofNullable(useFirstTextAsFallback)
            .orElse(Builder._SINGLETON_VALUE_UseFirstTextAsFallback.value());
    }
    
    public ExtractHeaderRequest() {
        this(null, null, null);
    }

    public Optional<ExtractHeaderRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * Flag indicating whether to use the first text as a fallback if no suitable title is found. Defaults to false.
     */
    public Optional<Boolean> useFirstTextAsFallback() {
        return Optional.ofNullable(this.useFirstTextAsFallback);
    }

    public static Builder builder() {
        return new Builder();
    }


    public ExtractHeaderRequest withFileInput(@Nullable ExtractHeaderRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public ExtractHeaderRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * Flag indicating whether to use the first text as a fallback if no suitable title is found. Defaults to false.
     */
    public ExtractHeaderRequest withUseFirstTextAsFallback(@Nullable Boolean useFirstTextAsFallback) {
        this.useFirstTextAsFallback = useFirstTextAsFallback;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExtractHeaderRequest other = (ExtractHeaderRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.useFirstTextAsFallback, other.useFirstTextAsFallback);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, useFirstTextAsFallback);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExtractHeaderRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "useFirstTextAsFallback", useFirstTextAsFallback);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private ExtractHeaderRequestFileInput fileInput;

        private String fileId;

        private Boolean useFirstTextAsFallback;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable ExtractHeaderRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * Flag indicating whether to use the first text as a fallback if no suitable title is found. Defaults to false.
         */
        public Builder useFirstTextAsFallback(@Nullable Boolean useFirstTextAsFallback) {
            this.useFirstTextAsFallback = useFirstTextAsFallback;
            return this;
        }

        public ExtractHeaderRequest build() {
            return new ExtractHeaderRequest(
                fileInput, fileId, useFirstTextAsFallback);
        }


        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_UseFirstTextAsFallback =
                new LazySingletonValue<>(
                        "useFirstTextAsFallback",
                        "false",
                        new TypeReference<Boolean>() {});
    }
}
