/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class PDFComparisonAndCount {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private PDFComparisonAndCountFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * The comparison type, accepts Greater, Equal, Less than
     */
    @SpeakeasyMetadata("multipartForm:name=comparator")
    private PDFComparisonAndCountComparator comparator;

    /**
     * Count
     */
    @SpeakeasyMetadata("multipartForm:name=pageCount")
    private Integer pageCount;

    @JsonCreator
    public PDFComparisonAndCount(
            @Nullable PDFComparisonAndCountFileInput fileInput,
            @Nullable String fileId,
            @Nonnull PDFComparisonAndCountComparator comparator,
            @Nullable Integer pageCount) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.comparator = Optional.ofNullable(comparator)
            .orElseThrow(() -> new IllegalArgumentException("comparator cannot be null"));
        this.pageCount = Optional.ofNullable(pageCount)
            .orElse(Builder._SINGLETON_VALUE_PageCount.value());
    }
    
    public PDFComparisonAndCount(
            @Nonnull PDFComparisonAndCountComparator comparator) {
        this(null, null, comparator,
            null);
    }

    public Optional<PDFComparisonAndCountFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * The comparison type, accepts Greater, Equal, Less than
     */
    public PDFComparisonAndCountComparator comparator() {
        return this.comparator;
    }

    /**
     * Count
     */
    public Optional<Integer> pageCount() {
        return Optional.ofNullable(this.pageCount);
    }

    public static Builder builder() {
        return new Builder();
    }


    public PDFComparisonAndCount withFileInput(@Nullable PDFComparisonAndCountFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public PDFComparisonAndCount withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * The comparison type, accepts Greater, Equal, Less than
     */
    public PDFComparisonAndCount withComparator(@Nonnull PDFComparisonAndCountComparator comparator) {
        this.comparator = Utils.checkNotNull(comparator, "comparator");
        return this;
    }


    /**
     * Count
     */
    public PDFComparisonAndCount withPageCount(@Nullable Integer pageCount) {
        this.pageCount = pageCount;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PDFComparisonAndCount other = (PDFComparisonAndCount) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.comparator, other.comparator) &&
            Utils.enhancedDeepEquals(this.pageCount, other.pageCount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, comparator,
            pageCount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PDFComparisonAndCount.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "comparator", comparator,
                "pageCount", pageCount);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private PDFComparisonAndCountFileInput fileInput;

        private String fileId;

        private PDFComparisonAndCountComparator comparator;

        private Integer pageCount;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable PDFComparisonAndCountFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * The comparison type, accepts Greater, Equal, Less than
         */
        public Builder comparator(@Nonnull PDFComparisonAndCountComparator comparator) {
            this.comparator = Utils.checkNotNull(comparator, "comparator");
            return this;
        }

        /**
         * Count
         */
        public Builder pageCount(@Nullable Integer pageCount) {
            this.pageCount = pageCount;
            return this;
        }

        public PDFComparisonAndCount build() {
            return new PDFComparisonAndCount(
                fileInput, fileId, comparator,
                pageCount);
        }


        private static final LazySingletonValue<Integer> _SINGLETON_VALUE_PageCount =
                new LazySingletonValue<>(
                        "pageCount",
                        "0",
                        new TypeReference<Integer>() {});
    }
}
