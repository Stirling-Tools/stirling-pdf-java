/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class Team {

    private Long id;


    private String name;


    private List<User> users;

    @JsonCreator
    public Team(
            @Nullable Long id,
            @Nullable String name,
            @Nullable List<User> users) {
        this.id = id;
        this.name = name;
        this.users = users;
    }
    
    public Team() {
        this(null, null, null);
    }

    public Optional<Long> id() {
        return Optional.ofNullable(this.id);
    }

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    public Optional<List<User>> users() {
        return Optional.ofNullable(this.users);
    }

    public static Builder builder() {
        return new Builder();
    }


    public Team withId(@Nullable Long id) {
        this.id = id;
        return this;
    }


    public Team withName(@Nullable String name) {
        this.name = name;
        return this;
    }


    public Team withUsers(@Nullable List<User> users) {
        this.users = users;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Team other = (Team) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.users, other.users);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, users);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Team.class,
                "id", id,
                "name", name,
                "users", users);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long id;

        private String name;

        private List<User> users;

        private Builder() {
          // force use of static builder() method
        }

        public Builder id(@Nullable Long id) {
            this.id = id;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        public Builder users(@Nullable List<User> users) {
            this.users = users;
            return this;
        }

        public Team build() {
            return new Team(
                id, name, users);
        }

    }
}
