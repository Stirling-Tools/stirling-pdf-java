/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class BookletImpositionRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private BookletImpositionRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * The booklet type to create.
     */
    @SpeakeasyMetadata("multipartForm:name=bookletType")
    private BookletType bookletType;

    /**
     * The number of pages to fit onto a single sheet in the output PDF.
     */
    @SpeakeasyMetadata("multipartForm:name=pagesPerSheet")
    private BookletImpositionRequestPagesPerSheet pagesPerSheet;

    /**
     * Boolean for if you wish to add border around the pages
     */
    @SpeakeasyMetadata("multipartForm:name=addBorder")
    private Boolean addBorder;

    /**
     * The page orientation for the output booklet sheets.
     */
    @SpeakeasyMetadata("multipartForm:name=pageOrientation")
    private PageOrientation pageOrientation;

    @JsonCreator
    public BookletImpositionRequest(
            @Nullable BookletImpositionRequestFileInput fileInput,
            @Nullable String fileId,
            @Nullable BookletType bookletType,
            @Nonnull BookletImpositionRequestPagesPerSheet pagesPerSheet,
            @Nullable Boolean addBorder,
            @Nullable PageOrientation pageOrientation) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.bookletType = Optional.ofNullable(bookletType)
            .orElse(Builder._SINGLETON_VALUE_BookletType.value());
        this.pagesPerSheet = Optional.ofNullable(pagesPerSheet)
            .orElseThrow(() -> new IllegalArgumentException("pagesPerSheet cannot be null"));
        this.addBorder = addBorder;
        this.pageOrientation = Optional.ofNullable(pageOrientation)
            .orElse(Builder._SINGLETON_VALUE_PageOrientation.value());
    }
    
    public BookletImpositionRequest(
            @Nonnull BookletImpositionRequestPagesPerSheet pagesPerSheet) {
        this(null, null, null,
            pagesPerSheet, null, null);
    }

    public Optional<BookletImpositionRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * The booklet type to create.
     */
    public Optional<BookletType> bookletType() {
        return Optional.ofNullable(this.bookletType);
    }

    /**
     * The number of pages to fit onto a single sheet in the output PDF.
     */
    public BookletImpositionRequestPagesPerSheet pagesPerSheet() {
        return this.pagesPerSheet;
    }

    /**
     * Boolean for if you wish to add border around the pages
     */
    public Optional<Boolean> addBorder() {
        return Optional.ofNullable(this.addBorder);
    }

    /**
     * The page orientation for the output booklet sheets.
     */
    public Optional<PageOrientation> pageOrientation() {
        return Optional.ofNullable(this.pageOrientation);
    }

    public static Builder builder() {
        return new Builder();
    }


    public BookletImpositionRequest withFileInput(@Nullable BookletImpositionRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public BookletImpositionRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * The booklet type to create.
     */
    public BookletImpositionRequest withBookletType(@Nullable BookletType bookletType) {
        this.bookletType = bookletType;
        return this;
    }


    /**
     * The number of pages to fit onto a single sheet in the output PDF.
     */
    public BookletImpositionRequest withPagesPerSheet(@Nonnull BookletImpositionRequestPagesPerSheet pagesPerSheet) {
        this.pagesPerSheet = Utils.checkNotNull(pagesPerSheet, "pagesPerSheet");
        return this;
    }


    /**
     * Boolean for if you wish to add border around the pages
     */
    public BookletImpositionRequest withAddBorder(@Nullable Boolean addBorder) {
        this.addBorder = addBorder;
        return this;
    }


    /**
     * The page orientation for the output booklet sheets.
     */
    public BookletImpositionRequest withPageOrientation(@Nullable PageOrientation pageOrientation) {
        this.pageOrientation = pageOrientation;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BookletImpositionRequest other = (BookletImpositionRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.bookletType, other.bookletType) &&
            Utils.enhancedDeepEquals(this.pagesPerSheet, other.pagesPerSheet) &&
            Utils.enhancedDeepEquals(this.addBorder, other.addBorder) &&
            Utils.enhancedDeepEquals(this.pageOrientation, other.pageOrientation);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, bookletType,
            pagesPerSheet, addBorder, pageOrientation);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BookletImpositionRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "bookletType", bookletType,
                "pagesPerSheet", pagesPerSheet,
                "addBorder", addBorder,
                "pageOrientation", pageOrientation);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private BookletImpositionRequestFileInput fileInput;

        private String fileId;

        private BookletType bookletType;

        private BookletImpositionRequestPagesPerSheet pagesPerSheet;

        private Boolean addBorder;

        private PageOrientation pageOrientation;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable BookletImpositionRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * The booklet type to create.
         */
        public Builder bookletType(@Nullable BookletType bookletType) {
            this.bookletType = bookletType;
            return this;
        }

        /**
         * The number of pages to fit onto a single sheet in the output PDF.
         */
        public Builder pagesPerSheet(@Nonnull BookletImpositionRequestPagesPerSheet pagesPerSheet) {
            this.pagesPerSheet = Utils.checkNotNull(pagesPerSheet, "pagesPerSheet");
            return this;
        }

        /**
         * Boolean for if you wish to add border around the pages
         */
        public Builder addBorder(@Nullable Boolean addBorder) {
            this.addBorder = addBorder;
            return this;
        }

        /**
         * The page orientation for the output booklet sheets.
         */
        public Builder pageOrientation(@Nullable PageOrientation pageOrientation) {
            this.pageOrientation = pageOrientation;
            return this;
        }

        public BookletImpositionRequest build() {
            return new BookletImpositionRequest(
                fileInput, fileId, bookletType,
                pagesPerSheet, addBorder, pageOrientation);
        }


        private static final LazySingletonValue<BookletType> _SINGLETON_VALUE_BookletType =
                new LazySingletonValue<>(
                        "bookletType",
                        "\"BOOKLET\"",
                        new TypeReference<BookletType>() {});

        private static final LazySingletonValue<PageOrientation> _SINGLETON_VALUE_PageOrientation =
                new LazySingletonValue<>(
                        "pageOrientation",
                        "\"LANDSCAPE\"",
                        new TypeReference<PageOrientation>() {});
    }
}
