/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class HandleDataRequest {
    /**
     * The input files
     */
    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private List<HandleDataRequestFileInput> fileInput;

    /**
     * Pipeline configuration in JSON format containing name and operations list
     */
    @SpeakeasyMetadata("multipartForm:name=json")
    private String json;

    @JsonCreator
    public HandleDataRequest(
            @Nonnull List<HandleDataRequestFileInput> fileInput,
            @Nonnull String json) {
        this.fileInput = Optional.ofNullable(fileInput)
            .orElseThrow(() -> new IllegalArgumentException("fileInput cannot be null"));
        this.json = Optional.ofNullable(json)
            .orElseThrow(() -> new IllegalArgumentException("json cannot be null"));
    }

    /**
     * The input files
     */
    public List<HandleDataRequestFileInput> fileInput() {
        return this.fileInput;
    }

    /**
     * Pipeline configuration in JSON format containing name and operations list
     */
    public String json() {
        return this.json;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The input files
     */
    public HandleDataRequest withFileInput(@Nonnull List<HandleDataRequestFileInput> fileInput) {
        this.fileInput = Utils.checkNotNull(fileInput, "fileInput");
        return this;
    }


    /**
     * Pipeline configuration in JSON format containing name and operations list
     */
    public HandleDataRequest withJson(@Nonnull String json) {
        this.json = Utils.checkNotNull(json, "json");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HandleDataRequest other = (HandleDataRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.json, other.json);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, json);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HandleDataRequest.class,
                "fileInput", fileInput,
                "json", json);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private List<HandleDataRequestFileInput> fileInput;

        private String json;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The input files
         */
        public Builder fileInput(@Nonnull List<HandleDataRequestFileInput> fileInput) {
            this.fileInput = Utils.checkNotNull(fileInput, "fileInput");
            return this;
        }

        /**
         * Pipeline configuration in JSON format containing name and operations list
         */
        public Builder json(@Nonnull String json) {
            this.json = Utils.checkNotNull(json, "json");
            return this;
        }

        public HandleDataRequest build() {
            return new HandleDataRequest(
                fileInput, json);
        }

    }
}
