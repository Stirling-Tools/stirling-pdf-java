/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class Authority {

    private Long id;


    private String authority;


    private User user;

    @JsonCreator
    public Authority(
            @Nullable Long id,
            @Nullable String authority,
            @Nullable User user) {
        this.id = id;
        this.authority = authority;
        this.user = user;
    }
    
    public Authority() {
        this(null, null, null);
    }

    public Optional<Long> id() {
        return Optional.ofNullable(this.id);
    }

    public Optional<String> authority() {
        return Optional.ofNullable(this.authority);
    }

    public Optional<User> user() {
        return Optional.ofNullable(this.user);
    }

    public static Builder builder() {
        return new Builder();
    }


    public Authority withId(@Nullable Long id) {
        this.id = id;
        return this;
    }


    public Authority withAuthority(@Nullable String authority) {
        this.authority = authority;
        return this;
    }


    public Authority withUser(@Nullable User user) {
        this.user = user;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Authority other = (Authority) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.authority, other.authority) &&
            Utils.enhancedDeepEquals(this.user, other.user);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, authority, user);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Authority.class,
                "id", id,
                "authority", authority,
                "user", user);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long id;

        private String authority;

        private User user;

        private Builder() {
          // force use of static builder() method
        }

        public Builder id(@Nullable Long id) {
            this.id = id;
            return this;
        }

        public Builder authority(@Nullable String authority) {
            this.authority = authority;
            return this;
        }

        public Builder user(@Nullable User user) {
            this.user = user;
            return this;
        }

        public Authority build() {
            return new Authority(
                id, authority, user);
        }

    }
}
