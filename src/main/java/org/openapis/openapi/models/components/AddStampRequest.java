/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Float;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class AddStampRequest {

    @SpeakeasyMetadata("multipartForm:file,name=fileInput")
    private AddStampRequestFileInput fileInput;

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    @SpeakeasyMetadata("multipartForm:name=fileId")
    private String fileId;

    /**
     * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
     */
    @SpeakeasyMetadata("multipartForm:name=pageNumbers")
    private String pageNumbers;

    /**
     * The stamp type (text or image)
     */
    @SpeakeasyMetadata("multipartForm:name=stampType")
    private StampType stampType;

    /**
     * The stamp text
     */
    @SpeakeasyMetadata("multipartForm:name=stampText")
    private String stampText;


    @SpeakeasyMetadata("multipartForm:file,name=stampImage")
    private StampImage stampImage;

    /**
     * The selected alphabet of the stamp text
     */
    @SpeakeasyMetadata("multipartForm:name=alphabet")
    private AddStampRequestAlphabet alphabet;

    /**
     * The font size of the stamp text and image
     */
    @SpeakeasyMetadata("multipartForm:name=fontSize")
    private Float fontSize;

    /**
     * The rotation of the stamp in degrees
     */
    @SpeakeasyMetadata("multipartForm:name=rotation")
    private Float rotation;

    /**
     * The opacity of the stamp (0.0 - 1.0)
     */
    @SpeakeasyMetadata("multipartForm:name=opacity")
    private Float opacity;

    /**
     * Position for stamp placement based on a 1-9 grid (1: bottom-left, 2: bottom-center, 3: bottom-right, 4: middle-left, 5: middle-center, 6: middle-right, 7: top-left, 8: top-center, 9: top-right)
     */
    @SpeakeasyMetadata("multipartForm:name=position")
    private AddStampRequestPosition position;

    /**
     * Override X coordinate for stamp placement. If set, it will override the position-based calculation. Negative value means no override.
     */
    @SpeakeasyMetadata("multipartForm:name=overrideX")
    private Float overrideX;

    /**
     * Override Y coordinate for stamp placement. If set, it will override the position-based calculation. Negative value means no override.
     */
    @SpeakeasyMetadata("multipartForm:name=overrideY")
    private Float overrideY;

    /**
     * Specifies the margin size for the stamp.
     */
    @SpeakeasyMetadata("multipartForm:name=customMargin")
    private AddStampRequestCustomMargin customMargin;

    /**
     * The color of the stamp text
     */
    @SpeakeasyMetadata("multipartForm:name=customColor")
    private String customColor;

    @JsonCreator
    public AddStampRequest(
            @Nullable AddStampRequestFileInput fileInput,
            @Nullable String fileId,
            @Nullable String pageNumbers,
            @Nonnull StampType stampType,
            @Nullable String stampText,
            @Nullable StampImage stampImage,
            @Nullable AddStampRequestAlphabet alphabet,
            @Nullable Float fontSize,
            @Nullable Float rotation,
            @Nullable Float opacity,
            @Nonnull AddStampRequestPosition position,
            @Nullable Float overrideX,
            @Nullable Float overrideY,
            @Nullable AddStampRequestCustomMargin customMargin,
            @Nullable String customColor) {
        this.fileInput = fileInput;
        this.fileId = fileId;
        this.pageNumbers = Optional.ofNullable(pageNumbers)
            .orElse(Builder._SINGLETON_VALUE_PageNumbers.value());
        this.stampType = Optional.ofNullable(stampType)
            .orElseThrow(() -> new IllegalArgumentException("stampType cannot be null"));
        this.stampText = Optional.ofNullable(stampText)
            .orElse(Builder._SINGLETON_VALUE_StampText.value());
        this.stampImage = stampImage;
        this.alphabet = Optional.ofNullable(alphabet)
            .orElse(Builder._SINGLETON_VALUE_Alphabet.value());
        this.fontSize = Optional.ofNullable(fontSize)
            .orElse(Builder._SINGLETON_VALUE_FontSize.value());
        this.rotation = Optional.ofNullable(rotation)
            .orElse(Builder._SINGLETON_VALUE_Rotation.value());
        this.opacity = Optional.ofNullable(opacity)
            .orElse(Builder._SINGLETON_VALUE_Opacity.value());
        this.position = Optional.ofNullable(position)
            .orElseThrow(() -> new IllegalArgumentException("position cannot be null"));
        this.overrideX = Optional.ofNullable(overrideX)
            .orElse(Builder._SINGLETON_VALUE_OverrideX.value());
        this.overrideY = Optional.ofNullable(overrideY)
            .orElse(Builder._SINGLETON_VALUE_OverrideY.value());
        this.customMargin = Optional.ofNullable(customMargin)
            .orElse(Builder._SINGLETON_VALUE_CustomMargin.value());
        this.customColor = Optional.ofNullable(customColor)
            .orElse(Builder._SINGLETON_VALUE_CustomColor.value());
    }
    
    public AddStampRequest(
            @Nonnull StampType stampType,
            @Nonnull AddStampRequestPosition position) {
        this(null, null, null,
            stampType, null, null,
            null, null, null,
            null, position, null,
            null, null, null);
    }

    public Optional<AddStampRequestFileInput> fileInput() {
        return Optional.ofNullable(this.fileInput);
    }

    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }

    /**
     * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
     */
    public Optional<String> pageNumbers() {
        return Optional.ofNullable(this.pageNumbers);
    }

    /**
     * The stamp type (text or image)
     */
    public StampType stampType() {
        return this.stampType;
    }

    /**
     * The stamp text
     */
    public Optional<String> stampText() {
        return Optional.ofNullable(this.stampText);
    }

    public Optional<StampImage> stampImage() {
        return Optional.ofNullable(this.stampImage);
    }

    /**
     * The selected alphabet of the stamp text
     */
    public Optional<AddStampRequestAlphabet> alphabet() {
        return Optional.ofNullable(this.alphabet);
    }

    /**
     * The font size of the stamp text and image
     */
    public Optional<Float> fontSize() {
        return Optional.ofNullable(this.fontSize);
    }

    /**
     * The rotation of the stamp in degrees
     */
    public Optional<Float> rotation() {
        return Optional.ofNullable(this.rotation);
    }

    /**
     * The opacity of the stamp (0.0 - 1.0)
     */
    public Optional<Float> opacity() {
        return Optional.ofNullable(this.opacity);
    }

    /**
     * Position for stamp placement based on a 1-9 grid (1: bottom-left, 2: bottom-center, 3: bottom-right, 4: middle-left, 5: middle-center, 6: middle-right, 7: top-left, 8: top-center, 9: top-right)
     */
    public AddStampRequestPosition position() {
        return this.position;
    }

    /**
     * Override X coordinate for stamp placement. If set, it will override the position-based calculation. Negative value means no override.
     */
    public Optional<Float> overrideX() {
        return Optional.ofNullable(this.overrideX);
    }

    /**
     * Override Y coordinate for stamp placement. If set, it will override the position-based calculation. Negative value means no override.
     */
    public Optional<Float> overrideY() {
        return Optional.ofNullable(this.overrideY);
    }

    /**
     * Specifies the margin size for the stamp.
     */
    public Optional<AddStampRequestCustomMargin> customMargin() {
        return Optional.ofNullable(this.customMargin);
    }

    /**
     * The color of the stamp text
     */
    public Optional<String> customColor() {
        return Optional.ofNullable(this.customColor);
    }

    public static Builder builder() {
        return new Builder();
    }


    public AddStampRequest withFileInput(@Nullable AddStampRequestFileInput fileInput) {
        this.fileInput = fileInput;
        return this;
    }


    /**
     * File ID for server-side files (can be used instead of fileInput)
     */
    public AddStampRequest withFileId(@Nullable String fileId) {
        this.fileId = fileId;
        return this;
    }


    /**
     * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
     */
    public AddStampRequest withPageNumbers(@Nullable String pageNumbers) {
        this.pageNumbers = pageNumbers;
        return this;
    }


    /**
     * The stamp type (text or image)
     */
    public AddStampRequest withStampType(@Nonnull StampType stampType) {
        this.stampType = Utils.checkNotNull(stampType, "stampType");
        return this;
    }


    /**
     * The stamp text
     */
    public AddStampRequest withStampText(@Nullable String stampText) {
        this.stampText = stampText;
        return this;
    }


    public AddStampRequest withStampImage(@Nullable StampImage stampImage) {
        this.stampImage = stampImage;
        return this;
    }


    /**
     * The selected alphabet of the stamp text
     */
    public AddStampRequest withAlphabet(@Nullable AddStampRequestAlphabet alphabet) {
        this.alphabet = alphabet;
        return this;
    }


    /**
     * The font size of the stamp text and image
     */
    public AddStampRequest withFontSize(@Nullable Float fontSize) {
        this.fontSize = fontSize;
        return this;
    }


    /**
     * The rotation of the stamp in degrees
     */
    public AddStampRequest withRotation(@Nullable Float rotation) {
        this.rotation = rotation;
        return this;
    }


    /**
     * The opacity of the stamp (0.0 - 1.0)
     */
    public AddStampRequest withOpacity(@Nullable Float opacity) {
        this.opacity = opacity;
        return this;
    }


    /**
     * Position for stamp placement based on a 1-9 grid (1: bottom-left, 2: bottom-center, 3: bottom-right, 4: middle-left, 5: middle-center, 6: middle-right, 7: top-left, 8: top-center, 9: top-right)
     */
    public AddStampRequest withPosition(@Nonnull AddStampRequestPosition position) {
        this.position = Utils.checkNotNull(position, "position");
        return this;
    }


    /**
     * Override X coordinate for stamp placement. If set, it will override the position-based calculation. Negative value means no override.
     */
    public AddStampRequest withOverrideX(@Nullable Float overrideX) {
        this.overrideX = overrideX;
        return this;
    }


    /**
     * Override Y coordinate for stamp placement. If set, it will override the position-based calculation. Negative value means no override.
     */
    public AddStampRequest withOverrideY(@Nullable Float overrideY) {
        this.overrideY = overrideY;
        return this;
    }


    /**
     * Specifies the margin size for the stamp.
     */
    public AddStampRequest withCustomMargin(@Nullable AddStampRequestCustomMargin customMargin) {
        this.customMargin = customMargin;
        return this;
    }


    /**
     * The color of the stamp text
     */
    public AddStampRequest withCustomColor(@Nullable String customColor) {
        this.customColor = customColor;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddStampRequest other = (AddStampRequest) o;
        return 
            Utils.enhancedDeepEquals(this.fileInput, other.fileInput) &&
            Utils.enhancedDeepEquals(this.fileId, other.fileId) &&
            Utils.enhancedDeepEquals(this.pageNumbers, other.pageNumbers) &&
            Utils.enhancedDeepEquals(this.stampType, other.stampType) &&
            Utils.enhancedDeepEquals(this.stampText, other.stampText) &&
            Utils.enhancedDeepEquals(this.stampImage, other.stampImage) &&
            Utils.enhancedDeepEquals(this.alphabet, other.alphabet) &&
            Utils.enhancedDeepEquals(this.fontSize, other.fontSize) &&
            Utils.enhancedDeepEquals(this.rotation, other.rotation) &&
            Utils.enhancedDeepEquals(this.opacity, other.opacity) &&
            Utils.enhancedDeepEquals(this.position, other.position) &&
            Utils.enhancedDeepEquals(this.overrideX, other.overrideX) &&
            Utils.enhancedDeepEquals(this.overrideY, other.overrideY) &&
            Utils.enhancedDeepEquals(this.customMargin, other.customMargin) &&
            Utils.enhancedDeepEquals(this.customColor, other.customColor);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileInput, fileId, pageNumbers,
            stampType, stampText, stampImage,
            alphabet, fontSize, rotation,
            opacity, position, overrideX,
            overrideY, customMargin, customColor);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AddStampRequest.class,
                "fileInput", fileInput,
                "fileId", fileId,
                "pageNumbers", pageNumbers,
                "stampType", stampType,
                "stampText", stampText,
                "stampImage", stampImage,
                "alphabet", alphabet,
                "fontSize", fontSize,
                "rotation", rotation,
                "opacity", opacity,
                "position", position,
                "overrideX", overrideX,
                "overrideY", overrideY,
                "customMargin", customMargin,
                "customColor", customColor);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private AddStampRequestFileInput fileInput;

        private String fileId;

        private String pageNumbers;

        private StampType stampType;

        private String stampText;

        private StampImage stampImage;

        private AddStampRequestAlphabet alphabet;

        private Float fontSize;

        private Float rotation;

        private Float opacity;

        private AddStampRequestPosition position;

        private Float overrideX;

        private Float overrideY;

        private AddStampRequestCustomMargin customMargin;

        private String customColor;

        private Builder() {
          // force use of static builder() method
        }

        public Builder fileInput(@Nullable AddStampRequestFileInput fileInput) {
            this.fileInput = fileInput;
            return this;
        }

        /**
         * File ID for server-side files (can be used instead of fileInput)
         */
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }

        /**
         * The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')
         */
        public Builder pageNumbers(@Nullable String pageNumbers) {
            this.pageNumbers = pageNumbers;
            return this;
        }

        /**
         * The stamp type (text or image)
         */
        public Builder stampType(@Nonnull StampType stampType) {
            this.stampType = Utils.checkNotNull(stampType, "stampType");
            return this;
        }

        /**
         * The stamp text
         */
        public Builder stampText(@Nullable String stampText) {
            this.stampText = stampText;
            return this;
        }

        public Builder stampImage(@Nullable StampImage stampImage) {
            this.stampImage = stampImage;
            return this;
        }

        /**
         * The selected alphabet of the stamp text
         */
        public Builder alphabet(@Nullable AddStampRequestAlphabet alphabet) {
            this.alphabet = alphabet;
            return this;
        }

        /**
         * The font size of the stamp text and image
         */
        public Builder fontSize(@Nullable Float fontSize) {
            this.fontSize = fontSize;
            return this;
        }

        /**
         * The rotation of the stamp in degrees
         */
        public Builder rotation(@Nullable Float rotation) {
            this.rotation = rotation;
            return this;
        }

        /**
         * The opacity of the stamp (0.0 - 1.0)
         */
        public Builder opacity(@Nullable Float opacity) {
            this.opacity = opacity;
            return this;
        }

        /**
         * Position for stamp placement based on a 1-9 grid (1: bottom-left, 2: bottom-center, 3: bottom-right, 4: middle-left, 5: middle-center, 6: middle-right, 7: top-left, 8: top-center, 9: top-right)
         */
        public Builder position(@Nonnull AddStampRequestPosition position) {
            this.position = Utils.checkNotNull(position, "position");
            return this;
        }

        /**
         * Override X coordinate for stamp placement. If set, it will override the position-based calculation. Negative value means no override.
         */
        public Builder overrideX(@Nullable Float overrideX) {
            this.overrideX = overrideX;
            return this;
        }

        /**
         * Override Y coordinate for stamp placement. If set, it will override the position-based calculation. Negative value means no override.
         */
        public Builder overrideY(@Nullable Float overrideY) {
            this.overrideY = overrideY;
            return this;
        }

        /**
         * Specifies the margin size for the stamp.
         */
        public Builder customMargin(@Nullable AddStampRequestCustomMargin customMargin) {
            this.customMargin = customMargin;
            return this;
        }

        /**
         * The color of the stamp text
         */
        public Builder customColor(@Nullable String customColor) {
            this.customColor = customColor;
            return this;
        }

        public AddStampRequest build() {
            return new AddStampRequest(
                fileInput, fileId, pageNumbers,
                stampType, stampText, stampImage,
                alphabet, fontSize, rotation,
                opacity, position, overrideX,
                overrideY, customMargin, customColor);
        }


        private static final LazySingletonValue<String> _SINGLETON_VALUE_PageNumbers =
                new LazySingletonValue<>(
                        "pageNumbers",
                        "\"all\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_StampText =
                new LazySingletonValue<>(
                        "stampText",
                        "\"Stirling Software\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<AddStampRequestAlphabet> _SINGLETON_VALUE_Alphabet =
                new LazySingletonValue<>(
                        "alphabet",
                        "\"roman\"",
                        new TypeReference<AddStampRequestAlphabet>() {});

        private static final LazySingletonValue<Float> _SINGLETON_VALUE_FontSize =
                new LazySingletonValue<>(
                        "fontSize",
                        "30",
                        new TypeReference<Float>() {});

        private static final LazySingletonValue<Float> _SINGLETON_VALUE_Rotation =
                new LazySingletonValue<>(
                        "rotation",
                        "0",
                        new TypeReference<Float>() {});

        private static final LazySingletonValue<Float> _SINGLETON_VALUE_Opacity =
                new LazySingletonValue<>(
                        "opacity",
                        "0.5",
                        new TypeReference<Float>() {});

        private static final LazySingletonValue<Float> _SINGLETON_VALUE_OverrideX =
                new LazySingletonValue<>(
                        "overrideX",
                        "-1",
                        new TypeReference<Float>() {});

        private static final LazySingletonValue<Float> _SINGLETON_VALUE_OverrideY =
                new LazySingletonValue<>(
                        "overrideY",
                        "-1",
                        new TypeReference<Float>() {});

        private static final LazySingletonValue<AddStampRequestCustomMargin> _SINGLETON_VALUE_CustomMargin =
                new LazySingletonValue<>(
                        "customMargin",
                        "\"medium\"",
                        new TypeReference<AddStampRequestCustomMargin>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_CustomColor =
                new LazySingletonValue<>(
                        "customColor",
                        "\"#d3d3d3\"",
                        new TypeReference<String>() {});
    }
}
