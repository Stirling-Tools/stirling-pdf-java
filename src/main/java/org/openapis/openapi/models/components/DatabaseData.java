/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class DatabaseData {

    private List<FileInfo> backupFiles;


    private String databaseVersion;


    private Boolean versionUnknown;

    @JsonCreator
    public DatabaseData(
            @Nullable List<FileInfo> backupFiles,
            @Nullable String databaseVersion,
            @Nullable Boolean versionUnknown) {
        this.backupFiles = backupFiles;
        this.databaseVersion = databaseVersion;
        this.versionUnknown = versionUnknown;
    }
    
    public DatabaseData() {
        this(null, null, null);
    }

    public Optional<List<FileInfo>> backupFiles() {
        return Optional.ofNullable(this.backupFiles);
    }

    public Optional<String> databaseVersion() {
        return Optional.ofNullable(this.databaseVersion);
    }

    public Optional<Boolean> versionUnknown() {
        return Optional.ofNullable(this.versionUnknown);
    }

    public static Builder builder() {
        return new Builder();
    }


    public DatabaseData withBackupFiles(@Nullable List<FileInfo> backupFiles) {
        this.backupFiles = backupFiles;
        return this;
    }


    public DatabaseData withDatabaseVersion(@Nullable String databaseVersion) {
        this.databaseVersion = databaseVersion;
        return this;
    }


    public DatabaseData withVersionUnknown(@Nullable Boolean versionUnknown) {
        this.versionUnknown = versionUnknown;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DatabaseData other = (DatabaseData) o;
        return 
            Utils.enhancedDeepEquals(this.backupFiles, other.backupFiles) &&
            Utils.enhancedDeepEquals(this.databaseVersion, other.databaseVersion) &&
            Utils.enhancedDeepEquals(this.versionUnknown, other.versionUnknown);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            backupFiles, databaseVersion, versionUnknown);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DatabaseData.class,
                "backupFiles", backupFiles,
                "databaseVersion", databaseVersion,
                "versionUnknown", versionUnknown);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private List<FileInfo> backupFiles;

        private String databaseVersion;

        private Boolean versionUnknown;

        private Builder() {
          // force use of static builder() method
        }

        public Builder backupFiles(@Nullable List<FileInfo> backupFiles) {
            this.backupFiles = backupFiles;
            return this;
        }

        public Builder databaseVersion(@Nullable String databaseVersion) {
            this.databaseVersion = databaseVersion;
            return this;
        }

        public Builder versionUnknown(@Nullable Boolean versionUnknown) {
            this.versionUnknown = versionUnknown;
            return this;
        }

        public DatabaseData build() {
            return new DatabaseData(
                backupFiles, databaseVersion, versionUnknown);
        }

    }
}
