/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi;

import static org.openapis.openapi.operations.Operations.RequestOperation;

import jakarta.annotation.Nullable;
import java.lang.Exception;
import org.openapis.openapi.models.components.BookletImpositionRequest;
import org.openapis.openapi.models.components.CropPdfForm;
import org.openapis.openapi.models.components.EditTableOfContentsRequest;
import org.openapis.openapi.models.components.MergeMultiplePagesRequest;
import org.openapis.openapi.models.components.MergePdfsRequest;
import org.openapis.openapi.models.components.OverlayPdfsRequest;
import org.openapis.openapi.models.components.PDFFile;
import org.openapis.openapi.models.components.PDFWithPageNums;
import org.openapis.openapi.models.components.RearrangePagesRequest;
import org.openapis.openapi.models.components.RotatePDFRequest;
import org.openapis.openapi.models.components.ScalePagesRequest;
import org.openapis.openapi.models.components.SplitPdfByChaptersRequest;
import org.openapis.openapi.models.components.SplitPdfBySectionsRequest;
import org.openapis.openapi.models.components.SplitPdfBySizeOrCountRequest;
import org.openapis.openapi.models.operations.AutoSplitPdf1RequestBuilder;
import org.openapis.openapi.models.operations.AutoSplitPdf1Response;
import org.openapis.openapi.models.operations.CreateBookletImpositionRequestBuilder;
import org.openapis.openapi.models.operations.CreateBookletImpositionResponse;
import org.openapis.openapi.models.operations.CropPdfRequestBuilder;
import org.openapis.openapi.models.operations.CropPdfResponse;
import org.openapis.openapi.models.operations.DeletePagesRequestBuilder;
import org.openapis.openapi.models.operations.DeletePagesResponse;
import org.openapis.openapi.models.operations.EditTableOfContentsRequestBuilder;
import org.openapis.openapi.models.operations.EditTableOfContentsResponse;
import org.openapis.openapi.models.operations.ExtractBookmarksRequest;
import org.openapis.openapi.models.operations.ExtractBookmarksRequestBuilder;
import org.openapis.openapi.models.operations.ExtractBookmarksResponse;
import org.openapis.openapi.models.operations.MergeMultiplePagesIntoOneRequestBuilder;
import org.openapis.openapi.models.operations.MergeMultiplePagesIntoOneResponse;
import org.openapis.openapi.models.operations.MergePdfsRequestBuilder;
import org.openapis.openapi.models.operations.MergePdfsResponse;
import org.openapis.openapi.models.operations.OverlayPdfsRequestBuilder;
import org.openapis.openapi.models.operations.OverlayPdfsResponse;
import org.openapis.openapi.models.operations.PdfToSinglePageRequestBuilder;
import org.openapis.openapi.models.operations.PdfToSinglePageResponse;
import org.openapis.openapi.models.operations.RearrangePagesRequestBuilder;
import org.openapis.openapi.models.operations.RearrangePagesResponse;
import org.openapis.openapi.models.operations.RemoveImagesRequestBuilder;
import org.openapis.openapi.models.operations.RemoveImagesResponse;
import org.openapis.openapi.models.operations.RotatePDFRequestBuilder;
import org.openapis.openapi.models.operations.RotatePDFResponse;
import org.openapis.openapi.models.operations.ScalePagesRequestBuilder;
import org.openapis.openapi.models.operations.ScalePagesResponse;
import org.openapis.openapi.models.operations.SplitPdf1RequestBuilder;
import org.openapis.openapi.models.operations.SplitPdf1Response;
import org.openapis.openapi.models.operations.SplitPdf2RequestBuilder;
import org.openapis.openapi.models.operations.SplitPdf2Response;
import org.openapis.openapi.models.operations.SplitPdfRequestBuilder;
import org.openapis.openapi.models.operations.SplitPdfResponse;
import org.openapis.openapi.operations.AutoSplitPdf1;
import org.openapis.openapi.operations.CreateBookletImposition;
import org.openapis.openapi.operations.CropPdf;
import org.openapis.openapi.operations.DeletePages;
import org.openapis.openapi.operations.EditTableOfContents;
import org.openapis.openapi.operations.ExtractBookmarks;
import org.openapis.openapi.operations.MergeMultiplePagesIntoOne;
import org.openapis.openapi.operations.MergePdfs;
import org.openapis.openapi.operations.OverlayPdfs;
import org.openapis.openapi.operations.PdfToSinglePage;
import org.openapis.openapi.operations.RearrangePages;
import org.openapis.openapi.operations.RemoveImages;
import org.openapis.openapi.operations.RotatePDF;
import org.openapis.openapi.operations.ScalePages;
import org.openapis.openapi.operations.SplitPdf1;
import org.openapis.openapi.operations.SplitPdf2;
import org.openapis.openapi.operations.SplitPdf;
import org.openapis.openapi.utils.Headers;

/**
 * Core PDF processing operations for fundamental document manipulation workflows.
 * 
 * <p>This endpoint group provides essential PDF functionality that forms the foundation
 * of most document processing workflows across various industries.
 * 
 * <p>Common use cases:
 * • Document preparation for archival systems and content organization
 * • File preparation for distribution, accessibility compliance, and batch processing
 * • Document consolidation for reporting and legal compliance workflows
 * 
 * <p>Typical applications:
 * • Content management, publishing workflows, and educational content distribution
 * • Business process automation and archive management
 * 
 * <p>Target users: Content managers, document processors, and organizations requiring
 * reliable foundational PDF manipulation capabilities.
 */
public class General {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncGeneral asyncSDK;

    General(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncGeneral(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncGeneral async() {
        return asyncSDK;
    }

    /**
     * Split PDF pages into smaller sections
     * 
     * <p>Split each page of a PDF into smaller sections based on the user's choice (halves, thirds, quarters, etc.), both vertically and horizontally. Input:PDF Output:ZIP-PDF Type:SISO
     * 
     * @return The call builder
     */
    public SplitPdfRequestBuilder splitPdf() {
        return new SplitPdfRequestBuilder(sdkConfiguration);
    }

    /**
     * Split PDF pages into smaller sections
     * 
     * <p>Split each page of a PDF into smaller sections based on the user's choice (halves, thirds, quarters, etc.), both vertically and horizontally. Input:PDF Output:ZIP-PDF Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SplitPdfResponse splitPdfDirect() throws Exception {
        return splitPdf(null);
    }

    /**
     * Split PDF pages into smaller sections
     * 
     * <p>Split each page of a PDF into smaller sections based on the user's choice (halves, thirds, quarters, etc.), both vertically and horizontally. Input:PDF Output:ZIP-PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SplitPdfResponse splitPdf(@Nullable SplitPdfBySectionsRequest request) throws Exception {
        RequestOperation<SplitPdfBySectionsRequest, SplitPdfResponse> operation
              = new SplitPdf.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Split PDFs by Chapters
     * 
     * <p>Splits a PDF into chapters and returns a ZIP file.
     * 
     * @return The call builder
     */
    public SplitPdf1RequestBuilder splitPdf1() {
        return new SplitPdf1RequestBuilder(sdkConfiguration);
    }

    /**
     * Split PDFs by Chapters
     * 
     * <p>Splits a PDF into chapters and returns a ZIP file.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SplitPdf1Response splitPdf1Direct() throws Exception {
        return splitPdf1(null);
    }

    /**
     * Split PDFs by Chapters
     * 
     * <p>Splits a PDF into chapters and returns a ZIP file.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SplitPdf1Response splitPdf1(@Nullable SplitPdfByChaptersRequest request) throws Exception {
        RequestOperation<SplitPdfByChaptersRequest, SplitPdf1Response> operation
              = new SplitPdf1.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Split a PDF file into separate documents
     * 
     * <p>This endpoint splits a given PDF file into separate documents based on the specified page numbers or ranges. Users can specify pages using individual numbers, ranges, or 'all' for every page. Input:PDF Output:PDF Type:SIMO
     * 
     * @return The call builder
     */
    public SplitPdf2RequestBuilder splitPdf2() {
        return new SplitPdf2RequestBuilder(sdkConfiguration);
    }

    /**
     * Split a PDF file into separate documents
     * 
     * <p>This endpoint splits a given PDF file into separate documents based on the specified page numbers or ranges. Users can specify pages using individual numbers, ranges, or 'all' for every page. Input:PDF Output:PDF Type:SIMO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SplitPdf2Response splitPdf2Direct() throws Exception {
        return splitPdf2(null);
    }

    /**
     * Split a PDF file into separate documents
     * 
     * <p>This endpoint splits a given PDF file into separate documents based on the specified page numbers or ranges. Users can specify pages using individual numbers, ranges, or 'all' for every page. Input:PDF Output:PDF Type:SIMO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SplitPdf2Response splitPdf2(@Nullable PDFWithPageNums request) throws Exception {
        RequestOperation<PDFWithPageNums, SplitPdf2Response> operation
              = new SplitPdf2.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Auto split PDF pages into separate documents based on size or count
     * 
     * <p>split PDF into multiple paged documents based on size/count, ie if 20 pages and split into 5, it does 5 documents each 4 pages
     *  if 10MB and each page is 1MB and you enter 2MB then 5 docs each 2MB (rounded so that it accepts 1.9MB but not 2.1MB) Input:PDF Output:ZIP-PDF Type:SISO
     * 
     * @return The call builder
     */
    public AutoSplitPdf1RequestBuilder autoSplitPdf1() {
        return new AutoSplitPdf1RequestBuilder(sdkConfiguration);
    }

    /**
     * Auto split PDF pages into separate documents based on size or count
     * 
     * <p>split PDF into multiple paged documents based on size/count, ie if 20 pages and split into 5, it does 5 documents each 4 pages
     *  if 10MB and each page is 1MB and you enter 2MB then 5 docs each 2MB (rounded so that it accepts 1.9MB but not 2.1MB) Input:PDF Output:ZIP-PDF Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AutoSplitPdf1Response autoSplitPdf1Direct() throws Exception {
        return autoSplitPdf1(null);
    }

    /**
     * Auto split PDF pages into separate documents based on size or count
     * 
     * <p>split PDF into multiple paged documents based on size/count, ie if 20 pages and split into 5, it does 5 documents each 4 pages
     *  if 10MB and each page is 1MB and you enter 2MB then 5 docs each 2MB (rounded so that it accepts 1.9MB but not 2.1MB) Input:PDF Output:ZIP-PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AutoSplitPdf1Response autoSplitPdf1(@Nullable SplitPdfBySizeOrCountRequest request) throws Exception {
        RequestOperation<SplitPdfBySizeOrCountRequest, AutoSplitPdf1Response> operation
              = new AutoSplitPdf1.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Change the size of a PDF page/document
     * 
     * <p>This operation takes an input PDF file and the size to scale the pages to in the output PDF file. Input:PDF Output:PDF Type:SISO
     * 
     * @return The call builder
     */
    public ScalePagesRequestBuilder scalePages() {
        return new ScalePagesRequestBuilder(sdkConfiguration);
    }

    /**
     * Change the size of a PDF page/document
     * 
     * <p>This operation takes an input PDF file and the size to scale the pages to in the output PDF file. Input:PDF Output:PDF Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ScalePagesResponse scalePagesDirect() throws Exception {
        return scalePages(null);
    }

    /**
     * Change the size of a PDF page/document
     * 
     * <p>This operation takes an input PDF file and the size to scale the pages to in the output PDF file. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ScalePagesResponse scalePages(@Nullable ScalePagesRequest request) throws Exception {
        RequestOperation<ScalePagesRequest, ScalePagesResponse> operation
              = new ScalePages.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Rotate a PDF file
     * 
     * <p>This endpoint rotates a given PDF file by a specified angle. The angle must be a multiple of 90. Input:PDF Output:PDF Type:SISO
     * 
     * @return The call builder
     */
    public RotatePDFRequestBuilder rotatePDF() {
        return new RotatePDFRequestBuilder(sdkConfiguration);
    }

    /**
     * Rotate a PDF file
     * 
     * <p>This endpoint rotates a given PDF file by a specified angle. The angle must be a multiple of 90. Input:PDF Output:PDF Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RotatePDFResponse rotatePDFDirect() throws Exception {
        return rotatePDF(null);
    }

    /**
     * Rotate a PDF file
     * 
     * <p>This endpoint rotates a given PDF file by a specified angle. The angle must be a multiple of 90. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RotatePDFResponse rotatePDF(@Nullable RotatePDFRequest request) throws Exception {
        RequestOperation<RotatePDFRequest, RotatePDFResponse> operation
              = new RotatePDF.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove pages from a PDF file
     * 
     * <p>This endpoint removes specified pages from a given PDF file. Users can provide a comma-separated list of page numbers or ranges to delete. Input:PDF Output:PDF Type:SISO
     * 
     * @return The call builder
     */
    public DeletePagesRequestBuilder deletePages() {
        return new DeletePagesRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove pages from a PDF file
     * 
     * <p>This endpoint removes specified pages from a given PDF file. Users can provide a comma-separated list of page numbers or ranges to delete. Input:PDF Output:PDF Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletePagesResponse deletePagesDirect() throws Exception {
        return deletePages(null);
    }

    /**
     * Remove pages from a PDF file
     * 
     * <p>This endpoint removes specified pages from a given PDF file. Users can provide a comma-separated list of page numbers or ranges to delete. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletePagesResponse deletePages(@Nullable PDFWithPageNums request) throws Exception {
        RequestOperation<PDFWithPageNums, DeletePagesResponse> operation
              = new DeletePages.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove images from file to reduce the file size.
     * 
     * <p>This endpoint remove images from file to reduce the file size.Input:PDF Output:PDF Type:SISO
     * 
     * @return The call builder
     */
    public RemoveImagesRequestBuilder removeImages() {
        return new RemoveImagesRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove images from file to reduce the file size.
     * 
     * <p>This endpoint remove images from file to reduce the file size.Input:PDF Output:PDF Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveImagesResponse removeImagesDirect() throws Exception {
        return removeImages(null);
    }

    /**
     * Remove images from file to reduce the file size.
     * 
     * <p>This endpoint remove images from file to reduce the file size.Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveImagesResponse removeImages(@Nullable PDFFile request) throws Exception {
        RequestOperation<PDFFile, RemoveImagesResponse> operation
              = new RemoveImages.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Rearrange pages in a PDF file
     * 
     * <p>This endpoint rearranges pages in a given PDF file based on the specified page order or custom mode. Users can provide a page order as a comma-separated list of page numbers or page ranges, or a custom mode. Input:PDF Output:PDF
     * 
     * @return The call builder
     */
    public RearrangePagesRequestBuilder rearrangePages() {
        return new RearrangePagesRequestBuilder(sdkConfiguration);
    }

    /**
     * Rearrange pages in a PDF file
     * 
     * <p>This endpoint rearranges pages in a given PDF file based on the specified page order or custom mode. Users can provide a page order as a comma-separated list of page numbers or page ranges, or a custom mode. Input:PDF Output:PDF
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RearrangePagesResponse rearrangePagesDirect() throws Exception {
        return rearrangePages(null);
    }

    /**
     * Rearrange pages in a PDF file
     * 
     * <p>This endpoint rearranges pages in a given PDF file based on the specified page order or custom mode. Users can provide a page order as a comma-separated list of page numbers or page ranges, or a custom mode. Input:PDF Output:PDF
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RearrangePagesResponse rearrangePages(@Nullable RearrangePagesRequest request) throws Exception {
        RequestOperation<RearrangePagesRequest, RearrangePagesResponse> operation
              = new RearrangePages.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Convert a multi-page PDF into a single long page PDF
     * 
     * <p>This endpoint converts a multi-page PDF document into a single paged PDF document. The width of the single page will be same as the input's width, but the height will be the sum of all the pages' heights. Input:PDF Output:PDF Type:SISO
     * 
     * @return The call builder
     */
    public PdfToSinglePageRequestBuilder pdfToSinglePage() {
        return new PdfToSinglePageRequestBuilder(sdkConfiguration);
    }

    /**
     * Convert a multi-page PDF into a single long page PDF
     * 
     * <p>This endpoint converts a multi-page PDF document into a single paged PDF document. The width of the single page will be same as the input's width, but the height will be the sum of all the pages' heights. Input:PDF Output:PDF Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PdfToSinglePageResponse pdfToSinglePageDirect() throws Exception {
        return pdfToSinglePage(null);
    }

    /**
     * Convert a multi-page PDF into a single long page PDF
     * 
     * <p>This endpoint converts a multi-page PDF document into a single paged PDF document. The width of the single page will be same as the input's width, but the height will be the sum of all the pages' heights. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PdfToSinglePageResponse pdfToSinglePage(@Nullable PDFFile request) throws Exception {
        RequestOperation<PDFFile, PdfToSinglePageResponse> operation
              = new PdfToSinglePage.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Overlay PDF files in various modes
     * 
     * <p>Overlay PDF files onto a base PDF with different modes: Sequential, Interleaved, or Fixed Repeat. Input:PDF Output:PDF Type:MIMO
     * 
     * @return The call builder
     */
    public OverlayPdfsRequestBuilder overlayPdfs() {
        return new OverlayPdfsRequestBuilder(sdkConfiguration);
    }

    /**
     * Overlay PDF files in various modes
     * 
     * <p>Overlay PDF files onto a base PDF with different modes: Sequential, Interleaved, or Fixed Repeat. Input:PDF Output:PDF Type:MIMO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public OverlayPdfsResponse overlayPdfsDirect() throws Exception {
        return overlayPdfs(null);
    }

    /**
     * Overlay PDF files in various modes
     * 
     * <p>Overlay PDF files onto a base PDF with different modes: Sequential, Interleaved, or Fixed Repeat. Input:PDF Output:PDF Type:MIMO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public OverlayPdfsResponse overlayPdfs(@Nullable OverlayPdfsRequest request) throws Exception {
        RequestOperation<OverlayPdfsRequest, OverlayPdfsResponse> operation
              = new OverlayPdfs.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Merge multiple pages of a PDF document into a single page
     * 
     * <p>This operation takes an input PDF file and the number of pages to merge into a single sheet in the output PDF file. Input:PDF Output:PDF Type:SISO
     * 
     * @return The call builder
     */
    public MergeMultiplePagesIntoOneRequestBuilder mergeMultiplePagesIntoOne() {
        return new MergeMultiplePagesIntoOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Merge multiple pages of a PDF document into a single page
     * 
     * <p>This operation takes an input PDF file and the number of pages to merge into a single sheet in the output PDF file. Input:PDF Output:PDF Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public MergeMultiplePagesIntoOneResponse mergeMultiplePagesIntoOneDirect() throws Exception {
        return mergeMultiplePagesIntoOne(null);
    }

    /**
     * Merge multiple pages of a PDF document into a single page
     * 
     * <p>This operation takes an input PDF file and the number of pages to merge into a single sheet in the output PDF file. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public MergeMultiplePagesIntoOneResponse mergeMultiplePagesIntoOne(@Nullable MergeMultiplePagesRequest request) throws Exception {
        RequestOperation<MergeMultiplePagesRequest, MergeMultiplePagesIntoOneResponse> operation
              = new MergeMultiplePagesIntoOne.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Merge multiple PDF files into one
     * 
     * <p>This endpoint merges multiple PDF files into a single PDF file. The merged file will contain all pages from the input files in the order they were provided. Input:PDF Output:PDF Type:MISO
     * 
     * @return The call builder
     */
    public MergePdfsRequestBuilder mergePdfs() {
        return new MergePdfsRequestBuilder(sdkConfiguration);
    }

    /**
     * Merge multiple PDF files into one
     * 
     * <p>This endpoint merges multiple PDF files into a single PDF file. The merged file will contain all pages from the input files in the order they were provided. Input:PDF Output:PDF Type:MISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public MergePdfsResponse mergePdfsDirect() throws Exception {
        return mergePdfs(null);
    }

    /**
     * Merge multiple PDF files into one
     * 
     * <p>This endpoint merges multiple PDF files into a single PDF file. The merged file will contain all pages from the input files in the order they were provided. Input:PDF Output:PDF Type:MISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public MergePdfsResponse mergePdfs(@Nullable MergePdfsRequest request) throws Exception {
        RequestOperation<MergePdfsRequest, MergePdfsResponse> operation
              = new MergePdfs.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Extract PDF Bookmarks
     * 
     * <p>Extracts bookmarks/table of contents from a PDF document as JSON.
     * 
     * @return The call builder
     */
    public ExtractBookmarksRequestBuilder extractBookmarks() {
        return new ExtractBookmarksRequestBuilder(sdkConfiguration);
    }

    /**
     * Extract PDF Bookmarks
     * 
     * <p>Extracts bookmarks/table of contents from a PDF document as JSON.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ExtractBookmarksResponse extractBookmarksDirect() throws Exception {
        return extractBookmarks(null);
    }

    /**
     * Extract PDF Bookmarks
     * 
     * <p>Extracts bookmarks/table of contents from a PDF document as JSON.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ExtractBookmarksResponse extractBookmarks(@Nullable ExtractBookmarksRequest request) throws Exception {
        RequestOperation<ExtractBookmarksRequest, ExtractBookmarksResponse> operation
              = new ExtractBookmarks.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Edit Table of Contents
     * 
     * <p>Add or edit bookmarks/table of contents in a PDF document.
     * 
     * @return The call builder
     */
    public EditTableOfContentsRequestBuilder editTableOfContents() {
        return new EditTableOfContentsRequestBuilder(sdkConfiguration);
    }

    /**
     * Edit Table of Contents
     * 
     * <p>Add or edit bookmarks/table of contents in a PDF document.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public EditTableOfContentsResponse editTableOfContentsDirect() throws Exception {
        return editTableOfContents(null);
    }

    /**
     * Edit Table of Contents
     * 
     * <p>Add or edit bookmarks/table of contents in a PDF document.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public EditTableOfContentsResponse editTableOfContents(@Nullable EditTableOfContentsRequest request) throws Exception {
        RequestOperation<EditTableOfContentsRequest, EditTableOfContentsResponse> operation
              = new EditTableOfContents.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Crops a PDF document
     * 
     * <p>This operation takes an input PDF file and crops it according to the given coordinates. Input:PDF Output:PDF Type:SISO
     * 
     * @return The call builder
     */
    public CropPdfRequestBuilder cropPdf() {
        return new CropPdfRequestBuilder(sdkConfiguration);
    }

    /**
     * Crops a PDF document
     * 
     * <p>This operation takes an input PDF file and crops it according to the given coordinates. Input:PDF Output:PDF Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CropPdfResponse cropPdfDirect() throws Exception {
        return cropPdf(null);
    }

    /**
     * Crops a PDF document
     * 
     * <p>This operation takes an input PDF file and crops it according to the given coordinates. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CropPdfResponse cropPdf(@Nullable CropPdfForm request) throws Exception {
        RequestOperation<CropPdfForm, CropPdfResponse> operation
              = new CropPdf.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a booklet with proper page imposition
     * 
     * <p>This operation combines page reordering for booklet printing with multi-page layout. It rearranges pages in the correct order for booklet printing and places multiple pages on each sheet for proper folding and binding. Input:PDF Output:PDF Type:SISO
     * 
     * @return The call builder
     */
    public CreateBookletImpositionRequestBuilder createBookletImposition() {
        return new CreateBookletImpositionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a booklet with proper page imposition
     * 
     * <p>This operation combines page reordering for booklet printing with multi-page layout. It rearranges pages in the correct order for booklet printing and places multiple pages on each sheet for proper folding and binding. Input:PDF Output:PDF Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateBookletImpositionResponse createBookletImpositionDirect() throws Exception {
        return createBookletImposition(null);
    }

    /**
     * Create a booklet with proper page imposition
     * 
     * <p>This operation combines page reordering for booklet printing with multi-page layout. It rearranges pages in the correct order for booklet printing and places multiple pages on each sheet for proper folding and binding. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateBookletImpositionResponse createBookletImposition(@Nullable BookletImpositionRequest request) throws Exception {
        RequestOperation<BookletImpositionRequest, CreateBookletImpositionResponse> operation
              = new CreateBookletImposition.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
