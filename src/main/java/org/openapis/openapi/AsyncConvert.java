/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi;

import static org.openapis.openapi.operations.Operations.AsyncRequestOperation;

import jakarta.annotation.Nullable;
import java.util.concurrent.CompletableFuture;
import org.openapis.openapi.models.components.ConvertToImageRequest;
import org.openapis.openapi.models.components.ConvertToPdfRequest;
import org.openapis.openapi.models.components.EmlToPdfRequest;
import org.openapis.openapi.models.components.GeneralFile;
import org.openapis.openapi.models.components.HTMLToPdfRequest;
import org.openapis.openapi.models.components.PDFFile;
import org.openapis.openapi.models.components.PDFWithPageNums;
import org.openapis.openapi.models.components.PdfToPdfARequest;
import org.openapis.openapi.models.components.PdfToPresentationRequest;
import org.openapis.openapi.models.components.PdfToTextOrRTFRequest;
import org.openapis.openapi.models.components.PdfToWordRequest;
import org.openapis.openapi.models.components.UrlToPdfRequest;
import org.openapis.openapi.models.operations.async.ConvertEmlToPdfRequestBuilder;
import org.openapis.openapi.models.operations.async.ConvertEmlToPdfResponse;
import org.openapis.openapi.models.operations.async.ConvertToImageRequestBuilder;
import org.openapis.openapi.models.operations.async.ConvertToImageResponse;
import org.openapis.openapi.models.operations.async.ConvertToPdfRequestBuilder;
import org.openapis.openapi.models.operations.async.ConvertToPdfResponse;
import org.openapis.openapi.models.operations.async.HtmlToPdfRequestBuilder;
import org.openapis.openapi.models.operations.async.HtmlToPdfResponse;
import org.openapis.openapi.models.operations.async.MarkdownToPdfRequestBuilder;
import org.openapis.openapi.models.operations.async.MarkdownToPdfResponse;
import org.openapis.openapi.models.operations.async.PdfToCsvRequestBuilder;
import org.openapis.openapi.models.operations.async.PdfToCsvResponse;
import org.openapis.openapi.models.operations.async.PdfToPdfARequestBuilder;
import org.openapis.openapi.models.operations.async.PdfToPdfAResponse;
import org.openapis.openapi.models.operations.async.ProcessFileToPDFRequestBuilder;
import org.openapis.openapi.models.operations.async.ProcessFileToPDFResponse;
import org.openapis.openapi.models.operations.async.ProcessPdfToHTMLRequestBuilder;
import org.openapis.openapi.models.operations.async.ProcessPdfToHTMLResponse;
import org.openapis.openapi.models.operations.async.ProcessPdfToMarkdownRequestBuilder;
import org.openapis.openapi.models.operations.async.ProcessPdfToMarkdownResponse;
import org.openapis.openapi.models.operations.async.ProcessPdfToPresentationRequestBuilder;
import org.openapis.openapi.models.operations.async.ProcessPdfToPresentationResponse;
import org.openapis.openapi.models.operations.async.ProcessPdfToRTForTXTRequestBuilder;
import org.openapis.openapi.models.operations.async.ProcessPdfToRTForTXTResponse;
import org.openapis.openapi.models.operations.async.ProcessPdfToWordRequestBuilder;
import org.openapis.openapi.models.operations.async.ProcessPdfToWordResponse;
import org.openapis.openapi.models.operations.async.ProcessPdfToXMLRequestBuilder;
import org.openapis.openapi.models.operations.async.ProcessPdfToXMLResponse;
import org.openapis.openapi.models.operations.async.UrlToPdfRequestBuilder;
import org.openapis.openapi.models.operations.async.UrlToPdfResponse;
import org.openapis.openapi.operations.ConvertEmlToPdf;
import org.openapis.openapi.operations.ConvertToImage;
import org.openapis.openapi.operations.ConvertToPdf;
import org.openapis.openapi.operations.HtmlToPdf;
import org.openapis.openapi.operations.MarkdownToPdf;
import org.openapis.openapi.operations.PdfToCsv;
import org.openapis.openapi.operations.PdfToPdfA;
import org.openapis.openapi.operations.ProcessFileToPDF;
import org.openapis.openapi.operations.ProcessPdfToHTML;
import org.openapis.openapi.operations.ProcessPdfToMarkdown;
import org.openapis.openapi.operations.ProcessPdfToPresentation;
import org.openapis.openapi.operations.ProcessPdfToRTForTXT;
import org.openapis.openapi.operations.ProcessPdfToWord;
import org.openapis.openapi.operations.ProcessPdfToXML;
import org.openapis.openapi.operations.UrlToPdf;
import org.openapis.openapi.utils.Headers;

/**
 * Document format transformation services for cross-platform compatibility and workflow integration.
 * 
 * <p>This endpoint group enables transformation between various formats, supporting
 * diverse business workflows and system integrations for mixed document ecosystems.
 * 
 * <p>Common use cases:
 * • Legacy system integration, document migration, and cross-platform sharing
 * • Archive standardization, publishing preparation, and content adaptation
 * • Accessibility compliance and mobile-friendly document preparation
 * 
 * <p>Business applications:
 * • Enterprise content management, digital publishing, and educational platforms
 * • Legal document processing, healthcare interoperability, and government standardization
 * 
 * <p>Integration scenarios:
 * • API-driven pipelines, automated workflow preparation, and batch conversions
 * • Real-time format adaptation for user requests
 * 
 * <p>Target users: System integrators, content managers, digital archivists, and
 * organizations requiring flexible document format interoperability.
 */
public class AsyncConvert {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Convert syncSDK;

    AsyncConvert(Convert syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Convert sync() {
        return syncSDK;
    }


    /**
     * Convert a URL to a PDF
     * 
     * <p>This endpoint fetches content from a URL and converts it to a PDF format. Input:N/A Output:PDF Type:SISO
     * 
     * @return The async call builder
     */
    public UrlToPdfRequestBuilder urlToPdf() {
        return new UrlToPdfRequestBuilder(sdkConfiguration);
    }

    /**
     * Convert a URL to a PDF
     * 
     * <p>This endpoint fetches content from a URL and converts it to a PDF format. Input:N/A Output:PDF Type:SISO
     * 
     * @return CompletableFuture&lt;UrlToPdfResponse&gt; - The async response
     */
    public CompletableFuture<UrlToPdfResponse> urlToPdfDirect() {
        return urlToPdf(null);
    }

    /**
     * Convert a URL to a PDF
     * 
     * <p>This endpoint fetches content from a URL and converts it to a PDF format. Input:N/A Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UrlToPdfResponse&gt; - The async response
     */
    public CompletableFuture<UrlToPdfResponse> urlToPdf(@Nullable UrlToPdfRequest request) {
        AsyncRequestOperation<UrlToPdfRequest, UrlToPdfResponse> operation
              = new UrlToPdf.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Convert PDF to XML
     * 
     * <p>This endpoint converts a PDF file to an XML file. Input:PDF Output:XML Type:SISO
     * 
     * @return The async call builder
     */
    public ProcessPdfToXMLRequestBuilder processPdfToXML() {
        return new ProcessPdfToXMLRequestBuilder(sdkConfiguration);
    }

    /**
     * Convert PDF to XML
     * 
     * <p>This endpoint converts a PDF file to an XML file. Input:PDF Output:XML Type:SISO
     * 
     * @return CompletableFuture&lt;ProcessPdfToXMLResponse&gt; - The async response
     */
    public CompletableFuture<ProcessPdfToXMLResponse> processPdfToXMLDirect() {
        return processPdfToXML(null);
    }

    /**
     * Convert PDF to XML
     * 
     * <p>This endpoint converts a PDF file to an XML file. Input:PDF Output:XML Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ProcessPdfToXMLResponse&gt; - The async response
     */
    public CompletableFuture<ProcessPdfToXMLResponse> processPdfToXML(@Nullable PDFFile request) {
        AsyncRequestOperation<PDFFile, ProcessPdfToXMLResponse> operation
              = new ProcessPdfToXML.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Convert PDF to Word document
     * 
     * <p>This endpoint converts a given PDF file to a Word document format. Input:PDF Output:WORD Type:SISO
     * 
     * @return The async call builder
     */
    public ProcessPdfToWordRequestBuilder processPdfToWord() {
        return new ProcessPdfToWordRequestBuilder(sdkConfiguration);
    }

    /**
     * Convert PDF to Word document
     * 
     * <p>This endpoint converts a given PDF file to a Word document format. Input:PDF Output:WORD Type:SISO
     * 
     * @return CompletableFuture&lt;ProcessPdfToWordResponse&gt; - The async response
     */
    public CompletableFuture<ProcessPdfToWordResponse> processPdfToWordDirect() {
        return processPdfToWord(null);
    }

    /**
     * Convert PDF to Word document
     * 
     * <p>This endpoint converts a given PDF file to a Word document format. Input:PDF Output:WORD Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ProcessPdfToWordResponse&gt; - The async response
     */
    public CompletableFuture<ProcessPdfToWordResponse> processPdfToWord(@Nullable PdfToWordRequest request) {
        AsyncRequestOperation<PdfToWordRequest, ProcessPdfToWordResponse> operation
              = new ProcessPdfToWord.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Convert PDF to Text or RTF format
     * 
     * <p>This endpoint converts a given PDF file to Text or RTF format. Input:PDF Output:TXT Type:SISO
     * 
     * @return The async call builder
     */
    public ProcessPdfToRTForTXTRequestBuilder processPdfToRTForTXT() {
        return new ProcessPdfToRTForTXTRequestBuilder(sdkConfiguration);
    }

    /**
     * Convert PDF to Text or RTF format
     * 
     * <p>This endpoint converts a given PDF file to Text or RTF format. Input:PDF Output:TXT Type:SISO
     * 
     * @return CompletableFuture&lt;ProcessPdfToRTForTXTResponse&gt; - The async response
     */
    public CompletableFuture<ProcessPdfToRTForTXTResponse> processPdfToRTForTXTDirect() {
        return processPdfToRTForTXT(null);
    }

    /**
     * Convert PDF to Text or RTF format
     * 
     * <p>This endpoint converts a given PDF file to Text or RTF format. Input:PDF Output:TXT Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ProcessPdfToRTForTXTResponse&gt; - The async response
     */
    public CompletableFuture<ProcessPdfToRTForTXTResponse> processPdfToRTForTXT(@Nullable PdfToTextOrRTFRequest request) {
        AsyncRequestOperation<PdfToTextOrRTFRequest, ProcessPdfToRTForTXTResponse> operation
              = new ProcessPdfToRTForTXT.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Convert PDF to Presentation format
     * 
     * <p>This endpoint converts a given PDF file to a Presentation format. Input:PDF Output:PPT Type:SISO
     * 
     * @return The async call builder
     */
    public ProcessPdfToPresentationRequestBuilder processPdfToPresentation() {
        return new ProcessPdfToPresentationRequestBuilder(sdkConfiguration);
    }

    /**
     * Convert PDF to Presentation format
     * 
     * <p>This endpoint converts a given PDF file to a Presentation format. Input:PDF Output:PPT Type:SISO
     * 
     * @return CompletableFuture&lt;ProcessPdfToPresentationResponse&gt; - The async response
     */
    public CompletableFuture<ProcessPdfToPresentationResponse> processPdfToPresentationDirect() {
        return processPdfToPresentation(null);
    }

    /**
     * Convert PDF to Presentation format
     * 
     * <p>This endpoint converts a given PDF file to a Presentation format. Input:PDF Output:PPT Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ProcessPdfToPresentationResponse&gt; - The async response
     */
    public CompletableFuture<ProcessPdfToPresentationResponse> processPdfToPresentation(@Nullable PdfToPresentationRequest request) {
        AsyncRequestOperation<PdfToPresentationRequest, ProcessPdfToPresentationResponse> operation
              = new ProcessPdfToPresentation.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Convert a PDF to a PDF/A
     * 
     * <p>This endpoint converts a PDF file to a PDF/A file using LibreOffice. PDF/A is a format designed for long-term archiving of digital documents. Input:PDF Output:PDF Type:SISO
     * 
     * @return The async call builder
     */
    public PdfToPdfARequestBuilder pdfToPdfA() {
        return new PdfToPdfARequestBuilder(sdkConfiguration);
    }

    /**
     * Convert a PDF to a PDF/A
     * 
     * <p>This endpoint converts a PDF file to a PDF/A file using LibreOffice. PDF/A is a format designed for long-term archiving of digital documents. Input:PDF Output:PDF Type:SISO
     * 
     * @return CompletableFuture&lt;PdfToPdfAResponse&gt; - The async response
     */
    public CompletableFuture<PdfToPdfAResponse> pdfToPdfADirect() {
        return pdfToPdfA(null);
    }

    /**
     * Convert a PDF to a PDF/A
     * 
     * <p>This endpoint converts a PDF file to a PDF/A file using LibreOffice. PDF/A is a format designed for long-term archiving of digital documents. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PdfToPdfAResponse&gt; - The async response
     */
    public CompletableFuture<PdfToPdfAResponse> pdfToPdfA(@Nullable PdfToPdfARequest request) {
        AsyncRequestOperation<PdfToPdfARequest, PdfToPdfAResponse> operation
              = new PdfToPdfA.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Convert PDF to Markdown
     * 
     * <p>This endpoint converts a PDF file to Markdown format. Input:PDF Output:Markdown Type:SISO
     * 
     * @return The async call builder
     */
    public ProcessPdfToMarkdownRequestBuilder processPdfToMarkdown() {
        return new ProcessPdfToMarkdownRequestBuilder(sdkConfiguration);
    }

    /**
     * Convert PDF to Markdown
     * 
     * <p>This endpoint converts a PDF file to Markdown format. Input:PDF Output:Markdown Type:SISO
     * 
     * @return CompletableFuture&lt;ProcessPdfToMarkdownResponse&gt; - The async response
     */
    public CompletableFuture<ProcessPdfToMarkdownResponse> processPdfToMarkdownDirect() {
        return processPdfToMarkdown(null);
    }

    /**
     * Convert PDF to Markdown
     * 
     * <p>This endpoint converts a PDF file to Markdown format. Input:PDF Output:Markdown Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ProcessPdfToMarkdownResponse&gt; - The async response
     */
    public CompletableFuture<ProcessPdfToMarkdownResponse> processPdfToMarkdown(@Nullable PDFFile request) {
        AsyncRequestOperation<PDFFile, ProcessPdfToMarkdownResponse> operation
              = new ProcessPdfToMarkdown.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Convert PDF to image(s)
     * 
     * <p>This endpoint converts a PDF file to image(s) with the specified image format, color type, and DPI. Users can choose to get a single image or multiple images.  Input:PDF Output:Image Type:SI-Conditional
     * 
     * @return The async call builder
     */
    public ConvertToImageRequestBuilder convertToImage() {
        return new ConvertToImageRequestBuilder(sdkConfiguration);
    }

    /**
     * Convert PDF to image(s)
     * 
     * <p>This endpoint converts a PDF file to image(s) with the specified image format, color type, and DPI. Users can choose to get a single image or multiple images.  Input:PDF Output:Image Type:SI-Conditional
     * 
     * @return CompletableFuture&lt;ConvertToImageResponse&gt; - The async response
     */
    public CompletableFuture<ConvertToImageResponse> convertToImageDirect() {
        return convertToImage(null);
    }

    /**
     * Convert PDF to image(s)
     * 
     * <p>This endpoint converts a PDF file to image(s) with the specified image format, color type, and DPI. Users can choose to get a single image or multiple images.  Input:PDF Output:Image Type:SI-Conditional
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ConvertToImageResponse&gt; - The async response
     */
    public CompletableFuture<ConvertToImageResponse> convertToImage(@Nullable ConvertToImageRequest request) {
        AsyncRequestOperation<ConvertToImageRequest, ConvertToImageResponse> operation
              = new ConvertToImage.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Convert PDF to HTML
     * 
     * <p>This endpoint converts a PDF file to HTML format. Input:PDF Output:HTML Type:SISO
     * 
     * @return The async call builder
     */
    public ProcessPdfToHTMLRequestBuilder processPdfToHTML() {
        return new ProcessPdfToHTMLRequestBuilder(sdkConfiguration);
    }

    /**
     * Convert PDF to HTML
     * 
     * <p>This endpoint converts a PDF file to HTML format. Input:PDF Output:HTML Type:SISO
     * 
     * @return CompletableFuture&lt;ProcessPdfToHTMLResponse&gt; - The async response
     */
    public CompletableFuture<ProcessPdfToHTMLResponse> processPdfToHTMLDirect() {
        return processPdfToHTML(null);
    }

    /**
     * Convert PDF to HTML
     * 
     * <p>This endpoint converts a PDF file to HTML format. Input:PDF Output:HTML Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ProcessPdfToHTMLResponse&gt; - The async response
     */
    public CompletableFuture<ProcessPdfToHTMLResponse> processPdfToHTML(@Nullable PDFFile request) {
        AsyncRequestOperation<PDFFile, ProcessPdfToHTMLResponse> operation
              = new ProcessPdfToHTML.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Extracts a CSV document from a PDF
     * 
     * <p>This operation takes an input PDF file and returns CSV file of whole page. Input:PDF Output:CSV Type:SISO
     * 
     * @return The async call builder
     */
    public PdfToCsvRequestBuilder pdfToCsv() {
        return new PdfToCsvRequestBuilder(sdkConfiguration);
    }

    /**
     * Extracts a CSV document from a PDF
     * 
     * <p>This operation takes an input PDF file and returns CSV file of whole page. Input:PDF Output:CSV Type:SISO
     * 
     * @return CompletableFuture&lt;PdfToCsvResponse&gt; - The async response
     */
    public CompletableFuture<PdfToCsvResponse> pdfToCsvDirect() {
        return pdfToCsv(null);
    }

    /**
     * Extracts a CSV document from a PDF
     * 
     * <p>This operation takes an input PDF file and returns CSV file of whole page. Input:PDF Output:CSV Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PdfToCsvResponse&gt; - The async response
     */
    public CompletableFuture<PdfToCsvResponse> pdfToCsv(@Nullable PDFWithPageNums request) {
        AsyncRequestOperation<PDFWithPageNums, PdfToCsvResponse> operation
              = new PdfToCsv.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Convert a Markdown file to PDF
     * 
     * <p>This endpoint takes a Markdown file input, converts it to HTML, and then to PDF format. Input:MARKDOWN Output:PDF Type:SISO
     * 
     * @return The async call builder
     */
    public MarkdownToPdfRequestBuilder markdownToPdf() {
        return new MarkdownToPdfRequestBuilder(sdkConfiguration);
    }

    /**
     * Convert a Markdown file to PDF
     * 
     * <p>This endpoint takes a Markdown file input, converts it to HTML, and then to PDF format. Input:MARKDOWN Output:PDF Type:SISO
     * 
     * @return CompletableFuture&lt;MarkdownToPdfResponse&gt; - The async response
     */
    public CompletableFuture<MarkdownToPdfResponse> markdownToPdfDirect() {
        return markdownToPdf(null);
    }

    /**
     * Convert a Markdown file to PDF
     * 
     * <p>This endpoint takes a Markdown file input, converts it to HTML, and then to PDF format. Input:MARKDOWN Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;MarkdownToPdfResponse&gt; - The async response
     */
    public CompletableFuture<MarkdownToPdfResponse> markdownToPdf(@Nullable GeneralFile request) {
        AsyncRequestOperation<GeneralFile, MarkdownToPdfResponse> operation
              = new MarkdownToPdf.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Convert images to a PDF file
     * 
     * <p>This endpoint converts one or more images to a PDF file. Users can specify whether to stretch the images to fit the PDF page, and whether to automatically rotate the images. Input:Image Output:PDF Type:MISO
     * 
     * @return The async call builder
     */
    public ConvertToPdfRequestBuilder convertToPdf() {
        return new ConvertToPdfRequestBuilder(sdkConfiguration);
    }

    /**
     * Convert images to a PDF file
     * 
     * <p>This endpoint converts one or more images to a PDF file. Users can specify whether to stretch the images to fit the PDF page, and whether to automatically rotate the images. Input:Image Output:PDF Type:MISO
     * 
     * @return CompletableFuture&lt;ConvertToPdfResponse&gt; - The async response
     */
    public CompletableFuture<ConvertToPdfResponse> convertToPdfDirect() {
        return convertToPdf(null);
    }

    /**
     * Convert images to a PDF file
     * 
     * <p>This endpoint converts one or more images to a PDF file. Users can specify whether to stretch the images to fit the PDF page, and whether to automatically rotate the images. Input:Image Output:PDF Type:MISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ConvertToPdfResponse&gt; - The async response
     */
    public CompletableFuture<ConvertToPdfResponse> convertToPdf(@Nullable ConvertToPdfRequest request) {
        AsyncRequestOperation<ConvertToPdfRequest, ConvertToPdfResponse> operation
              = new ConvertToPdf.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Convert an HTML or ZIP (containing HTML and CSS) to PDF
     * 
     * <p>This endpoint takes an HTML or ZIP file input and converts it to a PDF format. Input:HTML Output:PDF Type:SISO
     * 
     * @return The async call builder
     */
    public HtmlToPdfRequestBuilder htmlToPdf() {
        return new HtmlToPdfRequestBuilder(sdkConfiguration);
    }

    /**
     * Convert an HTML or ZIP (containing HTML and CSS) to PDF
     * 
     * <p>This endpoint takes an HTML or ZIP file input and converts it to a PDF format. Input:HTML Output:PDF Type:SISO
     * 
     * @return CompletableFuture&lt;HtmlToPdfResponse&gt; - The async response
     */
    public CompletableFuture<HtmlToPdfResponse> htmlToPdfDirect() {
        return htmlToPdf(null);
    }

    /**
     * Convert an HTML or ZIP (containing HTML and CSS) to PDF
     * 
     * <p>This endpoint takes an HTML or ZIP file input and converts it to a PDF format. Input:HTML Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;HtmlToPdfResponse&gt; - The async response
     */
    public CompletableFuture<HtmlToPdfResponse> htmlToPdf(@Nullable HTMLToPdfRequest request) {
        AsyncRequestOperation<HTMLToPdfRequest, HtmlToPdfResponse> operation
              = new HtmlToPdf.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Convert a file to a PDF using LibreOffice
     * 
     * <p>This endpoint converts a given file to a PDF using LibreOffice API  Input:ANY Output:PDF Type:SISO
     * 
     * @return The async call builder
     */
    public ProcessFileToPDFRequestBuilder processFileToPDF() {
        return new ProcessFileToPDFRequestBuilder(sdkConfiguration);
    }

    /**
     * Convert a file to a PDF using LibreOffice
     * 
     * <p>This endpoint converts a given file to a PDF using LibreOffice API  Input:ANY Output:PDF Type:SISO
     * 
     * @return CompletableFuture&lt;ProcessFileToPDFResponse&gt; - The async response
     */
    public CompletableFuture<ProcessFileToPDFResponse> processFileToPDFDirect() {
        return processFileToPDF(null);
    }

    /**
     * Convert a file to a PDF using LibreOffice
     * 
     * <p>This endpoint converts a given file to a PDF using LibreOffice API  Input:ANY Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ProcessFileToPDFResponse&gt; - The async response
     */
    public CompletableFuture<ProcessFileToPDFResponse> processFileToPDF(@Nullable GeneralFile request) {
        AsyncRequestOperation<GeneralFile, ProcessFileToPDFResponse> operation
              = new ProcessFileToPDF.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Convert EML to PDF
     * 
     * <p>This endpoint converts EML (email) files to PDF format with extensive customization options. Features include font settings, image constraints, display modes, attachment handling, and HTML debug output. Input: EML file, Output: PDF or HTML file. Type: SISO
     * 
     * @return The async call builder
     */
    public ConvertEmlToPdfRequestBuilder convertEmlToPdf() {
        return new ConvertEmlToPdfRequestBuilder(sdkConfiguration);
    }

    /**
     * Convert EML to PDF
     * 
     * <p>This endpoint converts EML (email) files to PDF format with extensive customization options. Features include font settings, image constraints, display modes, attachment handling, and HTML debug output. Input: EML file, Output: PDF or HTML file. Type: SISO
     * 
     * @return CompletableFuture&lt;ConvertEmlToPdfResponse&gt; - The async response
     */
    public CompletableFuture<ConvertEmlToPdfResponse> convertEmlToPdfDirect() {
        return convertEmlToPdf(null);
    }

    /**
     * Convert EML to PDF
     * 
     * <p>This endpoint converts EML (email) files to PDF format with extensive customization options. Features include font settings, image constraints, display modes, attachment handling, and HTML debug output. Input: EML file, Output: PDF or HTML file. Type: SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ConvertEmlToPdfResponse&gt; - The async response
     */
    public CompletableFuture<ConvertEmlToPdfResponse> convertEmlToPdf(@Nullable EmlToPdfRequest request) {
        AsyncRequestOperation<EmlToPdfRequest, ConvertEmlToPdfResponse> operation
              = new ConvertEmlToPdf.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
