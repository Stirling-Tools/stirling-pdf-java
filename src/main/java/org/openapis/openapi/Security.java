/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi;

import static org.openapis.openapi.operations.Operations.RequestOperation;

import jakarta.annotation.Nullable;
import java.lang.Exception;
import org.openapis.openapi.models.components.AddPasswordRequest;
import org.openapis.openapi.models.components.AddWatermarkRequest;
import org.openapis.openapi.models.components.ManualRedactPdfRequest;
import org.openapis.openapi.models.components.PDFFile;
import org.openapis.openapi.models.components.PDFPasswordRequest;
import org.openapis.openapi.models.components.RedactPdfRequest;
import org.openapis.openapi.models.components.SanitizePdfRequest;
import org.openapis.openapi.models.components.SignPDFWithCertRequest;
import org.openapis.openapi.models.components.SignatureValidationRequest;
import org.openapis.openapi.models.operations.AddPasswordRequestBuilder;
import org.openapis.openapi.models.operations.AddPasswordResponse;
import org.openapis.openapi.models.operations.AddWatermarkRequestBuilder;
import org.openapis.openapi.models.operations.AddWatermarkResponse;
import org.openapis.openapi.models.operations.GetPdfInfoRequestBuilder;
import org.openapis.openapi.models.operations.GetPdfInfoResponse;
import org.openapis.openapi.models.operations.RedactPdfAutoRequestBuilder;
import org.openapis.openapi.models.operations.RedactPdfAutoResponse;
import org.openapis.openapi.models.operations.RedactPdfManualRequestBuilder;
import org.openapis.openapi.models.operations.RedactPdfManualResponse;
import org.openapis.openapi.models.operations.RemoveCertSignPDFRequestBuilder;
import org.openapis.openapi.models.operations.RemoveCertSignPDFResponse;
import org.openapis.openapi.models.operations.RemovePasswordRequestBuilder;
import org.openapis.openapi.models.operations.RemovePasswordResponse;
import org.openapis.openapi.models.operations.SanitizePDFRequestBuilder;
import org.openapis.openapi.models.operations.SanitizePDFResponse;
import org.openapis.openapi.models.operations.SignPDFWithCertRequestBuilder;
import org.openapis.openapi.models.operations.SignPDFWithCertResponse;
import org.openapis.openapi.models.operations.ValidateSignatureRequestBuilder;
import org.openapis.openapi.models.operations.ValidateSignatureResponse;
import org.openapis.openapi.operations.AddPassword;
import org.openapis.openapi.operations.AddWatermark;
import org.openapis.openapi.operations.GetPdfInfo;
import org.openapis.openapi.operations.RedactPdfAuto;
import org.openapis.openapi.operations.RedactPdfManual;
import org.openapis.openapi.operations.RemoveCertSignPDF;
import org.openapis.openapi.operations.RemovePassword;
import org.openapis.openapi.operations.SanitizePDF;
import org.openapis.openapi.operations.SignPDFWithCert;
import org.openapis.openapi.operations.ValidateSignature;
import org.openapis.openapi.utils.Headers;

/**
 * Document security and protection services for confidential and sensitive content.
 * 
 * <p>This endpoint group provides essential security operations for organizations handling
 * sensitive documents and materials requiring controlled access.
 * 
 * <p>Common use cases:
 * • Legal confidentiality, healthcare privacy (HIPAA), and financial regulatory compliance
 * • Government classified handling, corporate IP protection, and educational privacy (FERPA)
 * • Contract security for business transactions
 * 
 * <p>Business applications:
 * • Document authentication, confidential sharing, and secure archiving
 * • Content watermarking, access control, and privacy protection through redaction
 * 
 * <p>Industry scenarios:
 * • Legal discovery, medical records exchange, financial audit documentation
 * • Enterprise policy enforcement and data governance
 * 
 * <p>Target users: Legal professionals, healthcare administrators, compliance officers,
 * government agencies, and enterprises handling sensitive content.
 */
public class Security {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncSecurity asyncSDK;

    Security(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncSecurity(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncSecurity async() {
        return asyncSDK;
    }

    /**
     * Validate PDF Digital Signature
     * 
     * <p>Validates the digital signatures in a PDF file against default or custom certificates. Input:PDF Output:JSON Type:SISO
     * 
     * @return The call builder
     */
    public ValidateSignatureRequestBuilder validateSignature() {
        return new ValidateSignatureRequestBuilder(sdkConfiguration);
    }

    /**
     * Validate PDF Digital Signature
     * 
     * <p>Validates the digital signatures in a PDF file against default or custom certificates. Input:PDF Output:JSON Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ValidateSignatureResponse validateSignatureDirect() throws Exception {
        return validateSignature(null);
    }

    /**
     * Validate PDF Digital Signature
     * 
     * <p>Validates the digital signatures in a PDF file against default or custom certificates. Input:PDF Output:JSON Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ValidateSignatureResponse validateSignature(@Nullable SignatureValidationRequest request) throws Exception {
        RequestOperation<SignatureValidationRequest, ValidateSignatureResponse> operation
              = new ValidateSignature.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Sanitize a PDF file
     * 
     * <p>This endpoint processes a PDF file and removes specific elements based on the provided options. Input:PDF Output:PDF Type:SISO
     * 
     * @return The call builder
     */
    public SanitizePDFRequestBuilder sanitizePDF() {
        return new SanitizePDFRequestBuilder(sdkConfiguration);
    }

    /**
     * Sanitize a PDF file
     * 
     * <p>This endpoint processes a PDF file and removes specific elements based on the provided options. Input:PDF Output:PDF Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SanitizePDFResponse sanitizePDFDirect() throws Exception {
        return sanitizePDF(null);
    }

    /**
     * Sanitize a PDF file
     * 
     * <p>This endpoint processes a PDF file and removes specific elements based on the provided options. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SanitizePDFResponse sanitizePDF(@Nullable SanitizePdfRequest request) throws Exception {
        RequestOperation<SanitizePdfRequest, SanitizePDFResponse> operation
              = new SanitizePDF.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove password from a PDF file
     * 
     * <p>This endpoint removes the password from a protected PDF file. Users need to provide the existing password. Input:PDF Output:PDF Type:SISO
     * 
     * @return The call builder
     */
    public RemovePasswordRequestBuilder removePassword() {
        return new RemovePasswordRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove password from a PDF file
     * 
     * <p>This endpoint removes the password from a protected PDF file. Users need to provide the existing password. Input:PDF Output:PDF Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemovePasswordResponse removePasswordDirect() throws Exception {
        return removePassword(null);
    }

    /**
     * Remove password from a PDF file
     * 
     * <p>This endpoint removes the password from a protected PDF file. Users need to provide the existing password. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemovePasswordResponse removePassword(@Nullable PDFPasswordRequest request) throws Exception {
        RequestOperation<PDFPasswordRequest, RemovePasswordResponse> operation
              = new RemovePassword.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove digital signature from PDF
     * 
     * <p>This endpoint accepts a PDF file and returns the PDF file without the digital signature. Input:PDF, Output:PDF Type:SISO
     * 
     * @return The call builder
     */
    public RemoveCertSignPDFRequestBuilder removeCertSignPDF() {
        return new RemoveCertSignPDFRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove digital signature from PDF
     * 
     * <p>This endpoint accepts a PDF file and returns the PDF file without the digital signature. Input:PDF, Output:PDF Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveCertSignPDFResponse removeCertSignPDFDirect() throws Exception {
        return removeCertSignPDF(null);
    }

    /**
     * Remove digital signature from PDF
     * 
     * <p>This endpoint accepts a PDF file and returns the PDF file without the digital signature. Input:PDF, Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveCertSignPDFResponse removeCertSignPDF(@Nullable PDFFile request) throws Exception {
        RequestOperation<PDFFile, RemoveCertSignPDFResponse> operation
              = new RemoveCertSignPDF.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Redacts areas and pages in a PDF document
     * 
     * <p>This operation takes an input PDF file with a list of areas, page number(s)/range(s)/function(s) to redact. Input:PDF, Output:PDF, Type:SISO
     * 
     * @return The call builder
     */
    public RedactPdfManualRequestBuilder redactPdfManual() {
        return new RedactPdfManualRequestBuilder(sdkConfiguration);
    }

    /**
     * Redacts areas and pages in a PDF document
     * 
     * <p>This operation takes an input PDF file with a list of areas, page number(s)/range(s)/function(s) to redact. Input:PDF, Output:PDF, Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RedactPdfManualResponse redactPdfManualDirect() throws Exception {
        return redactPdfManual(null);
    }

    /**
     * Redacts areas and pages in a PDF document
     * 
     * <p>This operation takes an input PDF file with a list of areas, page number(s)/range(s)/function(s) to redact. Input:PDF, Output:PDF, Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RedactPdfManualResponse redactPdfManual(@Nullable ManualRedactPdfRequest request) throws Exception {
        RequestOperation<ManualRedactPdfRequest, RedactPdfManualResponse> operation
              = new RedactPdfManual.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Summary here
     * 
     * <p>desc. Input:PDF Output:JSON Type:SISO
     * 
     * @return The call builder
     */
    public GetPdfInfoRequestBuilder getPdfInfo() {
        return new GetPdfInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * Summary here
     * 
     * <p>desc. Input:PDF Output:JSON Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPdfInfoResponse getPdfInfoDirect() throws Exception {
        return getPdfInfo(null);
    }

    /**
     * Summary here
     * 
     * <p>desc. Input:PDF Output:JSON Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPdfInfoResponse getPdfInfo(@Nullable PDFFile request) throws Exception {
        RequestOperation<PDFFile, GetPdfInfoResponse> operation
              = new GetPdfInfo.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Sign PDF with a Digital Certificate
     * 
     * <p>This endpoint accepts a PDF file, a digital certificate and related information to sign the PDF. It then returns the digitally signed PDF file. Input:PDF Output:PDF Type:SISO
     * 
     * @return The call builder
     */
    public SignPDFWithCertRequestBuilder signPDFWithCert() {
        return new SignPDFWithCertRequestBuilder(sdkConfiguration);
    }

    /**
     * Sign PDF with a Digital Certificate
     * 
     * <p>This endpoint accepts a PDF file, a digital certificate and related information to sign the PDF. It then returns the digitally signed PDF file. Input:PDF Output:PDF Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SignPDFWithCertResponse signPDFWithCertDirect() throws Exception {
        return signPDFWithCert(null);
    }

    /**
     * Sign PDF with a Digital Certificate
     * 
     * <p>This endpoint accepts a PDF file, a digital certificate and related information to sign the PDF. It then returns the digitally signed PDF file. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SignPDFWithCertResponse signPDFWithCert(@Nullable SignPDFWithCertRequest request) throws Exception {
        RequestOperation<SignPDFWithCertRequest, SignPDFWithCertResponse> operation
              = new SignPDFWithCert.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Redacts listOfText in a PDF document
     * 
     * <p>This operation takes an input PDF file and redacts the provided listOfText. Input:PDF, Output:PDF, Type:SISO
     * 
     * @return The call builder
     */
    public RedactPdfAutoRequestBuilder redactPdfAuto() {
        return new RedactPdfAutoRequestBuilder(sdkConfiguration);
    }

    /**
     * Redacts listOfText in a PDF document
     * 
     * <p>This operation takes an input PDF file and redacts the provided listOfText. Input:PDF, Output:PDF, Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RedactPdfAutoResponse redactPdfAutoDirect() throws Exception {
        return redactPdfAuto(null);
    }

    /**
     * Redacts listOfText in a PDF document
     * 
     * <p>This operation takes an input PDF file and redacts the provided listOfText. Input:PDF, Output:PDF, Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RedactPdfAutoResponse redactPdfAuto(@Nullable RedactPdfRequest request) throws Exception {
        RequestOperation<RedactPdfRequest, RedactPdfAutoResponse> operation
              = new RedactPdfAuto.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Add watermark to a PDF file
     * 
     * <p>This endpoint adds a watermark to a given PDF file. Users can specify the watermark type (text or image), rotation, opacity, width spacer, and height spacer. Input:PDF Output:PDF Type:SISO
     * 
     * @return The call builder
     */
    public AddWatermarkRequestBuilder addWatermark() {
        return new AddWatermarkRequestBuilder(sdkConfiguration);
    }

    /**
     * Add watermark to a PDF file
     * 
     * <p>This endpoint adds a watermark to a given PDF file. Users can specify the watermark type (text or image), rotation, opacity, width spacer, and height spacer. Input:PDF Output:PDF Type:SISO
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddWatermarkResponse addWatermarkDirect() throws Exception {
        return addWatermark(null);
    }

    /**
     * Add watermark to a PDF file
     * 
     * <p>This endpoint adds a watermark to a given PDF file. Users can specify the watermark type (text or image), rotation, opacity, width spacer, and height spacer. Input:PDF Output:PDF Type:SISO
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddWatermarkResponse addWatermark(@Nullable AddWatermarkRequest request) throws Exception {
        RequestOperation<AddWatermarkRequest, AddWatermarkResponse> operation
              = new AddWatermark.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Add password to a PDF file
     * 
     * <p>This endpoint adds password protection to a PDF file. Users can specify a set of permissions that should be applied to the file. Input:PDF Output:PDF
     * 
     * @return The call builder
     */
    public AddPasswordRequestBuilder addPassword() {
        return new AddPasswordRequestBuilder(sdkConfiguration);
    }

    /**
     * Add password to a PDF file
     * 
     * <p>This endpoint adds password protection to a PDF file. Users can specify a set of permissions that should be applied to the file. Input:PDF Output:PDF
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddPasswordResponse addPasswordDirect() throws Exception {
        return addPassword(null);
    }

    /**
     * Add password to a PDF file
     * 
     * <p>This endpoint adds password protection to a PDF file. Users can specify a set of permissions that should be applied to the file. Input:PDF Output:PDF
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddPasswordResponse addPassword(@Nullable AddPasswordRequest request) throws Exception {
        RequestOperation<AddPasswordRequest, AddPasswordResponse> operation
              = new AddPassword.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
